	assume	adl=1

	section	.text

	public	_atoll

_atoll:
	push	ix
	ld	ix, -3
	add	ix, sp
	ld	hl, (ix + 9)
	; inlined isspace
.whitespace_loop:
	ld	a, (hl)
	inc	hl
	cp	a, 32
	jr	z, .whitespace_loop
	sub	a, 9
	add	a, -5
	jr	nc, .whitespace_loop

	; A = (HL - 1) - 9 + -5
	; A = (HL - 1) - 14
	sub	a, '-' - 14
	push	af
	jr	z, .minus_sign
	; A = (HL - 1) - 14 - ('-' - 14)
	; A = (HL - 1) - '-'
	sub	a, '+' - '-'
	jr	z, .plus_sign
	dec	hl
	xor	a, a
.plus_sign:
.minus_sign:
	push	hl
	pop	iy
	sbc	hl, hl
	ex	de, hl
	sbc	hl, hl
	ld	b, a
	ld	c, a
	push	hl
	push	hl
	push	hl
	; IY = start of the digits
	; BC:UDE:UHL = 0
	; (ix - 9) = [0, 10]
	jr	.start
.loop:
	; loop  : 27F + 1R + 8W + 1
	; lladd : ?
	; llmulu: ?
	; total : a lot per digit
	ld	(ix - 9), 10
	call	__llmulu	; BC:UDE:UHL *= 10
	ld	(ix - 9), a
	call	__lladd
	inc	iy		; next digit
.start:
	ld	a, (iy)
	sub	a, 48
	cp	a, 10
	jr	c, .loop
.finish:
	ld	sp, ix
	pop	af
	pop	ix
	ret	nz	; A != '-' positive
	; A == '-' negative
	jp	__llneg

	extern	__llneg
	extern	__lladd
	extern	__llmulu
