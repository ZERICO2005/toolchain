;	section	.text,"ax",@progbits
;	assume	adl = 1
;	section	.text,"ax",@progbits
;	public	gfy_Begin
gfy_Begin:
	call	lcd_Init
	call	gfy_internal_Begin
	ld	hl, 40
	push	hl
	ld	hl, 54
	push	hl
	call	lcd_SendCommand1
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 239
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 554
	push	hl
	call	lcd_SendCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 319
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 555
	push	hl
	call	lcd_SendCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	jp	lcd_Cleanup
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_End
gfy_End:
	call	lcd_Init
	ld	hl, 8
	push	hl
	ld	hl, 54
	push	hl
	call	lcd_SendCommand1
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 319
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 554
	push	hl
	call	lcd_SendCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 239
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 555
	push	hl
	call	lcd_SendCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	call	lcd_Cleanup
	jp	gfy_internal_End
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_BlitColumns
gfy_BlitColumns:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 9
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	(ix - 3), hl
	ld	hl, (ix + 9)
	ld	(ix - 9), hl
	ld	hl, (ix + 12)
	ld	(ix - 6), hl
	call	gfy_Wait
	ld	hl, (ix - 3)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB2_2
	ld	a, 0
	jr	BB2_3
BB2_2:
	ld	a, -1
BB2_3:
	ld	hl, -2883584
	ld	iy, -2806784
	bit	0, a
	ld	(ix - 3), hl
	jr	nz, BB2_5
	ld	(ix - 3), iy
BB2_5:
	ld	bc, 240
	bit	0, a
	jr	nz, BB2_7
	push	hl
	pop	iy
BB2_7:
	ld	hl, (ix - 9)
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	add	iy, de
	ld	hl, (ix - 6)
	call	__imulu
	ld	(ix + 6), iy
	ld	de, (ix - 3)
	ld	(ix + 9), de
	ld	(ix + 12), hl
	ld	sp, ix
	pop	ix
	jp	_memcpy
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_BlitRectangle
gfy_BlitRectangle:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 9
	ld	sp, hl
	call	gfy_Wait
	ld	de, (ix + 15)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB3_10
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB3_3
	ld	a, 0
	jr	BB3_4
BB3_3:
	ld	a, -1
BB3_4:
	ld	hl, (ix + 9)
	ld	iy, -2806784
	ld	bc, -2883584
	ld	(ix - 3), bc
	ld	bc, 240
	bit	0, a
	jr	nz, BB3_6
	ld	iy, -2883584
	ld	bc, 240
BB3_6:
	call	__imulu
	ld	bc, 0
	ld	c, (ix + 12)
	add	hl, bc
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 6), iy
	bit	0, a
	jr	nz, BB3_8
	ld	hl, -2806784
	ld	(ix - 3), hl
BB3_8:
	ld	iy, (ix - 3)
	add	iy, bc
	ld	bc, (ix - 6)
BB3_9:
	ld	(ix - 3), iy
	ld	(ix - 9), de
	ld	hl, (ix + 18)
	push	hl
	push	iy
	ld	(ix - 6), bc
	push	bc
	call	_memcpy
	ld	iy, (ix - 3)
	ld	de, (ix - 9)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 240
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 6)
	add	hl, bc
	push	hl
	pop	bc
	dec	de
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB3_9
BB3_10:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_PrintChar
gfy_PrintChar:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 30
	ld	sp, hl
	ld	a, -128
	ld	(ix - 4), a
	call	gfy_Wait
	ld	l, (ix + 6)
	push	hl
	call	gfy_GetCharWidth
	push	hl
	pop	iy
	pop	hl
	lea	hl, iy
	ld	bc, 255
	inc.s	hl
	dec	hl
	ld	h, b
	ld	(ix - 14), hl
	ld	a, (gfy_TextWidthScale)
	ld	iyh, a
	ld	a, (gfy_TextHeightScale)
	ld	(ix - 11), a
	ld	b, 3
	add	a, a
	add	a, a
	add	a, a
	ld	(ix - 3), a
	ld	a, (gfy_PrintChar_Clip)
	ld	hl, (gfy_TextXPos)
	ld	(ix - 10), hl
	cp	a, 2
	ld	(ix - 7), iy
	jp	z, BB4_26
	ld	iy, (gfy_ClipXMin)
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix - 10)
	add	hl, de
	lea	bc, iy
	ld	iy, (ix - 7)
	or	a, a
	sbc	hl, bc
	jp	nc, BB4_26
	ld	hl, (gfy_TextYPos)
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	ld	iyl, a
	add	iy, de
	ld	(ix - 17), hl
	add	hl, de
	lea	bc, iy
	ld	iy, (ix - 7)
	or	a, a
	sbc	hl, bc
	jp	nc, BB4_26
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	mlt	hl
	ld	bc, 0
	ld	c, l
	ld	iy, (ix - 10)
	add	iy, bc
	ld	hl, (gfy_ClipXMax)
	add	iy, de
	add	hl, de
	lea	bc, iy
	ld	iy, (ix - 7)
	or	a, a
	sbc	hl, bc
	jp	nc, BB4_26
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, (ix - 3)
	ld	iy, (ix - 17)
	add	iy, bc
	ld	a, (gfy_ClipYMax)
	ld	l, a
	add	iy, de
	add	hl, de
	lea	de, iy
	ld	iy, (ix - 7)
	or	a, a
	sbc	hl, de
	jp	nc, BB4_26
	ld	hl, (-1900524)
	ld	(ix - 20), hl
	ld	bc, 0
	ld	c, iyh
	ld	hl, (ix - 14)
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix - 10)
	add	hl, de
	ld	(gfy_TextXPos), hl
	ld	hl, (-1900524)
	ld	(ix - 27), hl
	ld	hl, (-1900524)
	ld	de, 76800
	add	hl, de
	ld	de, (ix - 14)
	ld	a, e
	or	a, a
	jp	z, BB4_43
	ld	de, (gfy_TextData)
	ld	(ix - 3), de
	ld	(ix - 30), hl
	ld	hl, (ix - 10)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	ld	hl, (ix - 17)
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 20)
	add	hl, de
	ld	(ix - 20), hl
	or	a, a
	sbc	hl, hl
	ld	l, (ix + 6)
	ld	c, 3
	add	hl, hl
	add	hl, hl
	add	hl, hl
	push	hl
	pop	de
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	ld	a, (ix - 11)
	ld	(ix - 24), a
	ld	a, iyh
	ld	bc, 0
BB4_7:
	ld	(ix - 7), iy
	or	a, a
	ld	(ix - 23), bc
	jr	nz, BB4_9
	xor	a, a
	jp	BB4_25
BB4_9:
	ld	a, (gfy_FontHeight)
	ld	iyh, a
	push	af
	ld	a, iyh
	ld	(ix - 17), a
	pop	af
	ld	iyl, 0
BB4_10:
	ld	a, iyh
	or	a, a
	ld	b, 0
	ld	iyh, b
	ld	hl, (ix - 20)
	ld	(ix - 10), hl
	jp	z, BB4_24
BB4_11:
	ld	hl, (ix - 3)
	ld	a, (hl)
	and	a, (ix - 4)
	ld	e, a
	ld	a, (gfy_Text_BG_Color)
	ld	c, a
	ld	a, (gfy_Text_FG_Color)
	ld	l, a
	ld	a, e
	or	a, a
	jr	z, BB4_13
	ld	c, l
BB4_13:
	ld	a, (gfy_Text_TP_Color)
	ld	l, a
	ld	a, c
	cp	a, l
	jr	nz, BB4_15
	ld	de, 0
	ld	a, (ix - 11)
	ld	e, a
	ld	hl, (ix - 10)
	add	hl, de
	ld	(ix - 10), hl
	jr	BB4_22
BB4_15:
	ld	iyh, c
	ld	a, (ix - 24)
	or	a, a
	ld	a, 0
	ld	c, a
	jr	z, BB4_22
BB4_16:
	ld	hl, (ix - 10)
	ld	de, (ix - 27)
	or	a, a
	sbc	hl, de
	jr	c, BB4_19
	ld	hl, (ix - 10)
	ld	de, (ix - 30)
	or	a, a
	sbc	hl, de
	ld	hl, (ix - 10)
	jr	nc, BB4_20
	ld	a, iyh
	ld	(hl), a
	ld	a, (gfy_TextHeightScale)
	ld	(ix - 11), a
	jr	BB4_20
BB4_19:
	ld	hl, (ix - 10)
BB4_20:
	inc	hl
	ld	(ix - 10), hl
	inc	c
	ld	a, c
	ld	l, (ix - 11)
	cp	a, l
	jr	c, BB4_16
	ld	a, (gfy_FontHeight)
	ld	(ix - 17), a
	ld	a, (ix - 11)
BB4_22:
	ld	(ix - 24), a
	ld	hl, (ix - 3)
	inc	hl
	ld	(ix - 3), hl
	inc	b
	ld	a, b
	ld	l, (ix - 17)
	cp	a, l
	jp	c, BB4_11
	ld	a, (gfy_TextWidthScale)
	ld	h, a
	ld	(ix - 7), hl
	push	af
	ld	a, (ix - 17)
	ld	iyh, a
	pop	af
BB4_24:
	ld	bc, 0
	ld	c, iyh
	ld	de, 240
	ld	hl, (ix - 20)
	add	hl, de
	ld	(ix - 20), hl
	or	a, a
	sbc	hl, hl
	sbc	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	inc	iyl
	ld	a, iyl
	ld	hl, (ix - 7)
	cp	a, h
	ld	a, h
	jp	c, BB4_10
BB4_25:
	ld	l, (ix - 4)
	srl	l
	ld	(ix - 4), l
	ld	bc, (ix - 23)
	inc	bc
	push	bc
	pop	hl
	ld	de, (ix - 14)
	or	a, a
	sbc	hl, de
	ld	iy, (ix - 7)
	jp	z, BB4_43
	jp	BB4_7
BB4_26:
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	de, (gfy_TextYPos)
	ld	bc, 0
	ld	c, iyh
	ld	hl, (ix - 14)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix - 10)
	add	hl, bc
	ld	(gfy_TextXPos), hl
	ld	a, iyl
	or	a, a
	jp	z, BB4_43
	ld	iy, (gfy_TextData)
	ld	hl, (ix - 10)
	call	__set_bc_and_mul_hl_by_240
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	ld	l, (ix + 6)
	ld	c, 3
	add	hl, hl
	add	hl, hl
	add	hl, hl
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix - 7)
	ld	(ix - 20), h
	ld	l, h
	ld	c, b
BB4_28:
	ld	a, l
	or	a, a
	jr	nz, BB4_30
	ld	l, 0
	jp	BB4_42
BB4_30:
	ld	a, (gfy_FontHeight)
	ld	e, a
	ld	(ix - 14), e
	ld	d, 0
	ld	a, d
	ld	(ix - 23), c
BB4_31:
	ld	(ix - 17), a
	ld	a, e
	or	a, a
	ld	l, 0
	ld	a, l
	ld	de, (ix - 3)
	ld	(ix - 10), de
	jr	z, BB4_41
BB4_32:
	ld	a, (iy)
	and	a, (ix - 4)
	ld	c, a
	ld	a, (gfy_Text_BG_Color)
	ld	h, a
	ld	a, (gfy_Text_FG_Color)
	ld	e, a
	ld	a, c
	or	a, a
	jr	z, BB4_34
	ld	h, e
BB4_34:
	ld	a, (gfy_Text_TP_Color)
	ld	e, a
	ld	a, h
	cp	a, e
	jr	nz, BB4_36
	ld	bc, 0
	ld	c, (ix - 11)
	lea	de, iy
	ld	iy, (ix - 10)
	add	iy, bc
	ld	(ix - 10), iy
	push	de
	pop	iy
	jr	BB4_39
BB4_36:
	ld	a, (ix - 11)
	or	a, a
	ld	a, 0
	ld	e, a
	ld	(ix - 11), a
	jr	z, BB4_39
BB4_37:
	lea	bc, iy
	ld	iy, (ix - 10)
	ld	(iy), h
	inc	iy
	ld	(ix - 10), iy
	push	bc
	pop	iy
	inc	e
	ld	a, (gfy_TextHeightScale)
	ld	c, a
	ld	a, e
	ld	(ix - 11), c
	cp	a, c
	jr	c, BB4_37
	ld	a, (gfy_FontHeight)
	ld	(ix - 14), a
BB4_39:
	inc	iy
	inc	l
	ld	a, l
	ld	e, (ix - 14)
	cp	a, e
	jr	c, BB4_32
	ld	a, (gfy_TextWidthScale)
	ld	(ix - 20), a
	ld	a, (ix - 14)
BB4_41:
	ld	bc, 0
	ld	c, a
	ld	de, 240
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	sbc	hl, bc
	push	hl
	pop	bc
	ld	e, a
	add	iy, bc
	ld	a, (ix - 17)
	inc	a
	ld	l, (ix - 20)
	cp	a, l
	ld	c, (ix - 23)
	jp	c, BB4_31
BB4_42:
	ld	a, (ix - 4)
	srl	a
	ld	(ix - 4), a
	inc	c
	ld	a, c
	ld	de, (ix - 7)
	cp	a, e
	jp	nz, BB4_28
BB4_43:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_PrintString
gfy_PrintString:
	push	ix
	ld	ix, 0
	add	ix, sp
	push	hl
	ld	iy, (ix + 6)
	ld	l, (iy)
	ld	a, l
	or	a, a
	jp	z, BB5_3
	inc	iy
BB5_2:
	ld	(ix - 3), iy
	push	hl
	call	gfy_PrintChar
	ld	iy, (ix - 3)
	pop	hl
	ld	a, (iy)
	ld	l, a
	inc	iy
	or	a, a
	jr	nz, BB5_2
BB5_3:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_PrintStringXY
gfy_PrintStringXY:
	push	ix
	ld	ix, 0
	add	ix, sp
	push	hl
	ld	hl, (ix + 9)
	ld	de, (ix + 12)
	push	de
	push	hl
	call	gfy_SetTextXY
	ld	iy, (ix + 6)
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	l, (iy)
	ld	a, l
	or	a, a
	jp	z, BB6_3
	inc	iy
BB6_2:
	ld	(ix - 3), iy
	push	hl
	call	gfy_PrintChar
	ld	iy, (ix - 3)
	pop	hl
	ld	a, (iy)
	ld	l, a
	inc	iy
	or	a, a
	jr	nz, BB6_2
BB6_3:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Line
gfy_Line:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 27
	ld	sp, hl
	ld	de, (ix + 9)
	ld	bc, (ix + 15)
	ld	hl, 1
	ld	(ix - 6), hl
	push	bc
	pop	hl
	sbc	hl, de
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 12), de
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	(ix - 9), hl
	ld	hl, (ix + 12)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	bc, (ix - 9)
	push	hl
	pop	de
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	hl, (ix + 15)
	ld	(ix - 3), hl
	ld	bc, -8388608
	jp	nc, BB7_15
	ld	hl, (ix + 6)
	add	hl, bc
	ex	de, hl
	ld	iy, (ix + 12)
	lea	hl, iy
	add	hl, bc
	push	de
	pop	iy
	or	a, a
	sbc	hl, de
	ld	de, (ix + 12)
	ld	hl, (ix + 6)
	jp	nc, BB7_31
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	hl, (ix + 9)
	ld	de, (ix + 15)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nc, BB7_4
	scf
	sbc	hl, hl
	ld	(ix - 6), hl
BB7_4:
	push	de
	pop	hl
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	c, 1
	add	hl, hl
	push	hl
	pop	iy
	ex	de, hl
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 18), hl
	ld	(ix - 27), iy
	lea	hl, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 15), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 24), hl
	ld	de, (ix + 12)
	push	de
	pop	hl
	call	__set_bc_and_mul_hl_by_240
	ld	(ix - 12), hl
	push	de
	pop	bc
BB7_5:
	ld	iy, (ix - 15)
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	push	bc
	pop	hl
	add	hl, de
	ld	(ix - 21), hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	c, BB7_10
	ld	iy, (ix - 24)
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix - 21)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	nc, BB7_10
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	ld	iyl, a
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	ld	hl, (ix - 3)
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	c, BB7_10
	ld	a, (gfy_ClipYMax)
	ld	iy, 0
	ld	iyl, a
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	ld	hl, (ix - 3)
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	nc, BB7_10
	ld	a, (gfy_Color)
	ld	hl, (-1900524)
	ld	de, (ix - 3)
	add	hl, de
	ld	de, (ix - 12)
	add	hl, de
	ld	(hl), a
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 15), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 24), hl
BB7_10:
	ld	hl, (ix - 9)
	ld	de, -8388608
	add	hl, de
	inc	de
	or	a, a
	sbc	hl, de
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 18)
	jr	nz, BB7_12
	ld	hl, (ix - 27)
BB7_12:
	bit	0, a
	ld	iy, (ix - 6)
	ld	de, (ix - 3)
	jr	nz, BB7_14
	ld	iy, 0
BB7_14:
	add	iy, de
	ld	de, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	inc	bc
	ld	de, 240
	ld	hl, (ix - 12)
	add	hl, de
	ld	(ix - 12), hl
	ld	hl, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 3), iy
	jp	nz, BB7_5
	jp	BB7_59
BB7_15:
	ld	iy, (ix + 9)
	add	iy, bc
	ld	hl, (ix + 15)
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	hl, (ix + 9)
	jp	nc, BB7_45
	push	hl
	pop	iy
	ld	hl, (ix + 6)
	ld	de, (ix + 12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	lea	hl, iy
	ld	de, (ix + 15)
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	push	bc
	pop	hl
	ld	de, -8388608
	add	hl, de
	or	a, a
	sbc	hl, de
	jr	nc, BB7_18
	scf
	sbc	hl, hl
	ld	(ix - 6), hl
BB7_18:
	push	bc
	pop	hl
	push	bc
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	c, 1
	add	hl, hl
	push	hl
	pop	iy
	ex	de, hl
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 15), hl
	ld	(ix - 24), iy
	lea	hl, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 12), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 18), hl
	ld	bc, (ix + 12)
BB7_19:
	ld	iy, (ix - 12)
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	push	bc
	pop	hl
	add	hl, de
	push	bc
	pop	de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB7_23
	ld	iy, (ix - 18)
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 21), de
	ex	de, hl
	add	hl, bc
	push	bc
	pop	de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB7_22
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	ld	iyl, a
	add	iy, de
	ld	hl, (ix - 3)
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB7_29
BB7_22:
	ld	bc, (ix - 21)
	jr	BB7_24
BB7_23:
	push	de
	pop	bc
	ld	de, -8388608
BB7_24:
	ld	hl, (ix - 9)
	add	hl, de
	ld	de, -8388607
	or	a, a
	sbc	hl, de
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 15)
	jr	nz, BB7_26
	ld	hl, (ix - 24)
BB7_26:
	bit	0, a
	ld	iy, (ix - 6)
	jr	nz, BB7_28
	ld	iy, 0
BB7_28:
	add	iy, bc
	ld	de, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, (ix - 3)
	inc	de
	ld	hl, (ix + 9)
	ld	(ix - 3), de
	or	a, a
	sbc	hl, de
	lea	bc, iy
	jp	nz, BB7_19
	jp	BB7_59
BB7_29:
	ld	a, (gfy_ClipYMax)
	ld	iy, 0
	ld	iyl, a
	add	iy, de
	ld	hl, (ix - 3)
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	bc, (ix - 21)
	jp	nc, BB7_24
	ld	a, (gfy_Color)
	ld	iy, (-1900524)
	push	bc
	pop	hl
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	ld	bc, (ix - 3)
	add	iy, bc
	ld	bc, (ix - 21)
	ld	(iy), a
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 12), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 18), hl
	jp	BB7_24
BB7_31:
	ld	(ix - 21), iy
	ld	(ix - 3), hl
	ld	hl, (ix - 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nc, BB7_33
	scf
	sbc	hl, hl
	ld	(ix - 6), hl
BB7_33:
	ld	c, 1
	ld	de, (ix - 9)
	push	de
	pop	hl
	call	__ishl
	ld	(ix - 24), hl
	ex	de, hl
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 18), hl
	ld	iy, (ix + 12)
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix - 21)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB7_59
	ld	hl, (ix - 24)
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 15), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 27), hl
	ld	hl, (ix + 6)
	call	__set_bc_and_mul_hl_by_240
	ld	(ix - 9), hl
	ld	iy, (ix + 9)
BB7_35:
	ld	(ix - 12), iy
	ld	iy, (ix - 15)
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 21), hl
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB7_40
	ld	iy, (ix - 27)
	ld	bc, -8388608
	add	iy, bc
	ld	hl, (ix - 21)
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB7_40
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	ld	iyl, a
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 12)
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB7_40
	ld	a, (gfy_ClipYMax)
	ld	iy, 0
	ld	iyl, a
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 12)
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB7_40
	ld	a, (gfy_Color)
	ld	hl, (-1900524)
	ld	bc, (ix - 12)
	add	hl, bc
	ld	bc, (ix - 9)
	add	hl, bc
	ld	(hl), a
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 15), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 27), hl
BB7_40:
	push	de
	pop	hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 18)
	jr	nz, BB7_42
	ld	hl, (ix - 24)
BB7_42:
	bit	0, a
	ld	iy, (ix - 6)
	ld	bc, (ix - 12)
	jr	nz, BB7_44
	ld	iy, 0
BB7_44:
	add	iy, bc
	add	hl, de
	ld	(ix - 12), hl
	ld	de, (ix - 3)
	inc	de
	ld	bc, 240
	ld	hl, (ix - 9)
	add	hl, bc
	ld	(ix - 9), hl
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, de
	ld	(ix - 3), de
	ld	de, (ix - 12)
	jp	nz, BB7_35
	jp	BB7_59
BB7_45:
	ld	(ix - 3), iy
	ld	hl, (ix - 15)
	ld	bc, -8388608
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nc, BB7_47
	scf
	sbc	hl, hl
	ld	(ix - 6), hl
BB7_47:
	ld	c, 1
	push	de
	pop	hl
	add	hl, hl
	ld	(ix - 18), hl
	ex	de, hl
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 15), hl
	ld	iy, (ix + 15)
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix - 3)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB7_59
	ld	hl, (ix - 18)
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	ld	(ix - 3), hl
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 21), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 24), hl
	ld	de, (ix + 9)
	ld	hl, (ix + 6)
	push	hl
	pop	bc
BB7_49:
	ld	(ix - 9), de
	ld	iy, (ix - 21)
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	push	bc
	pop	hl
	add	hl, de
	push	bc
	pop	de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), de
	jp	c, BB7_54
	ld	iy, (ix - 24)
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ex	de, hl
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB7_54
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	ld	iyl, a
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix - 9)
	push	de
	pop	hl
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB7_54
	ld	a, (gfy_ClipYMax)
	ld	iy, 0
	ld	iyl, a
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ex	de, hl
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB7_54
	ld	a, (gfy_Color)
	ld	iy, (-1900524)
	ld	hl, (ix - 12)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix - 9)
	add	iy, de
	ld	(iy), a
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 21), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 24), hl
BB7_54:
	ld	hl, (ix - 3)
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 15)
	jr	nz, BB7_56
	ld	hl, (ix - 18)
BB7_56:
	bit	0, a
	ld	iy, (ix - 6)
	ld	de, (ix - 12)
	jr	nz, BB7_58
	ld	iy, 0
BB7_58:
	add	iy, de
	ld	bc, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	ld	de, (ix - 9)
	inc	de
	ld	hl, (ix + 15)
	or	a, a
	sbc	hl, de
	lea	bc, iy
	jp	nz, BB7_49
BB7_59:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_FillCircle
gfy_FillCircle:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	bc, (ix + 12)
	ld	de, 0
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	push	bc
	pop	hl
	call	__set_bc_and_mul_hl_by_minus2
	ld	bc, 2
	add	hl, bc
	ld	(ix - 6), hl
	ld	(ix - 3), de
BB8_1:
	ld	hl, (ix + 6)
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	lea	hl, iy
	ld	bc, (ix + 9)
	add	hl, bc
	ld	(ix - 12), hl
	ld	(ix - 9), iy
	lea	hl, iy
	call	__set_bc_and_mul_hl_by_minus2
	inc	hl
	ld	(ix - 15), hl
	push	hl
	ld	hl, (ix - 12)
	push	hl
	push	de
	call	gfy_VertLine
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 3)
	ld	de, (ix + 6)
	add	hl, de
	ld	de, (ix - 15)
	push	de
	ld	de, (ix - 12)
	push	de
	push	hl
	call	gfy_VertLine
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	iy, (ix - 6)
	ld	de, -8388608
	add	iy, de
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	add	hl, de
	ld	(ix - 12), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	sbc	a, a
	push	bc
	pop	iy
	inc	iy
	lea	hl, iy
	ld	c, 1
	add	hl, hl
	bit	0, a
	jr	nz, BB8_3
	ld	(ix - 3), iy
BB8_3:
	bit	0, a
	ld	iy, 0
	jr	nz, BB8_5
	inc	hl
	push	hl
	pop	iy
BB8_5:
	ld	de, (ix - 6)
	add	iy, de
	ld	(ix - 6), iy
	ld	hl, (ix - 9)
	ld	bc, -8388608
	add	hl, bc
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	e, a
	add	iy, bc
	ld	hl, (ix - 3)
	add	hl, bc
	lea	bc, iy
	ld	iy, (ix - 9)
	or	a, a
	sbc	hl, bc
	sbc	a, a
	ld	l, a
	ld	a, e
	or	a, l
	lea	de, iy
	inc	de
	push	de
	pop	hl
	ld	c, 1
	add	hl, hl
	bit	0, a
	jr	nz, BB8_7
	lea	de, iy
BB8_7:
	bit	0, a
	jr	nz, BB8_9
	or	a, a
	sbc	hl, hl
	jr	BB8_10
BB8_9:
	inc	hl
BB8_10:
	ld	bc, -8388608
	push	bc
	pop	iy
	ld	bc, (ix - 6)
	add	hl, bc
	ld	(ix - 6), hl
	push	de
	pop	hl
	lea	bc, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	de
	pop	iy
	jp	c, BB8_1
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Line_NoClip
gfy_Line_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 21
	ld	sp, hl
	ld	a, (ix + 15)
	ld	hl, 1
	ld	(ix - 9), hl
	ld	de, 0
	push	de
	pop	hl
	ld	l, a
	ld	e, (ix + 9)
	ld	(ix - 3), hl
	ld	(ix - 6), de
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 18), de
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	(ix - 12), hl
	ld	hl, (ix + 12)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, de
	jp	nc, BB9_11
	ld	iy, (ix + 12)
	lea	hl, iy
	ld	bc, (ix + 6)
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	jp	nc, BB9_20
	push	bc
	pop	hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 12), hl
	ld	hl, (ix - 6)
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, -8388608
	add	hl, de
	or	a, a
	sbc	hl, de
	jr	nc, BB9_4
	scf
	sbc	hl, hl
	ld	(ix - 9), hl
BB9_4:
	push	bc
	pop	hl
	push	bc
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	c, 1
	add	hl, hl
	ld	(ix - 6), hl
	ex	de, hl
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 15), hl
	ld	iy, (ix + 6)
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	ld	bc, (ix + 12)
	push	bc
	pop	hl
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB9_38
	ld	hl, (ix - 6)
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	bc
	pop	hl
	call	__set_bc_and_mul_hl_by_240
BB9_6:
	ld	a, (gfy_Color)
	ld	iy, (-1900524)
	ld	bc, (ix - 3)
	add	iy, bc
	ld	(ix - 18), hl
	push	hl
	pop	bc
	add	iy, bc
	ld	(iy), a
	push	de
	pop	hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 15)
	jr	nz, BB9_8
	ld	hl, (ix - 6)
BB9_8:
	bit	0, a
	ld	iy, (ix - 9)
	jr	nz, BB9_10
	ld	iy, 0
BB9_10:
	ld	bc, (ix - 3)
	add	iy, bc
	add	hl, de
	ld	(ix - 21), hl
	ld	hl, (ix - 12)
	dec	hl
	ld	de, 240
	lea	bc, iy
	ld	iy, (ix - 18)
	add	iy, de
	ld	(ix - 12), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 3), bc
	lea	hl, iy
	ld	de, (ix - 21)
	jp	nz, BB9_6
	jp	BB9_38
BB9_11:
	ld	l, (ix + 9)
	cp	a, l
	ld	a, l
	jp	nc, BB9_29
	ld	hl, (ix + 6)
	ld	de, (ix + 12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	ld	(ix - 12), hl
	ld	de, -8388608
	push	bc
	pop	hl
	add	hl, de
	or	a, a
	sbc	hl, de
	jr	nc, BB9_14
	scf
	sbc	hl, hl
	ld	(ix - 9), hl
BB9_14:
	push	bc
	pop	hl
	push	bc
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	c, 1
	add	hl, hl
	push	hl
	pop	iy
	ex	de, hl
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 18), hl
	ld	(ix - 21), iy
	lea	hl, iy
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, (ix + 12)
	ex	de, hl
BB9_15:
	ld	a, (gfy_Color)
	ld	iy, (-1900524)
	ld	(ix - 15), hl
	push	bc
	pop	de
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	ld	bc, (ix - 3)
	add	iy, bc
	ld	(iy), a
	ld	(ix - 12), de
	ex	de, hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 18)
	jr	nz, BB9_17
	ld	hl, (ix - 21)
BB9_17:
	bit	0, a
	ld	iy, (ix - 9)
	jr	nz, BB9_19
	ld	iy, 0
BB9_19:
	ld	de, (ix - 15)
	add	iy, de
	ld	de, (ix - 12)
	add	hl, de
	ld	de, (ix - 3)
	inc	de
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	ld	(ix - 3), de
	or	a, a
	sbc	hl, de
	lea	hl, iy
	jp	nz, BB9_15
	jp	BB9_38
BB9_20:
	ld	de, -8388608
	ld	hl, (ix - 18)
	add	hl, de
	or	a, a
	sbc	hl, de
	jr	nc, BB9_22
	scf
	sbc	hl, hl
	ld	(ix - 9), hl
BB9_22:
	ld	c, 1
	ld	de, (ix - 12)
	push	de
	pop	hl
	call	__ishl
	ld	(ix - 3), hl
	ex	de, hl
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	call	__ishl
	push	de
	pop	bc
	ld	(ix - 12), hl
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	ld	hl, (ix + 6)
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB9_38
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	ld	hl, (ix + 6)
	push	bc
	pop	iy
	call	__set_bc_and_mul_hl_by_240
	lea	bc, iy
BB9_24:
	ld	(ix - 15), bc
	ld	a, (gfy_Color)
	ld	iy, (-1900524)
	push	de
	pop	bc
	ld	de, (ix - 6)
	add	iy, de
	ld	(ix - 18), hl
	ex	de, hl
	add	iy, de
	ld	(iy), a
	ld	(ix - 21), bc
	push	bc
	pop	hl
	ld	de, -8388608
	add	hl, de
	inc	de
	or	a, a
	sbc	hl, de
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 12)
	jr	nz, BB9_26
	ld	hl, (ix - 3)
BB9_26:
	bit	0, a
	ld	iy, (ix - 9)
	jr	nz, BB9_28
	ld	iy, 0
BB9_28:
	ld	de, (ix - 6)
	add	iy, de
	ld	(ix - 6), iy
	ld	de, (ix - 21)
	add	hl, de
	ld	bc, (ix - 15)
	dec	bc
	ld	de, 240
	ld	iy, (ix - 18)
	add	iy, de
	ex	de, hl
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	lea	hl, iy
	jp	nz, BB9_24
	jp	BB9_38
BB9_29:
	ld	bc, -8388608
	ld	hl, (ix - 15)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nc, BB9_31
	scf
	sbc	hl, hl
	ld	(ix - 9), hl
BB9_31:
	ld	c, 1
	push	de
	pop	hl
	add	hl, hl
	ld	(ix - 12), hl
	ex	de, hl
	ld	iy, (ix - 18)
	lea	de, iy
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 15), hl
	ld	l, (ix + 15)
	cp	a, l
	jp	nc, BB9_38
	ld	hl, (ix - 12)
	lea	de, iy
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, (ix + 6)
	ex	de, hl
BB9_33:
	ld	a, (gfy_Color)
	ld	iy, (-1900524)
	ld	(ix - 21), hl
	push	bc
	pop	de
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	ld	bc, (ix - 6)
	add	iy, bc
	ld	(iy), a
	ld	(ix - 18), de
	ex	de, hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 15)
	jr	nz, BB9_35
	ld	hl, (ix - 12)
BB9_35:
	bit	0, a
	ld	iy, (ix - 9)
	jr	nz, BB9_37
	ld	iy, 0
BB9_37:
	ld	de, (ix - 21)
	add	iy, de
	ld	de, (ix - 18)
	add	hl, de
	ld	de, (ix - 6)
	inc	de
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	ld	(ix - 6), de
	or	a, a
	sbc	hl, de
	lea	hl, iy
	jp	nz, BB9_33
BB9_38:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_FillCircle_NoClip
gfy_FillCircle_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	de, (ix + 12)
	ld	iy, 0
	ld	bc, -2
	lea	hl, iy
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix + 12)
	call	__imulu
	ld	bc, 2
	add	hl, bc
	ld	(ix - 6), hl
	ld	(ix - 3), iy
	push	de
	pop	bc
BB10_1:
	ld	hl, (ix + 6)
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	a, c
	add	a, (ix + 9)
	ld	l, a
	ld	(ix - 12), hl
	ld	(ix - 9), bc
	push	bc
	pop	hl
	call	__set_bc_and_mul_hl_by_minus2
	inc	hl
	ld	(ix - 15), hl
	push	hl
	ld	hl, (ix - 12)
	push	hl
	push	de
	call	gfy_VertLine_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 3)
	ld	de, (ix + 6)
	add	hl, de
	ld	de, (ix - 15)
	push	de
	ld	de, (ix - 12)
	push	de
	push	hl
	call	gfy_VertLine_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	iy, (ix - 6)
	ld	de, -8388608
	add	iy, de
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	add	hl, de
	ld	(ix - 12), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	sbc	a, a
	push	bc
	pop	iy
	inc	iy
	lea	hl, iy
	ld	c, 1
	add	hl, hl
	bit	0, a
	jr	nz, BB10_3
	ld	(ix - 3), iy
BB10_3:
	bit	0, a
	ld	iy, 0
	jr	nz, BB10_5
	inc	hl
	push	hl
	pop	iy
BB10_5:
	ld	de, (ix - 6)
	add	iy, de
	ld	(ix - 6), iy
	ld	hl, (ix - 9)
	ld	bc, -8388608
	add	hl, bc
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	e, a
	add	iy, bc
	ld	hl, (ix - 3)
	add	hl, bc
	lea	bc, iy
	ld	iy, (ix - 9)
	or	a, a
	sbc	hl, bc
	sbc	a, a
	ld	l, a
	ld	a, e
	or	a, l
	lea	de, iy
	inc	de
	push	de
	pop	hl
	ld	c, 1
	add	hl, hl
	bit	0, a
	jr	nz, BB10_7
	lea	de, iy
BB10_7:
	bit	0, a
	jr	nz, BB10_9
	or	a, a
	sbc	hl, hl
	jr	BB10_10
BB10_9:
	inc	hl
BB10_10:
	ld	bc, -8388608
	push	bc
	pop	iy
	ld	bc, (ix - 6)
	add	hl, bc
	ld	(ix - 6), hl
	push	de
	pop	hl
	lea	bc, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	de
	pop	bc
	jp	c, BB10_1
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftDown
gfy_ShiftDown:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 18
	ld	sp, hl
	ld	l, (ix + 6)
	ld	a, l
	or	a, a
	jp	z, BB11_5
	ld	de, 0
	ld	e, l
	ld	(ix - 12), de
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	a, (gfy_ClipYMin)
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 9), hl
	ld	hl, (-1900524)
	ld	(ix - 6), hl
	ld	iy, 0
	lea	bc, iy
	ld	c, a
	ld	a, (gfy_ClipYMax)
	ld	iyl, a
	push	bc
	pop	hl
	ld	de, (ix - 12)
	add	hl, de
	ex	de, hl
	lea	hl, iy
	ld	(ix - 15), de
	or	a, a
	sbc	hl, de
	ld	de, -8388608
	ld	(ix - 12), hl
	add	hl, de
	inc	de
	or	a, a
	sbc	hl, de
	jr	c, BB11_5
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 18), iy
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	ld	hl, (ix - 9)
	add	hl, de
	lea	de, iy
	ld	iy, (ix - 3)
	or	a, a
	sbc	hl, de
	jr	nc, BB11_5
	push	bc
	pop	de
	add	iy, de
	ld	hl, (ix - 9)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix - 6)
	ld	bc, (ix - 15)
	add	hl, bc
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 18)
	ld	bc, (ix - 9)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
BB11_4:
	ld	(ix - 9), bc
	ld	(ix - 3), iy
	ld	hl, (ix - 12)
	push	hl
	push	iy
	ld	(ix - 6), de
	push	de
	call	_memmove
	ld	bc, (ix - 9)
	ld	iy, (ix - 3)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 240
	ex	de, hl
	add	iy, de
	ld	hl, (ix - 6)
	add	hl, de
	ex	de, hl
	dec	bc
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB11_4
BB11_5:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftUp
gfy_ShiftUp:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 18
	ld	sp, hl
	ld	l, (ix + 6)
	ld	a, l
	or	a, a
	jp	z, BB12_5
	ld	de, 0
	ld	e, l
	ld	(ix - 6), de
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	a, (gfy_ClipYMin)
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 12), hl
	ld	hl, (-1900524)
	ld	(ix - 9), hl
	ld	iy, 0
	lea	de, iy
	ld	e, a
	ld	a, (gfy_ClipYMax)
	ld	iyl, a
	push	de
	pop	hl
	ld	bc, (ix - 6)
	add	hl, bc
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ld	bc, -8388608
	ld	(ix - 15), hl
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	jr	c, BB12_5
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 18), iy
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 12)
	add	hl, bc
	lea	bc, iy
	ld	iy, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	nc, BB12_5
	add	iy, de
	ld	hl, (ix - 12)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	ex	de, hl
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix - 9)
	add	hl, de
	add	hl, bc
	ex	de, hl
	ld	hl, (ix - 18)
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
BB12_4:
	ld	(ix - 6), bc
	ld	(ix - 3), iy
	ld	hl, (ix - 15)
	push	hl
	push	iy
	ld	(ix - 9), de
	push	de
	call	_memmove
	ld	bc, (ix - 6)
	ld	iy, (ix - 3)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 240
	ex	de, hl
	add	iy, de
	ld	hl, (ix - 9)
	add	hl, de
	ex	de, hl
	dec	bc
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB12_4
BB12_5:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftLeft
gfy_ShiftLeft:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 21
	ld	sp, hl
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB13_4
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 6), hl
	ld	a, (gfy_ClipYMin)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	iy, (gfy_ClipXMin)
	ld	de, (-1900524)
	ld	(ix - 3), de
	push	bc
	pop	de
	ld	a, (gfy_ClipYMax)
	ld	l, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	(ix - 12), iy
	lea	hl, iy
	ld	bc, (ix + 6)
	add	hl, bc
	ld	iy, (gfy_ClipXMax)
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 9), hl
	add	hl, bc
	ld	(ix - 18), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB13_4
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 12)
	ld	bc, (ix + 6)
	or	a, a
	sbc	hl, bc
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 6)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	(ix - 21), bc
	add	iy, bc
	ld	(ix - 3), iy
	ld	iy, (ix - 6)
	add	iy, de
	ld	hl, (ix - 12)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 21)
	add	iy, de
	lea	bc, iy
	ld	iy, (ix - 3)
BB13_3:
	ld	(ix - 3), iy
	ld	hl, (ix - 15)
	push	hl
	ld	(ix - 6), bc
	push	bc
	push	iy
	call	_memcpy
	ld	iy, (ix - 3)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 240
	ex	de, hl
	ld	hl, (ix - 6)
	add	hl, de
	push	hl
	pop	bc
	add	iy, de
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 9), hl
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 18)
	or	a, a
	sbc	hl, de
	jr	c, BB13_3
BB13_4:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftRight
gfy_ShiftRight:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 21
	ld	sp, hl
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB14_4
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 6), hl
	ld	a, (gfy_ClipYMin)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	iy, (gfy_ClipXMin)
	ld	de, (-1900524)
	ld	(ix - 3), de
	push	bc
	pop	de
	ld	a, (gfy_ClipYMax)
	ld	l, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	(ix - 12), iy
	lea	hl, iy
	ld	bc, (ix + 6)
	add	hl, bc
	ld	iy, (gfy_ClipXMax)
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 9), hl
	add	hl, bc
	ld	(ix - 18), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB14_4
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 12)
	ld	bc, (ix + 6)
	or	a, a
	sbc	hl, bc
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 6)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	(ix - 21), bc
	add	iy, bc
	ld	(ix - 3), iy
	ld	iy, (ix - 6)
	add	iy, de
	ld	hl, (ix - 12)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 21)
	add	iy, de
	lea	bc, iy
	ld	iy, (ix - 3)
BB14_3:
	ld	(ix - 3), iy
	ld	hl, (ix - 15)
	push	hl
	ld	(ix - 6), bc
	push	bc
	push	iy
	call	_memcpy
	ld	iy, (ix - 3)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 240
	ex	de, hl
	ld	hl, (ix - 6)
	add	hl, de
	push	hl
	pop	bc
	add	iy, de
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 9), hl
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 18)
	or	a, a
	sbc	hl, de
	jr	c, BB14_3
BB14_4:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Tilemap
gfy_Tilemap:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 39
	ld	sp, hl
	ld	hl, (ix + 9)
	xor	a, a
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	c, (iy + 7)
	ld	(ix - 3), bc
	call	__idivu
	ld	(ix - 9), hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 6)
	ld	hl, (ix + 12)
	push	de
	pop	bc
	call	__idivu
	ld	(ix - 12), hl
	ld	hl, (ix - 9)
	ld	bc, (ix - 3)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	hl, (ix - 12)
	ld	(ix - 15), de
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, de
	ld	(ix - 6), hl
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 22), a
	ld	(ix - 18), iy
	jr	z, BB15_2
	ld	a, 0
	jr	BB15_3
BB15_2:
	ld	a, -1
BB15_3:
	ld	de, 0
	push	de
	pop	bc
	ld	de, (ix - 3)
	ld	iy, (ix + 6)
	ld	hl, (iy + 15)
	ld	iy, (ix - 18)
	add	iy, de
	bit	0, a
	jr	nz, BB15_5
	lea	bc, iy
BB15_5:
	or	a, a
	sbc	hl, bc
	ld	(ix - 21), hl
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	c, (iy + 14)
	ld	hl, (ix - 6)
	push	hl
	pop	iy
	ld	de, (ix - 15)
	add	iy, de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, 0
	jr	z, BB15_7
	lea	de, iy
BB15_7:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	(ix - 18), hl
	ld	iy, (ix + 6)
	ld	b, (iy + 9)
	bit	0, a
	jr	nz, BB15_12
	ld	hl, (ix + 9)
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	jr	nc, BB15_10
	ld	hl, (ix - 21)
	add	hl, de
	ld	(ix - 21), hl
	or	a, a
	sbc	hl, hl
	jr	BB15_11
BB15_10:
	inc	b
	ld	hl, (ix - 9)
	dec	hl
BB15_11:
	ld	(ix - 9), hl
BB15_12:
	ld	c, (iy + 8)
	ld	hl, (ix - 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB15_17
	ld	hl, (ix + 12)
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	jr	nc, BB15_15
	ld	hl, (ix - 18)
	add	hl, de
	ld	(ix - 18), hl
	or	a, a
	sbc	hl, hl
	jr	BB15_16
BB15_15:
	inc	c
	ld	hl, (ix - 12)
	dec	hl
BB15_16:
	ld	(ix - 12), hl
BB15_17:
	ld	a, b
	or	a, a
	jr	z, BB15_19
	ld	a, c
	or	a, a
	jr	nz, BB15_20
BB15_19:
	ld	sp, ix
	pop	ix
	ret
BB15_20:
	ld	(ix - 23), c
	or	a, a
	sbc	hl, hl
	ld	(ix - 6), b
	ld	l, b
	ld	(ix - 15), hl
	call	gfy_Wait
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	iy, (ix + 6)
	ld	c, (iy + 13)
	ld	l, (iy + 12)
	call	__imulu
	ld	(ix - 3), hl
	ld	hl, (ix - 12)
	call	__imulu
	ld	de, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	push	bc
	pop	hl
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	ld	(ix - 26), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 11)
	dec	a
	cp	a, 7
	jr	nc, BB15_22
	ld	iy, _switch.table.gfy_Tilemap_NoClip
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	jr	BB15_23
BB15_22:
	ld	hl, gfy_Sprite_NoClip
BB15_23:
	ld	(ix - 32), hl
	ld	hl, (gfy_ClipXMax)
	ld	iy, 0
	lea	de, iy
	ld	bc, (ix + 6)
	push	bc
	pop	iy
	ld	e, (iy + 7)
	or	a, a
	sbc	hl, de
	ld	(ix - 29), hl
	ld	a, (gfy_ClipYMax)
	ld	de, 0
	push	de
	pop	hl
	ld	l, a
	ld	e, (iy + 6)
	or	a, a
	sbc	hl, de
	ld	(ix - 12), hl
	ld	iy, (ix - 9)
	ld	c, (ix - 6)
BB15_24:
	ld	hl, (ix - 18)
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jp	nc, BB15_33
	ld	hl, (ix - 3)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	c, BB15_27
	ld	iy, (ix - 3)
BB15_27:
	ld	hl, (ix - 21)
	ld	(ix - 9), hl
BB15_28:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB15_19
	ld	(ix - 36), c
	ld	(ix - 35), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix - 39), hl
	ld	iy, (iy)
	ld	(ix - 15), de
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 39)
	add	hl, de
	ld	iy, (hl)
	ld	de, (ix - 9)
	push	de
	pop	hl
	ld	bc, (ix - 29)
	or	a, a
	sbc	hl, bc
	ld	(ix - 9), de
	jr	nc, BB15_31
	ld	hl, (ix - 18)
	push	hl
	push	de
	push	iy
	ld	hl, (ix - 32)
	call	__indcallhl
	jr	BB15_32
BB15_31:
	ld	hl, (ix - 18)
	push	hl
	push	de
	push	iy
	call	gfy_Sprite
BB15_32:
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, (ix - 15)
	inc	de
	ld	c, (ix - 36)
	dec	c
	ld	a, c
	or	a, a
	ld	b, (ix - 23)
	ld	iy, (ix - 35)
	jp	nz, BB15_28
	jp	BB15_38
BB15_33:
	ld	hl, (ix - 3)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	c, BB15_35
	ld	iy, (ix - 3)
BB15_35:
	ld	hl, (ix - 21)
	ld	(ix - 9), hl
BB15_36:
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jp	z, BB15_19
	ld	(ix - 35), iy
	ld	(ix - 36), c
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix - 39), hl
	ld	hl, (ix + 6)
	ld	iy, (hl)
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	ld	(ix - 15), de
	push	hl
	pop	de
	ld	hl, (ix - 39)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 18)
	push	de
	ld	de, (ix - 9)
	push	de
	push	hl
	call	gfy_Sprite
	ld	b, (ix - 23)
	ld	iy, (ix + 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	e, (iy + 7)
	ld	c, (ix - 36)
	ld	iy, (ix - 35)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, (ix - 15)
	inc	de
	dec	c
	ld	a, c
	or	a, a
	jr	nz, BB15_36
BB15_38:
	ld	hl, (ix - 26)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 6)
	ld	hl, (ix - 18)
	add	hl, de
	ld	(ix - 18), hl
	ld	a, (ix - 22)
	inc	a
	ld	(ix - 22), a
	cp	a, b
	ld	iy, (ix - 9)
	ld	c, (ix - 6)
	jp	nz, BB15_24
	jp	BB15_19
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Sprite_NoClip
gfy_Sprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 10
	ld	sp, hl
	call	gfy_Wait
	ld	iy, (-1900524)
	ld	hl, (ix + 6)
	ld	a, (hl)
	ld	(ix - 1), a
	or	a, a
	jr	z, BB16_3
	ld	hl, (ix + 9)
	ld	de, 0
	ld	e, (ix + 12)
	add	iy, de
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	lea	bc, iy
	ld	iy, (ix + 6)
	lea	hl, iy + 2
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 1)
	ld	(ix - 4), de
BB16_2:
	ld	(ix - 10), hl
	ld	(ix - 7), bc
	ld	de, (ix - 4)
	push	de
	push	hl
	push	bc
	call	_memcpy
	ld	iy, (ix - 7)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 10)
	ld	de, (ix - 4)
	add	hl, de
	ld	de, 240
	add	iy, de
	lea	bc, iy
	ld	a, (ix - 1)
	dec	a
	ld	(ix - 1), a
	or	a, a
	jr	nz, BB16_2
BB16_3:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	private	gfy_Sprite_NoClip_Size2
gfy_Sprite_NoClip_Size2:
	push	ix
	ld	ix, 0
	add	ix, sp
	push	hl
	ld	hl, (ix + 6)
	ld	iy, (-1900524)
	ld	e, (hl)
	ld	a, e
	or	a, a
	jr	z, BB17_3
	ld	hl, (ix + 9)
	ld	a, e
	ld	de, 0
	ld	e, (ix + 12)
	add	iy, de
	call	__set_bc_and_mul_hl_by_240
	ex	de, hl
	lea	hl, iy
	add	hl, de
	ld	e, a
	ld	iy, (ix + 6)
	lea	iy, iy + 2
BB17_2:
	ld	(ix - 3), hl
	ld	hl, (iy)
	lea	bc, iy
	ld	iy, (ix - 3)
	ld	(iy), l
	ld	(iy + 1), h
	push	bc
	pop	iy
	ld	hl, (ix - 3)
	lea	iy, iy + 2
	ld	bc, 240
	add	hl, bc
	dec	e
	ld	a, e
	or	a, a
	jr	nz, BB17_2
BB17_3:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	private	gfy_Sprite_NoClip_Size4
gfy_Sprite_NoClip_Size4:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 4
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	iy, (-1900524)
	ld	a, (hl)
	ld	(ix - 4), a
	or	a, a
	jr	z, BB18_3
	ld	hl, (ix + 9)
	ld	de, 0
	ld	e, (ix + 12)
	add	iy, de
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	lea	de, iy
	ld	iy, (ix + 6)
	lea	iy, iy + 2
BB18_2:
	ld	(ix - 3), iy
	ld	hl, (ix - 3)
	ld	bc, (hl)
	ld	iy, (ix - 3)
	ld	a, (iy + 3)
	push	de
	pop	hl
	ld	(hl), bc
	push	de
	pop	iy
	ld	(iy + 3), a
	ld	iy, (ix - 3)
	lea	iy, iy + 4
	ld	de, 240
	add	hl, de
	ex	de, hl
	ld	a, (ix - 4)
	dec	a
	ld	(ix - 4), a
	or	a, a
	jr	nz, BB18_2
BB18_3:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	private	gfy_Sprite_NoClip_Size8
gfy_Sprite_NoClip_Size8:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 7
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	bc, (-1900524)
	ld	a, (hl)
	ld	(ix - 1), a
	or	a, a
	jr	z, BB19_3
	ld	hl, (ix + 9)
	ld	de, 0
	ld	e, (ix + 12)
	push	bc
	pop	iy
	add	iy, de
	call	__set_bc_and_mul_hl_by_240
	ex	de, hl
	add	iy, de
	lea	hl, iy
	ld	iy, (ix + 6)
	lea	iy, iy + 2
BB19_2:
	ld	de, (iy)
	ld	(ix - 4), de
	ld	de, (iy + 3)
	ld	(ix - 7), de
	ld	bc, (iy + 6)
	lea	de, iy
	push	hl
	pop	iy
	ld	hl, (ix - 4)
	ld	(iy), hl
	ld	hl, (ix - 7)
	ld	(iy + 3), hl
	ld	(iy + 6), c
	ld	(iy + 7), b
	lea	hl, iy
	push	de
	pop	iy
	lea	iy, iy + 8
	ld	de, 240
	add	hl, de
	ld	a, (ix - 1)
	dec	a
	ld	(ix - 1), a
	or	a, a
	jr	nz, BB19_2
BB19_3:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	private	gfy_Sprite_NoClip_Size16
gfy_Sprite_NoClip_Size16:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 4
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	iy, (-1900524)
	ld	a, (hl)
	ld	(ix - 1), a
	or	a, a
	jr	z, BB20_3
	ld	hl, (ix + 9)
	ld	de, 0
	ld	e, (ix + 12)
	add	iy, de
	call	__set_bc_and_mul_hl_by_240
	ex	de, hl
	lea	hl, iy
	add	hl, de
	ld	iy, (ix + 6)
	lea	iy, iy + 2
BB20_2:
	ld	(ix - 4), hl
	ex	de, hl
	lea	hl, iy
	ld	bc, 16
	ldir
	ld	hl, (ix - 4)
	lea	iy, iy + 16
	ld	de, 240
	add	hl, de
	ld	a, (ix - 1)
	dec	a
	ld	(ix - 1), a
	or	a, a
	jr	nz, BB20_2
BB20_3:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	private	gfy_Sprite_NoClip_Size32
gfy_Sprite_NoClip_Size32:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 4
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	iy, (-1900524)
	ld	a, (hl)
	ld	(ix - 1), a
	or	a, a
	jr	z, BB21_3
	ld	hl, (ix + 9)
	ld	de, 0
	ld	e, (ix + 12)
	add	iy, de
	call	__set_bc_and_mul_hl_by_240
	ex	de, hl
	lea	hl, iy
	add	hl, de
	ld	iy, (ix + 6)
	lea	iy, iy + 2
BB21_2:
	ld	(ix - 4), hl
	ex	de, hl
	lea	hl, iy
	ld	bc, 32
	ldir
	ld	hl, (ix - 4)
	lea	iy, iy + 32
	ld	de, 240
	add	hl, de
	ld	a, (ix - 1)
	dec	a
	ld	(ix - 1), a
	or	a, a
	jr	nz, BB21_2
BB21_3:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	private	gfy_Sprite_NoClip_Size64
gfy_Sprite_NoClip_Size64:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 4
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	iy, (-1900524)
	ld	a, (hl)
	ld	(ix - 1), a
	or	a, a
	jr	z, BB22_3
	ld	hl, (ix + 9)
	ld	de, 0
	ld	e, (ix + 12)
	add	iy, de
	call	__set_bc_and_mul_hl_by_240
	ex	de, hl
	lea	hl, iy
	add	hl, de
	ld	iy, (ix + 6)
	lea	iy, iy + 2
BB22_2:
	ld	(ix - 4), hl
	ex	de, hl
	lea	hl, iy
	ld	bc, 64
	ldir
	ld	hl, (ix - 4)
	lea	iy, iy + 64
	ld	de, 240
	add	hl, de
	ld	a, (ix - 1)
	dec	a
	ld	(ix - 1), a
	or	a, a
	jr	nz, BB22_2
BB22_3:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	private	gfy_Sprite_NoClip_Size128
gfy_Sprite_NoClip_Size128:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 4
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	iy, (-1900524)
	ld	a, (hl)
	ld	(ix - 1), a
	or	a, a
	jr	z, BB23_3
	ld	hl, (ix + 9)
	ld	de, 0
	ld	e, (ix + 12)
	add	iy, de
	call	__set_bc_and_mul_hl_by_240
	ex	de, hl
	lea	hl, iy
	add	hl, de
	ld	iy, (ix + 6)
	lea	iy, iy + 2
BB23_2:
	ld	(ix - 4), hl
	ex	de, hl
	lea	hl, iy
	ld	bc, 128
	ldir
	ld	hl, (ix - 4)
	ld	de, 128
	add	iy, de
	ld	de, 240
	add	hl, de
	ld	a, (ix - 1)
	dec	a
	ld	(ix - 1), a
	or	a, a
	jr	nz, BB23_2
BB23_3:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Sprite
gfy_Sprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 31
	ld	sp, hl
	ld	hl, (ix + 9)
	ld	iy, (gfy_ClipXMax)
	ld	de, -8388608
	add	iy, de
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB24_21
	ld	hl, (ix + 12)
	ld	a, (gfy_ClipYMax)
	ld	de, 0
	lea	bc, iy
	push	de
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	add	hl, de
	ld	(ix - 3), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB24_21
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	a, l
	or	a, a
	jp	z, BB24_21
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	(ix - 6), a
	or	a, a
	jp	z, BB24_21
	ld	de, 0
	ld	a, l
	ex	de, hl
	ld	l, a
	ld	de, (ix + 9)
	add	hl, de
	ld	(ix - 9), bc
	ld	iy, (gfy_ClipXMin)
	ld	de, -8388608
	add	iy, de
	ld	(ix - 19), hl
	add	hl, de
	ld	(ix - 16), a
	ld	(ix - 12), hl
	ld	(ix - 15), iy
	lea	de, iy
	ld	bc, (ix - 9)
	or	a, a
	sbc	hl, de
	jp	c, BB24_21
	ld	iy, 0
	lea	de, iy
	ld	e, (ix - 6)
	ld	(ix - 25), de
	ex	de, hl
	ld	de, (ix + 12)
	add	hl, de
	ld	(ix - 22), hl
	ld	a, (gfy_ClipYMin)
	ld	iyl, a
	ld	hl, -8388608
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix - 22)
	add	hl, de
	ld	(ix - 28), hl
	ld	(ix - 31), iy
	lea	de, iy
	push	bc
	pop	iy
	or	a, a
	sbc	hl, de
	jp	c, BB24_21
	ld	hl, (ix + 9)
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	jr	c, BB24_10
	ld	hl, (ix + 12)
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 31)
	or	a, a
	sbc	hl, de
	jr	c, BB24_10
	lea	hl, iy
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	c, BB24_10
	ld	hl, (ix - 3)
	ld	de, (ix - 28)
	or	a, a
	sbc	hl, de
	jp	nc, BB24_22
BB24_10:
	call	gfy_Wait
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 15), hl
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, de
	ld	(ix - 31), hl
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix + 12)
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	ld	(ix - 3), hl
	jr	nc, BB24_12
	ld	hl, (ix + 12)
	sub	a, l
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix - 3), hl
BB24_12:
	ld	iy, (gfy_ClipXMax)
	ld	hl, (ix - 19)
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	(ix - 9), hl
	add	iy, de
	lea	hl, iy
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	jr	c, BB24_14
	or	a, a
	sbc	hl, hl
	ld	(ix - 9), hl
BB24_14:
	ld	bc, 255
	ld	a, (gfy_ClipYMax)
	ld	iy, 0
	ld	iyl, a
	lea	hl, iy
	add	hl, de
	ld	de, (ix - 28)
	or	a, a
	sbc	hl, de
	ld	hl, 0
	jr	nc, BB24_16
	ld	hl, (ix - 22)
	ld	a, l
	sub	a, iyl
	or	a, a
	sbc	hl, hl
	ld	l, a
BB24_16:
	ld	(ix - 19), hl
	ld	hl, (ix - 31)
	call	__iand
	push	hl
	pop	de
	ld	bc, -8388608
	ld	iy, (ix - 15)
	add	iy, bc
	ld	hl, (ix + 9)
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB24_18
	ld	de, 0
BB24_18:
	ld	hl, (ix - 9)
	ld	a, l
	ld	(ix - 12), de
	add	a, e
	ld	l, a
	ld	c, (ix - 16)
	ld	a, c
	sub	a, l
	ld	(ix - 9), a
	ld	de, (-1900524)
	ld	a, c
	cp	a, l
	jp	z, BB24_21
	ld	hl, (ix - 3)
	ld	bc, (ix + 12)
	add	hl, bc
	push	hl
	pop	bc
	push	de
	pop	iy
	add	iy, bc
	ld	hl, (ix - 12)
	ld	de, (ix + 9)
	add	hl, de
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	lea	de, iy
	ld	bc, (ix - 3)
	ld	iy, (ix + 6)
	add	iy, bc
	ld	hl, (ix - 12)
	ld	bc, (ix - 25)
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	lea	iy, iy + 2
	ld	hl, (ix - 19)
	ld	a, l
	ld	hl, (ix - 3)
	add	a, l
	ld	l, a
	ld	a, (ix - 6)
	sub	a, l
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix - 12), hl
BB24_20:
	ld	(ix - 3), iy
	ld	hl, (ix - 12)
	push	hl
	push	iy
	ld	(ix - 6), de
	push	de
	call	_memcpy
	ld	iy, (ix - 3)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, (ix - 25)
	add	iy, de
	ld	de, 240
	ld	hl, (ix - 6)
	add	hl, de
	ex	de, hl
	ld	a, (ix - 9)
	dec	a
	ld	(ix - 9), a
	or	a, a
	jr	nz, BB24_20
BB24_21:
	ld	sp, ix
	pop	ix
	ret
BB24_22:
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	gfy_Sprite_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	jr	BB24_21
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Tilemap_NoClip
gfy_Tilemap_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 25
	ld	sp, hl
	call	gfy_Wait
	or	a, a
	sbc	hl, hl
	ld	iy, (ix + 6)
	ld	l, (iy + 7)
	push	hl
	pop	bc
	ld	(ix - 12), bc
	ld	hl, (ix + 9)
	call	__idivu
	push	hl
	pop	de
	ld	(ix - 22), de
	ld	iy, (ix + 6)
	ld	a, (iy + 6)
	ld	iy, 0
	lea	hl, iy
	ld	(ix - 6), a
	ld	l, a
	push	hl
	pop	bc
	ld	(ix - 16), bc
	ld	hl, (ix + 12)
	call	__idivu
	ld	(ix - 3), hl
	lea	bc, iy
	ld	iy, (ix + 6)
	ld	c, (iy + 13)
	ld	hl, (ix - 3)
	call	__imulu
	add	hl, de
	ld	(ix - 25), hl
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	a, (iy + 9)
	ld	de, 0
	ld	(ix - 13), a
	ld	e, a
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	hl, (iy + 15)
	ld	(ix - 19), hl
	ld	hl, (ix - 22)
	ld	bc, (ix - 12)
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix - 19)
	or	a, a
	sbc	hl, de
	ld	(ix - 12), hl
	ld	hl, (ix - 3)
	ld	h, l
	ld	de, (ix - 16)
	ld	l, e
	mlt	hl
	ld	de, (ix + 12)
	ld	a, e
	sub	a, l
	ld	l, a
	ld	iy, (ix + 6)
	ld	a, (iy + 14)
	sub	a, l
	ld	l, a
	ld	(ix - 3), hl
	ld	a, (iy + 11)
	dec	a
	cp	a, 7
	jr	nc, BB25_2
	ld	iy, _switch.table.gfy_Tilemap_NoClip
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	jr	BB25_3
BB25_2:
	ld	hl, gfy_Sprite_NoClip
BB25_3:
	ld	(ix - 16), hl
	ld	iy, (ix + 6)
	ld	e, (iy + 8)
	ld	a, e
	or	a, a
	ld	d, (ix - 13)
	jp	z, BB25_9
	xor	a, a
	ld	bc, (ix - 25)
BB25_5:
	ld	(ix - 13), a
	ld	a, d
	or	a, a
	ld	a, 0
	ld	d, a
	ld	hl, (ix - 12)
	jr	z, BB25_8
BB25_6:
	ld	(ix - 6), hl
	ld	(ix - 22), a
	ld	(ix - 19), bc
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 3)
	ld	(ix - 25), hl
	ld	iy, (iy)
	add	iy, bc
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 25)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 3)
	push	de
	ld	de, (ix - 6)
	push	de
	push	hl
	ld	hl, (ix - 16)
	call	__indcallhl
	ld	bc, (ix - 19)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 6)
	ld	a, (ix - 22)
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	add	hl, de
	inc	bc
	inc	a
	ld	d, (iy + 9)
	cp	a, d
	jr	c, BB25_6
	ld	iy, (ix + 6)
	ld	a, (iy + 6)
	ld	(ix - 6), a
	ld	e, (iy + 8)
BB25_8:
	ld	hl, (ix - 9)
	add	hl, bc
	ld	a, (ix - 6)
	ld	bc, (ix - 3)
	add	a, c
	ld	c, a
	ld	(ix - 3), bc
	ld	a, (ix - 13)
	inc	a
	cp	a, e
	push	hl
	pop	bc
	jp	c, BB25_5
BB25_9:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_TransparentTilemap
gfy_TransparentTilemap:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 49
	ld	sp, hl
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	ld	de, 0
	ld	e, (iy + 7)
	push	de
	pop	bc
	call	__idivu
	ld	(ix - 13), hl
	or	a, a
	sbc	hl, hl
	ld	iy, (ix + 6)
	ld	l, (iy + 6)
	push	hl
	pop	iy
	ld	hl, (ix + 12)
	lea	bc, iy
	call	__idivu
	ld	(ix - 16), hl
	ld	hl, (ix - 13)
	ld	(ix - 10), de
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix - 16)
	ld	(ix - 3), iy
	lea	bc, iy
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, bc
	ld	(ix - 19), hl
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 6), de
	jr	z, BB26_2
	ld	a, 0
	jr	BB26_3
BB26_2:
	ld	a, -1
BB26_3:
	ld	de, 0
	ld	iy, (ix + 6)
	ld	hl, (iy + 15)
	ld	bc, (ix - 10)
	ld	iy, (ix - 6)
	add	iy, bc
	bit	0, a
	push	de
	pop	bc
	jr	nz, BB26_5
	lea	bc, iy
BB26_5:
	or	a, a
	sbc	hl, bc
	ld	(ix - 23), hl
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	c, (iy + 14)
	ld	hl, (ix - 19)
	push	hl
	pop	iy
	ld	de, (ix - 3)
	add	iy, de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, 0
	jr	z, BB26_7
	lea	de, iy
BB26_7:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	(ix - 6), hl
	ld	iy, (ix + 6)
	ld	l, (iy + 9)
	ld	(ix - 7), l
	bit	0, a
	jr	nz, BB26_12
	ld	hl, (ix + 9)
	ld	de, (ix - 10)
	or	a, a
	sbc	hl, de
	jr	nc, BB26_10
	ld	hl, (ix - 23)
	add	hl, de
	ld	(ix - 23), hl
	or	a, a
	sbc	hl, hl
	jr	BB26_11
BB26_10:
	ld	a, (ix - 7)
	inc	a
	ld	(ix - 7), a
	ld	hl, (ix - 13)
	dec	hl
BB26_11:
	ld	(ix - 13), hl
BB26_12:
	ld	de, 0
	ld	bc, (ix - 3)
	ld	a, (iy + 8)
	ld	(ix - 20), a
	ld	hl, (ix - 19)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB26_17
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, bc
	jr	nc, BB26_15
	ld	hl, (ix - 6)
	add	hl, bc
	ld	(ix - 6), hl
	or	a, a
	sbc	hl, hl
	jr	BB26_16
BB26_15:
	ld	a, (ix - 20)
	inc	a
	ld	(ix - 20), a
	ld	hl, (ix - 16)
	dec	hl
BB26_16:
	ld	(ix - 16), hl
BB26_17:
	push	de
	pop	bc
	ld	c, (iy + 13)
	ex	de, hl
	ld	l, (iy + 12)
	call	__imulu
	push	hl
	pop	iy
	ld	de, 0
	ld	e, (ix - 7)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	(ix - 19), hl
	ld	hl, (gfy_ClipXMax)
	ld	de, (ix - 10)
	or	a, a
	sbc	hl, de
	ld	(ix - 26), hl
	ld	a, (gfy_ClipYMax)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, (ix - 3)
	sbc	hl, de
	ld	(ix - 10), hl
	ld	a, (ix - 20)
	or	a, a
	jr	nz, BB26_19
BB26_18:
	ld	sp, ix
	pop	ix
	ret
BB26_19:
	ld	hl, (ix - 16)
	call	__imulu
	ld	bc, (ix - 13)
	add	hl, bc
	xor	a, a
	ld	(ix - 13), a
	ld	(ix - 16), iy
BB26_20:
	ld	(ix - 3), hl
	ld	hl, (ix - 6)
	ld	bc, (ix - 10)
	or	a, a
	sbc	hl, bc
	jp	nc, BB26_39
	ld	a, (ix - 7)
	or	a, a
	jp	z, BB26_40
	ld	hl, (ix - 6)
	ld	bc, 255
	inc.s	hl
	dec	hl
	ld	h, b
	ld	(ix - 41), hl
	lea	hl, iy
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	push	bc
	pop	de
	jr	c, BB26_24
	lea	de, iy
BB26_24:
	xor	a, a
	ld	iy, (ix - 23)
BB26_25:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	z, BB26_18
	ld	(ix - 38), a
	ld	(ix - 35), de
	ld	(ix - 29), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix - 32), hl
	ld	iy, (iy)
	ld	(ix - 3), bc
	add	iy, bc
	ld	de, 0
	ex	de, hl
	ld	l, (iy)
	ld	iy, (ix - 29)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 32)
	add	hl, de
	ld	hl, (hl)
	ld	(ix - 32), hl
	lea	hl, iy
	ld	de, (ix - 26)
	or	a, a
	sbc	hl, de
	jp	nc, BB26_37
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 48), hl
	ld	iy, (ix - 32)
	ld	d, (iy + 1)
	ld	bc, 0
	ld	c, d
	ld	hl, 240
	or	a, a
	sbc	hl, bc
	ld	(ix - 44), hl
	ld	a, (iy)
	ld	(ix - 45), a
	or	a, a
	jp	z, BB26_38
	ld	bc, (ix - 41)
	ld	iy, (ix - 48)
	add	iy, bc
	ld	hl, (ix - 29)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	lea	bc, iy
	ld	a, d
	cp	a, 2
	ld	(ix - 48), d
	jr	nc, BB26_30
	ld	a, 1
	ld	(ix - 48), a
BB26_30:
	ld	iy, (ix - 32)
	lea	hl, iy + 2
	ld	(ix - 32), hl
	ld	h, d
	ld	e, 0
	push	bc
	pop	iy
	ld	(ix - 49), d
BB26_31:
	ld	a, h
	or	a, a
	ld	h, 0
	ld	c, (ix - 48)
	jr	z, BB26_36
BB26_32:
	ld	hl, (ix - 32)
	ld	d, (hl)
	ld	a, (gfy_Transparent_Color)
	ld	b, a
	ld	a, d
	cp	a, b
	jr	nz, BB26_34
	ld	d, (iy)
BB26_34:
	ld	(iy), d
	inc	hl
	ld	(ix - 32), hl
	inc	iy
	dec	c
	ld	a, c
	or	a, a
	ld	d, (ix - 49)
	jr	nz, BB26_32
	ld	h, d
BB26_36:
	ld	bc, (ix - 44)
	add	iy, bc
	inc	e
	ld	a, e
	ld	l, (ix - 45)
	cp	a, l
	jr	nz, BB26_31
	jr	BB26_38
BB26_37:
	ld	hl, (ix - 6)
	push	hl
	push	iy
	ld	hl, (ix - 32)
	push	hl
	call	gfy_TransparentSprite
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
BB26_38:
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	ld	iy, (ix - 29)
	add	iy, de
	ld	bc, (ix - 3)
	inc	bc
	ld	a, (ix - 38)
	inc	a
	ld	l, (ix - 7)
	cp	a, l
	ld	de, (ix - 35)
	jp	nz, BB26_25
	jr	BB26_41
BB26_39:
	ld	a, (ix - 7)
	or	a, a
	jr	nz, BB26_42
BB26_40:
	ld	bc, (ix - 3)
BB26_41:
	ld	hl, (ix - 19)
	add	hl, bc
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 6)
	ld	iy, (ix - 6)
	add	iy, de
	ld	(ix - 6), iy
	ld	iy, (ix - 16)
	ld	a, (ix - 13)
	inc	a
	ld	(ix - 13), a
	ld	c, (ix - 20)
	cp	a, c
	jp	nz, BB26_20
	jp	BB26_18
BB26_42:
	lea	hl, iy
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	push	bc
	pop	de
	jr	c, BB26_44
	lea	de, iy
BB26_44:
	push	af
	ld	a, (ix - 7)
	ld	iyl, a
	pop	af
	ld	hl, (ix - 23)
	ld	(ix - 29), hl
BB26_45:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	z, BB26_18
	push	af
	ld	a, iyl
	ld	(ix - 35), a
	pop	af
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix - 38), hl
	ld	hl, (ix + 6)
	ld	iy, (hl)
	add	iy, bc
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	ld	(ix - 3), bc
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	ld	(ix - 32), de
	push	hl
	pop	de
	ld	hl, (ix - 38)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 6)
	push	de
	ld	de, (ix - 29)
	push	de
	push	hl
	call	gfy_TransparentSprite
	ld	bc, (ix - 3)
	ld	iy, (ix + 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	e, (iy + 7)
	push	af
	ld	a, (ix - 35)
	ld	iyl, a
	pop	af
	ld	hl, (ix - 29)
	add	hl, de
	ld	(ix - 29), hl
	ld	de, (ix - 32)
	inc	bc
	dec	iyl
	ld	a, iyl
	or	a, a
	jr	nz, BB26_45
	jp	BB26_41
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_TransparentSprite_NoClip
gfy_TransparentSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 9
	ld	sp, hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 6), hl
	ld	iy, (ix + 6)
	ld	e, (iy + 1)
	ld	bc, 0
	ld	c, e
	ld	hl, 240
	or	a, a
	sbc	hl, bc
	ld	(ix - 9), hl
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	a, l
	or	a, a
	jr	z, BB27_8
	ld	a, l
	ld	hl, (ix + 9)
	ld	bc, 0
	ld	c, (ix + 12)
	ld	iy, (ix - 6)
	add	iy, bc
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	h, a
	ld	l, 0
	add	iy, bc
	ld	(ix - 6), iy
	ld	iy, (ix + 6)
	lea	bc, iy + 2
	ld	(ix - 3), bc
	ld	iy, (ix - 6)
	ld	b, l
BB27_2:
	ld	a, e
	or	a, a
	ld	e, l
	ld	c, l
	jr	z, BB27_7
BB27_3:
	ld	hl, (ix - 3)
	ld	e, (hl)
	ld	a, (gfy_Transparent_Color)
	ld	h, a
	ld	a, e
	cp	a, h
	jr	nz, BB27_5
	ld	e, (iy)
BB27_5:
	ld	(iy), e
	ld	hl, (ix - 3)
	inc	hl
	ld	(ix - 3), hl
	inc	iy
	inc	c
	lea	hl, iy
	ld	iy, (ix + 6)
	ld	e, (iy + 1)
	push	hl
	pop	iy
	ld	a, c
	cp	a, e
	jr	c, BB27_3
	ld	hl, (ix + 6)
	ld	h, (hl)
	ld	l, 0
BB27_7:
	ld	a, e
	ld	de, (ix - 9)
	add	iy, de
	ld	e, a
	inc	b
	ld	a, b
	cp	a, h
	jr	c, BB27_2
BB27_8:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_TransparentSprite
gfy_TransparentSprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 34
	ld	sp, hl
	ld	hl, (ix + 9)
	ld	iy, (gfy_ClipXMax)
	ld	de, -8388608
	add	iy, de
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB28_25
	ld	hl, (ix + 12)
	ld	a, (gfy_ClipYMax)
	ld	de, 0
	lea	bc, iy
	push	de
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	add	hl, de
	ld	(ix - 3), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB28_25
	ld	hl, (ix + 6)
	ld	e, (hl)
	ld	a, e
	or	a, a
	jp	z, BB28_25
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	(ix - 4), a
	or	a, a
	jp	z, BB28_25
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	a, e
	ld	de, (ix + 9)
	add	hl, de
	ld	(ix - 7), bc
	ld	iy, (gfy_ClipXMin)
	ld	de, -8388608
	add	iy, de
	ld	(ix - 19), hl
	add	hl, de
	ld	(ix - 16), a
	ld	(ix - 10), hl
	ld	(ix - 13), iy
	lea	de, iy
	ld	iy, (ix - 7)
	or	a, a
	sbc	hl, de
	jp	c, BB28_25
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	l, (ix - 4)
	ld	(ix - 28), hl
	ld	de, (ix + 12)
	add	hl, de
	ld	a, (gfy_ClipYMin)
	push	bc
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	ld	(ix - 31), hl
	add	hl, de
	ld	(ix - 22), hl
	ld	(ix - 25), iy
	lea	de, iy
	ld	iy, (ix - 7)
	or	a, a
	sbc	hl, de
	jp	c, BB28_25
	ld	hl, (ix + 9)
	ld	bc, -8388608
	add	hl, bc
	ld	de, (ix - 13)
	or	a, a
	sbc	hl, de
	push	bc
	pop	de
	jr	c, BB28_10
	ld	hl, (ix + 12)
	add	hl, de
	ld	de, (ix - 25)
	or	a, a
	sbc	hl, de
	jr	c, BB28_10
	lea	hl, iy
	ld	de, (ix - 10)
	or	a, a
	sbc	hl, de
	jr	c, BB28_10
	ld	hl, (ix - 3)
	ld	de, (ix - 22)
	or	a, a
	sbc	hl, de
	jp	nc, BB28_26
BB28_10:
	call	gfy_Wait
	ld	bc, 0
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 25), hl
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, de
	ld	(ix - 34), hl
	ld	a, (gfy_ClipYMin)
	push	bc
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix + 12)
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	hl, 0
	jr	nc, BB28_12
	ld	hl, (ix + 12)
	sub	a, l
	or	a, a
	sbc	hl, hl
	ld	l, a
BB28_12:
	ld	(ix - 13), hl
	ld	iy, (gfy_ClipXMax)
	ld	hl, (ix - 19)
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 7), hl
	ld	de, -8388608
	add	iy, de
	lea	hl, iy
	ld	de, (ix - 10)
	or	a, a
	sbc	hl, de
	jr	c, BB28_14
	or	a, a
	sbc	hl, hl
	ld	(ix - 7), hl
BB28_14:
	ld	a, (gfy_ClipYMax)
	ld	e, a
	push	bc
	pop	hl
	ld	l, e
	ld	bc, -8388608
	add	hl, bc
	ld	bc, (ix - 22)
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	jr	nc, BB28_16
	ld	hl, (ix - 31)
	ld	a, l
	sub	a, e
	or	a, a
	sbc	hl, hl
	ld	l, a
BB28_16:
	ld	(ix - 3), hl
	ld	hl, (ix - 34)
	ld	bc, 255
	inc.s	hl
	dec	hl
	ld	h, b
	ld	(ix - 10), hl
	ld	hl, -8388608
	ex	de, hl
	ld	iy, (ix - 25)
	add	iy, de
	ld	hl, (ix + 9)
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB28_18
	or	a, a
	sbc	hl, hl
	ld	(ix - 10), hl
BB28_18:
	ld	hl, (ix - 7)
	ld	a, l
	ld	hl, (ix - 10)
	add	a, l
	ld	c, a
	ld	b, (ix - 16)
	ld	a, b
	sub	a, c
	ld	(ix - 19), a
	ld	iy, (ix - 3)
	ld	de, (ix - 13)
	add	iy, de
	ld	a, (ix - 4)
	sub	a, iyl
	ld	de, 0
	ld	e, a
	ld	hl, (-1900524)
	ld	(ix - 7), hl
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 22), hl
	ld	a, b
	cp	a, c
	lea	hl, iy
	jp	z, BB28_25
	ld	(ix - 3), hl
	ld	hl, (ix - 13)
	ld	bc, (ix + 12)
	add	hl, bc
	ld	(ix - 16), de
	push	hl
	pop	bc
	ld	iy, (ix - 7)
	add	iy, bc
	ld	hl, (ix - 10)
	ld	de, (ix + 9)
	add	hl, de
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 7), iy
	ld	iy, (ix + 6)
	ld	de, (ix - 13)
	add	iy, de
	ld	hl, (ix - 10)
	ld	bc, (ix - 28)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	lea	iy, iy + 2
	ld	hl, (ix - 3)
	ld	bc, 255
	inc.s	hl
	dec	hl
	ld	h, b
	ld	d, b
	ld	a, d
	ld	(ix - 13), hl
	ld	hl, (ix - 3)
BB28_20:
	ld	(ix - 10), a
	ld	bc, (ix - 7)
	ld	a, (ix - 4)
	cp	a, l
	ld	hl, (ix - 16)
	ld	e, l
	jr	z, BB28_24
BB28_21:
	ld	d, (iy)
	ld	a, (gfy_Transparent_Color)
	ld	h, a
	ld	a, d
	cp	a, h
	jr	nz, BB28_23
	push	bc
	pop	hl
	ld	d, (hl)
BB28_23:
	push	bc
	pop	hl
	ld	(hl), d
	inc	iy
	inc	hl
	push	hl
	pop	bc
	dec	e
	ld	a, e
	or	a, a
	jr	nz, BB28_21
BB28_24:
	ld	de, (ix - 13)
	add	iy, de
	push	bc
	pop	hl
	ld	bc, (ix - 22)
	add	hl, bc
	ld	(ix - 7), hl
	ld	a, (ix - 10)
	inc	a
	ld	l, (ix - 19)
	cp	a, l
	ld	hl, (ix - 3)
	jr	nz, BB28_20
BB28_25:
	ld	sp, ix
	pop	ix
	ret
BB28_26:
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	gfy_TransparentSprite_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	jr	BB28_25
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_TransparentTilemap_NoClip
gfy_TransparentTilemap_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 29
	ld	sp, hl
	ld	iy, (ix + 6)
	ld	de, 0
	push	de
	pop	bc
	ld	c, (iy + 7)
	push	de
	pop	hl
	ld	l, (iy + 13)
	ld	a, (iy + 9)
	ld	(ix - 6), a
	ld	e, a
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, de
	ld	(ix - 13), hl
	ld	iy, (iy + 15)
	ld	hl, (ix + 9)
	call	__idivu
	ld	(ix - 10), hl
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	lea	hl, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 23), hl
	ld	iy, (ix + 6)
	ld	e, (iy + 8)
	ld	a, e
	or	a, a
	jp	z, BB29_18
	ld	bc, (ix + 12)
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	a, (iy + 14)
	ld	(ix - 16), a
	ld	a, (iy + 6)
	ld	(ix - 7), a
	ld	iyl, e
	ld	de, 0
	ld	e, a
	push	bc
	pop	hl
	push	de
	pop	bc
	call	__idivu
	ld	b, l
	ld	c, e
	ld	e, iyl
	mlt	bc
	ld	iy, (ix + 12)
	ld	a, iyl
	sub	a, c
	ld	c, a
	ld	a, (ix - 16)
	sub	a, c
	ld	iyl, a
	ld	bc, (ix - 3)
	call	__imulu
	ld	bc, (ix - 10)
	add	hl, bc
	ld	b, e
	ld	c, d
BB29_2:
	ld	a, (ix - 6)
	or	a, a
	jr	nz, BB29_4
	xor	a, a
	ld	(ix - 6), a
	ld	(ix - 3), hl
	jp	BB29_17
BB29_4:
	ld	(ix - 26), c
	ld	bc, 0
	push	bc
	pop	de
	push	af
	ld	a, iyl
	ld	(ix - 25), a
	pop	af
	ld	e, iyl
	ld	(ix - 29), de
	xor	a, a
	ld	(ix - 7), a
	ld	de, (ix - 23)
	ld	(ix - 6), de
	ex	de, hl
	ld	iy, (ix + 6)
BB29_5:
	ld	hl, (iy + 3)
	ld	(ix - 10), hl
	ld	iy, (iy)
	ld	(ix - 3), de
	add	iy, de
	push	bc
	pop	hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 10)
	add	hl, de
	ld	hl, (hl)
	ld	(ix - 10), hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 20), hl
	ld	iy, (ix - 10)
	ld	d, (iy + 1)
	ld	bc, 0
	ld	c, d
	ld	hl, 240
	or	a, a
	sbc	hl, bc
	ld	(ix - 16), hl
	ld	a, (iy)
	ld	(ix - 17), a
	or	a, a
	jr	z, BB29_15
	ld	bc, (ix - 29)
	ld	iy, (ix - 20)
	add	iy, bc
	ld	hl, (ix - 6)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	lea	bc, iy
	ld	a, d
	cp	a, 2
	ld	(ix - 20), d
	jr	nc, BB29_8
	ld	a, 1
	ld	(ix - 20), a
BB29_8:
	ld	iy, (ix - 10)
	lea	hl, iy + 2
	ld	(ix - 10), hl
	ld	h, d
	ld	e, 0
	push	bc
	pop	iy
	ld	(ix - 24), d
BB29_9:
	ld	a, h
	or	a, a
	ld	h, 0
	ld	c, (ix - 20)
	jr	z, BB29_14
BB29_10:
	ld	hl, (ix - 10)
	ld	d, (hl)
	ld	a, (gfy_Transparent_Color)
	ld	b, a
	ld	a, d
	cp	a, b
	jr	nz, BB29_12
	ld	d, (iy)
BB29_12:
	ld	(iy), d
	inc	hl
	ld	(ix - 10), hl
	inc	iy
	dec	c
	ld	a, c
	or	a, a
	ld	d, (ix - 24)
	jr	nz, BB29_10
	ld	h, d
BB29_14:
	ld	bc, (ix - 16)
	add	iy, bc
	inc	e
	ld	a, e
	ld	l, (ix - 17)
	cp	a, l
	jr	nz, BB29_9
BB29_15:
	ld	bc, 0
	push	bc
	pop	de
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	ld	hl, (ix - 6)
	add	hl, de
	ld	(ix - 6), hl
	ld	de, (ix - 3)
	inc	de
	ld	a, (ix - 7)
	inc	a
	ld	l, (iy + 9)
	ld	(ix - 7), a
	cp	a, l
	jp	c, BB29_5
	ld	(ix - 6), l
	ld	a, (iy + 6)
	ld	(ix - 7), a
	ld	(ix - 3), de
	ld	b, (iy + 8)
	push	af
	ld	a, (ix - 25)
	ld	iyl, a
	pop	af
	ld	c, (ix - 26)
BB29_17:
	ld	hl, (ix - 13)
	ld	de, (ix - 3)
	add	hl, de
	ld	a, (ix - 7)
	add	a, iyl
	ld	iyl, a
	inc	c
	ld	a, c
	cp	a, b
	jp	c, BB29_2
BB29_18:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_GetSprite
gfy_GetSprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 7
	ld	sp, hl
	ld	hl, (ix + 6)
	xor	a, a
	ld	(ix - 4), a
	ld	bc, (-1900524)
	ld	a, (hl)
	or	a, a
	jr	z, BB30_3
	ld	hl, (ix + 12)
	
	push	bc
	pop	iy
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 9)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	lea	hl, iy + 2
	ld	de, 0
	ld	e, (iy + 1)
BB30_2:
	push	de
	ld	de, (ix - 3)
	push	de
	ld	(ix - 7), hl
	push	hl
	call	_memcpy
	ld	iy, (ix + 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	ld	de, 0
	ld	e, (iy + 1)
	ld	hl, (ix - 7)
	add	hl, de
	ld	a, (ix - 4)
	inc	a
	ld	c, (iy)
	ld	(ix - 4), a
	cp	a, c
	jr	c, BB30_2
BB30_3:
	ld	hl, (ix + 6)
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ScaledSprite_NoClip
gfy_ScaledSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 25
	ld	sp, hl
	ld	l, (ix + 15)
	ld	iy, 0
	ld	a, l
	or	a, a
	jp	z, BB31_17
	ld	c, (ix + 18)
	ld	a, c
	or	a, a
	jp	z, BB31_17
	lea	de, iy
	ld	e, l
	ld	(ix - 6), de
	lea	hl, iy
	ld	l, c
	ld	(ix - 9), hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	hl, (ix + 9)
	call	__set_bc_and_mul_hl_by_240
	ld	(ix - 19), hl
	ld	hl, (ix - 6)
	call	__imulu
	ld	(ix - 6), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	or	a, a
	sbc	hl, hl
	ld	(ix - 15), a
	ld	l, a
	ld	bc, (ix - 9)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	ld	iy, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), hl
	ld	l, (iy)
	ld	a, l
	or	a, a
	jr	nz, BB31_5
	ld	a, (ix + 15)
	cp	a, 1
	jp	z, BB31_17
	ld	hl, (-1900524)
	jp	BB31_17
BB31_5:
	ld	de, 0
	ld	e, (ix + 12)
	ld	(ix - 25), de
	ld	iy, (ix - 3)
	add	iy, de
	ld	de, (ix - 19)
	add	iy, de
	lea	bc, iy
	ld	iy, (ix + 6)
	lea	de, iy + 2
	ld	(ix - 6), de
	ld	a, (ix + 18)
	dec	a
	ld	iy, 0
	ld	iyl, a
	ld	(ix - 22), iy
	push	af
	ld	a, (ix - 15)
	ld	iyl, a
	pop	af
	ld	iyh, iyl
	ld	d, 0
	ld	a, d
BB31_6:
	ld	(ix - 15), a
	ld	a, iyl
	or	a, a
	ld	iyl, d
	ld	a, d
	jr	z, BB31_9
BB31_7:
	ld	(ix - 16), a
	ld	hl, (ix - 6)
	ld	a, (hl)
	ld	hl, (ix - 9)
	push	hl
	ld	l, a
	push	hl
	ld	(ix - 3), bc
	push	bc
	call	_memset
	ld	a, (ix - 16)
	ld	iy, (ix + 6)
	ld	d, 0
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	bc, (ix - 22)
	ld	hl, (ix - 3)
	add	hl, bc
	inc	hl
	push	hl
	pop	bc
	inc	a
	ld	l, (iy + 1)
	ex	de, hl
	ld	iyh, e
	ex	de, hl
	cp	a, l
	jr	c, BB31_7
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	iyl, iyh
BB31_9:
	ld	e, l
	push	bc
	pop	hl
	ld	bc, (ix - 12)
	add	hl, bc
	push	hl
	pop	bc
	ld	l, e
	ld	a, (ix - 15)
	inc	a
	cp	a, l
	jr	c, BB31_6
	ld	a, (ix + 15)
	cp	a, 1
	jp	z, BB31_17
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, iyh
	ex	de, hl
	ld	bc, (ix - 9)
	call	__imulu
	ld	bc, (ix - 25)
	ld	(ix - 9), hl
	ld	a, e
	ld	e, (ix + 15)
	ld	iyl, a
	or	a, a
	jr	z, BB31_17
	ld	hl, (ix - 3)
	add	hl, bc
	ld	bc, (ix - 19)
	add	hl, bc
	ld	a, e
	dec	a
	ld	(ix - 16), a
	push	hl
	pop	bc
BB31_13:
	ld	(ix - 3), bc
	ld	bc, 240
	add	hl, bc
	ld	a, e
	cp	a, 2
	ld	a, (ix - 16)
	ld	(ix - 6), a
	push	hl
	pop	bc
	jr	c, BB31_16
BB31_14:
	ld	(ix - 12), d
	ld	hl, (ix - 9)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 15), bc
	push	bc
	call	_memcpy
	ld	iy, (ix + 6)
	ld	d, (ix - 12)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	e, (ix + 15)
	ld	bc, 240
	ld	hl, (ix - 15)
	add	hl, bc
	push	hl
	pop	bc
	ld	a, (ix - 6)
	dec	a
	ld	(ix - 6), a
	or	a, a
	jr	nz, BB31_14
	ld	a, (iy)
	ld	iyl, a
BB31_16:
	inc	d
	ld	a, d
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	cp	a, l
	push	bc
	pop	hl
	jr	c, BB31_13
BB31_17:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ScaledTransparentSprite_NoClip
gfy_ScaledTransparentSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 19
	ld	sp, hl
	ld	a, (ix + 15)
	or	a, a
	jp	z, BB32_13
	ld	e, (ix + 18)
	ld	a, e
	or	a, a
	jp	z, BB32_13
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	(ix - 7), hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	or	a, a
	sbc	hl, hl
	ld	(ix - 4), a
	ld	l, a
	ld	bc, (ix - 7)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, 240
	push	hl
	pop	de
	or	a, a
	sbc	hl, bc
	ld	c, (ix + 18)
	ld	(ix - 14), hl
	ld	hl, (ix + 6)
	ld	a, (hl)
	or	a, a
	jp	z, BB32_13
	ld	hl, (ix + 9)
	ld	a, c
	ld	bc, 0
	ld	c, (ix + 12)
	ld	iy, (ix - 3)
	add	iy, bc
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	lea	iy, iy + 2
	dec	a
	or	a, a
	sbc	hl, hl
	ld	l, a
	inc	hl
	ld	(ix - 19), hl
	xor	a, a
BB32_4:
	ld	(ix - 15), a
	ld	l, (ix - 4)
	ld	c, 0
BB32_5:
	ld	a, l
	or	a, a
	ld	(ix - 8), c
	jr	nz, BB32_7
	xor	a, a
	ld	l, a
	jr	BB32_11
BB32_7:
	ld	a, (gfy_Transparent_Color)
	ld	d, a
	ld	e, 0
BB32_8:
	ld	a, (iy)
	cp	a, d
	ld	bc, (ix - 7)
	lea	hl, iy
	jr	z, BB32_10
	ld	(ix - 11), hl
	ld	hl, (ix - 7)
	push	hl
	ld	l, a
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 16), e
	call	_memset
	ld	e, (ix - 16)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 11)
	ld	a, (gfy_Transparent_Color)
	ld	d, a
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	(ix - 4), a
	ld	bc, (ix - 19)
BB32_10:
	inc	hl
	push	hl
	pop	iy
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	inc	e
	ld	a, e
	ld	l, (ix - 4)
	cp	a, l
	jr	c, BB32_8
BB32_11:
	ld	(ix - 11), l
	ld	bc, 0
	ld	c, l
	ld	hl, (ix - 3)
	ld	de, (ix - 14)
	add	hl, de
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	sbc	hl, bc
	push	hl
	pop	bc
	add	iy, bc
	ld	c, (ix - 8)
	inc	c
	ld	a, c
	ld	l, (ix + 15)
	cp	a, l
	ld	l, (ix - 11)
	jp	nz, BB32_5
	ld	bc, 0
	ld	c, (ix - 4)
	add	iy, bc
	ld	a, (ix - 15)
	inc	a
	ld	hl, (ix + 6)
	ld	l, (hl)
	cp	a, l
	jp	c, BB32_4
BB32_13:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_RLETSprite
gfy_RLETSprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 27
	ld	sp, hl
	ld	hl, (ix + 9)
	ld	iy, (gfy_ClipXMax)
	ld	de, -8388608
	add	iy, de
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB33_40
	ld	a, (gfy_ClipYMax)
	or	a, a
	sbc	hl, hl
	lea	bc, iy
	push	hl
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix + 12)
	add	hl, de
	ld	(ix - 3), hl
	ld	(ix - 6), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB33_40
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	a, l
	or	a, a
	jp	z, BB33_40
	ld	iy, (ix + 6)
	ld	e, (iy + 1)
	ld	a, e
	or	a, a
	jp	z, BB33_40
	ld	(ix - 9), e
	ld	a, l
	ld	(ix - 12), bc
	ld	iy, (gfy_ClipXMin)
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 9)
	ld	de, -8388608
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB33_8
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	l, a
	ld	(ix - 15), hl
	push	bc
	pop	hl
	ld	l, (ix - 9)
	ld	(ix - 9), hl
	ld	a, (gfy_ClipYMin)
	ld	c, a
	ld	(ix - 18), bc
	ld	de, (ix + 9)
	ld	hl, (ix - 15)
	add	hl, de
	push	hl
	pop	bc
	ld	de, (ix + 12)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, -8388608
	ld	hl, (ix - 18)
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, de
	jr	c, BB33_8
	ld	de, -8388608
	push	bc
	pop	iy
	add	iy, de
	ld	hl, (ix - 12)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	c, BB33_8
	ld	de, -8388608
	ld	iy, (ix - 9)
	add	iy, de
	ld	hl, (ix - 6)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB33_41
BB33_8:
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	de, 0
	ld	(ix - 6), a
	ld	e, a
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 18), hl
	ld	a, (iy)
	ld	(ix - 12), a
	or	a, a
	ld	hl, (ix + 9)
	jp	z, BB33_40
	call	__set_bc_and_mul_hl_by_240
	ld	bc, (ix + 9)
	ld	de, (ix + 12)
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	lea	hl, iy + 2
	ld	(ix - 21), hl
	ld	a, (ix - 6)
	ld	iy, 0
BB33_10:
	ld	(ix - 15), iy
	add	iy, bc
	ld	bc, (gfy_ClipXMin)
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 9), hl
	ld	de, -8388608
	push	bc
	pop	hl
	add	hl, de
	push	hl
	pop	bc
	add	iy, de
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB33_14
	ld	hl, (ix - 9)
	add	hl, de
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB33_14
	ld	e, a
	or	a, a
	jr	nz, BB33_20
	xor	a, a
	sbc	hl, hl
	ld	iy, (ix - 3)
	jp	BB33_38
BB33_14:
	ld	hl, (ix - 9)
	add	hl, de
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB33_40
	ld	e, a
	or	a, a
	sbc	hl, hl
	or	a, a
	jr	nz, BB33_17
	ld	a, e
	jp	BB33_34
BB33_17:
	push	hl
	pop	bc
	ld	c, e
	ld	(ix - 9), bc
	ld	iy, 0
	ld	a, e
BB33_18:
	push	hl
	pop	bc
	ld	hl, (ix - 21)
	push	hl
	pop	de
	ld	c, (hl)
	add	iy, bc
	lea	hl, iy
	ld	bc, (ix - 9)
	or	a, a
	sbc	hl, bc
	jp	nc, BB33_33
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 27), bc
	ex	de, hl
	ld	de, (ix - 27)
	ld	(ix - 24), iy
	push	hl
	pop	iy
	ld	e, (iy + 1)
	add	hl, de
	push	hl
	pop	iy
	lea	iy, iy + 2
	ld	(ix - 21), iy
	ld	iy, (ix - 24)
	add	iy, de
	lea	hl, iy
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	push	bc
	pop	hl
	jr	c, BB33_18
	jp	BB33_34
BB33_20:
	ld	hl, (ix - 21)
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	iy, (ix - 3)
	add	iy, bc
	cp	a, e
	jp	nc, BB33_35
	ld	(ix - 12), bc
	ld	hl, (ix - 21)
	ld	(ix - 9), hl
	ld	e, (ix - 6)
BB33_22:
	ld	(ix - 3), iy
	ld	bc, (ix - 9)
	push	bc
	pop	iy
	lea	hl, iy + 2
	ld	c, (iy + 1)
	ld	a, c
	or	a, a
	jr	nz, BB33_24
	ld	(ix - 9), hl
	or	a, a
	sbc	hl, hl
	ld	a, e
	ld	iy, (ix - 3)
	jr	BB33_31
BB33_24:
	ld	a, (gfy_ClipYMin)
	ld	(ix - 21), a
	ld	(ix - 9), hl
	ld	hl, (ix - 12)
	ld	(ix - 6), hl
	ld	iy, (ix - 3)
BB33_25:
	ld	(ix - 12), c
	ld	hl, (ix + 12)
	ld	de, (ix - 6)
	add	hl, de
	ld	(ix - 3), hl
	ld	bc, 0
	ld	c, (ix - 21)
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	nc, BB33_27
	ld	c, (ix - 12)
	jr	BB33_29
BB33_27:
	ld	a, (gfy_ClipYMax)
	ld	bc, 0
	ld	c, a
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	ld	c, (ix - 12)
	jr	nc, BB33_29
	ld	hl, (ix - 9)
	ld	a, (hl)
	ld	(iy), a
	ld	a, (gfy_ClipYMin)
	ld	(ix - 21), a
BB33_29:
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 9), hl
	inc	de
	ld	(ix - 6), de
	inc	iy
	dec	c
	ld	a, c
	or	a, a
	ld	hl, 0
	jr	nz, BB33_25
	lea	de, iy
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	push	de
	pop	iy
	ld	de, (ix - 6)
	ld	(ix - 12), de
BB33_31:
	push	hl
	pop	bc
	ld	c, a
	ex	de, hl
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, bc
	jr	nc, BB33_36
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 21), hl
	ld	(ix - 3), de
	ld	de, (ix - 3)
	ld	hl, (ix - 9)
	ld	e, (hl)
	ld	(ix - 3), de
	ld	hl, (ix - 12)
	ld	de, (ix - 3)
	add	hl, de
	ld	de, (ix - 3)
	add	iy, de
	ld	(ix - 12), hl
	or	a, a
	sbc	hl, bc
	ld	c, a
	ld	hl, 0
	ld	e, a
	jr	nc, BB33_37
	jp	BB33_22
BB33_33:
	inc	de
	ld	(ix - 21), de
	or	a, a
	sbc	hl, hl
BB33_34:
	ld	bc, 240
	ex	de, hl
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	ex	de, hl
	jr	BB33_39
BB33_35:
	ld	c, e
	ld	de, (ix - 21)
	inc	de
	ld	(ix - 21), de
	ld	e, (ix - 6)
	jr	BB33_37
BB33_36:
	ld	c, a
	ld	hl, (ix - 9)
	ld	(ix - 21), hl
	ex	de, hl
	ld	e, a
BB33_37:
	ld	(ix - 6), e
	ex	de, hl
	ld	hl, (ix + 6)
	ld	a, (hl)
	ex	de, hl
	ld	(ix - 12), a
	ld	a, c
BB33_38:
	ld	bc, (ix - 18)
	add	iy, bc
	ld	(ix - 3), iy
BB33_39:
	ld	iy, (ix - 15)
	inc	iy
	push	hl
	pop	bc
	ld	c, (ix - 12)
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ld	bc, (ix + 9)
	jp	c, BB33_10
BB33_40:
	ld	sp, ix
	pop	ix
	ret
BB33_41:
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	de, 0
	ld	(ix - 12), a
	ld	e, a
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	a, (iy)
	ld	(ix - 9), a
	or	a, a
	ld	hl, (ix + 9)
	jr	z, BB33_40
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	ld	hl, (ix + 12)
	ld	bc, 255
	inc.s	hl
	dec	hl
	ld	h, b
	add	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	ld	c, 0
	ld	a, c
	ld	iy, (ix + 6)
	lea	bc, iy + 2
	ld	iyl, a
	ld	(ix - 6), bc
	ld	d, (ix - 12)
	ld	e, iyl
BB33_43:
	ld	a, d
	or	a, a
	jr	nz, BB33_45
	ld	d, iyl
	jp	BB33_58
BB33_45:
	ld	iy, (ix - 6)
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	cp	a, d
	jp	nc, BB33_56
	ld	(ix - 21), e
	ld	(ix - 9), bc
	ld	(ix - 6), iy
BB33_47:
	ld	iy, (ix - 6)
	lea	hl, iy + 2
	ld	(ix - 18), hl
	ld	d, (iy + 1)
	ld	bc, 0
	ld	c, d
	ld	hl, (ix - 9)
	add	hl, bc
	ld	(ix - 9), hl
	ld	a, d
	or	a, a
	jr	nz, BB33_49
	ld	hl, (ix - 18)
	ld	(ix - 6), hl
	ld	d, (ix - 12)
	ld	e, (ix - 21)
	jr	BB33_52
BB33_49:
	ld	e, (ix - 21)
	ld	hl, (ix - 18)
BB33_50:
	ld	a, (hl)
	inc	hl
	ld	iy, (ix - 3)
	ld	(iy), a
	inc	iy
	ld	(ix - 3), iy
	dec	d
	ld	a, d
	or	a, a
	jr	nz, BB33_50
	ld	(ix - 6), hl
	ld	iy, (ix + 6)
	ld	d, (iy + 1)
BB33_52:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, d
	ld	iy, (ix - 9)
	lea	hl, iy
	sbc	hl, bc
	ld	(ix - 12), d
	jr	nc, BB33_55
	or	a, a
	sbc	hl, hl
	ld	(ix - 18), hl
	ld	hl, (ix - 18)
	ld	iy, (ix - 6)
	ld	l, (iy)
	ld	(ix - 18), hl
	ld	de, (ix - 18)
	ld	hl, (ix - 9)
	add	hl, de
	push	hl
	pop	iy
	ld	hl, (ix - 3)
	ld	de, (ix - 18)
	add	hl, de
	ld	(ix - 3), hl
	lea	hl, iy
	ld	(ix - 9), hl
	or	a, a
	sbc	hl, bc
	jp	c, BB33_47
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	d, (ix - 12)
	ld	e, (ix - 21)
BB33_55:
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	(ix - 9), l
	jr	BB33_57
BB33_56:
	inc	iy
	ld	(ix - 6), iy
BB33_57:
	ld	c, 0
	ld	iyl, c
BB33_58:
	ld	bc, (ix - 15)
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	inc	e
	ld	a, e
	ld	l, (ix - 9)
	cp	a, l
	jp	c, BB33_43
	jp	BB33_40
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_RLETSprite_NoClip
gfy_RLETSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 20
	ld	sp, hl
	call	gfy_Wait
	ld	bc, (-1900524)
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	de, 0
	ld	(ix - 7), a
	ld	e, a
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 6), hl
	ld	hl, (ix + 6)
	ld	d, (hl)
	ld	a, d
	or	a, a
	jp	z, BB34_17
	push	bc
	pop	iy
	ld	hl, (ix + 9)
	ld	a, (ix + 12)
	call	__set_bc_and_mul_hl_by_240
	ld	bc, 0
	ld	c, a
	add	hl, bc
	push	hl
	pop	bc
	lea	hl, iy
	add	hl, bc
	ld	iy, (ix + 6)
	lea	bc, iy + 2
	ld	(ix - 13), bc
	push	af
	ld	a, (ix - 7)
	ld	iyl, a
	pop	af
	ld	e, 0
BB34_2:
	ld	a, iyl
	or	a, a
	jr	nz, BB34_4
	ld	iyl, 0
	jp	BB34_16
BB34_4:
	ld	d, iyl
	ld	iy, (ix - 13)
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	add	hl, bc
	ld	(ix - 3), hl
	ld	(ix - 16), d
	cp	a, d
	jp	nc, BB34_13
	ld	(ix - 10), bc
BB34_6:
	lea	hl, iy + 2
	ld	(ix - 13), hl
	ld	d, (iy + 1)
	ld	bc, 0
	ld	c, d
	ld	iy, (ix - 10)
	add	iy, bc
	ld	(ix - 10), iy
	ld	a, d
	or	a, a
	jr	nz, BB34_8
	ld	hl, (ix - 13)
	ld	(ix - 19), hl
	ld	a, (ix - 7)
	jr	BB34_11
BB34_8:
	ld	hl, (ix - 13)
BB34_9:
	ld	a, (hl)
	inc	hl
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	ld	(iy), a
	inc	bc
	ld	(ix - 3), bc
	dec	d
	ld	a, d
	or	a, a
	jr	nz, BB34_9
	ld	(ix - 19), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
BB34_11:
	ld	iy, 0
	lea	bc, iy
	ld	c, a
	ld	hl, (ix - 10)
	or	a, a
	sbc	hl, bc
	ld	(ix - 7), a
	jr	nc, BB34_14
	ld	hl, (ix - 19)
	inc	hl
	ld	(ix - 13), hl
	ld	(ix - 16), iy
	ld	iy, (ix - 19)
	ld	hl, (ix - 16)
	ld	l, (iy)
	ld	(ix - 16), hl
	ld	(ix - 20), e
	ld	de, (ix - 16)
	ld	hl, (ix - 10)
	add	hl, de
	ld	(ix - 10), hl
	ld	hl, (ix - 3)
	ld	de, (ix - 16)
	add	hl, de
	ld	e, (ix - 20)
	ld	(ix - 3), hl
	ld	hl, (ix - 10)
	or	a, a
	sbc	hl, bc
	ld	(ix - 16), a
	jr	nc, BB34_15
	jp	BB34_6
BB34_13:
	inc	iy
	ld	(ix - 13), iy
	jr	BB34_15
BB34_14:
	ld	(ix - 16), a
	ld	hl, (ix - 19)
	ld	(ix - 13), hl
BB34_15:
	ld	hl, (ix + 6)
	ld	d, (hl)
	ld	hl, (ix - 3)
	push	af
	ld	a, (ix - 16)
	ld	iyl, a
	pop	af
BB34_16:
	ld	bc, (ix - 6)
	add	hl, bc
	inc	e
	ld	a, e
	cp	a, d
	jp	c, BB34_2
BB34_17:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_CopyRectangle
gfy_CopyRectangle:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 21
	ld	sp, hl
	sbc	hl, hl
	ld	(ix - 3), hl
	call	gfy_Wait
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, -1900528
	push	hl
	pop	de
	jr	z, BB35_2
	ld	hl, -1900524
BB35_2:
	ld	a, (ix + 21)
	ld	bc, 240
	ld	iy, (hl)
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ex	de, hl
	jr	z, BB35_4
	ld	hl, -1900524
BB35_4:
	ld	hl, (hl)
	ld	(ix - 6), hl
	ld	de, 0
	ld	e, (ix + 15)
	ld	hl, (ix + 12)
	call	__imulu
	add	hl, de
	push	hl
	pop	bc
	lea	hl, iy
	add	hl, bc
	ld	(ix - 15), hl
	ld	e, a
	ld	hl, (ix + 18)
	call	__set_bc_and_mul_hl_by_240
	add	hl, de
	push	hl
	pop	bc
	ld	(ix - 9), iy
	ld	iy, (ix - 6)
	lea	hl, iy
	add	hl, bc
	ld	(ix - 18), hl
	ld	e, (ix + 27)
	ld	hl, 240
	ld	(ix - 12), de
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix - 9)
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nz, BB35_8
	ld	hl, (ix + 24)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB35_11
	ld	(ix - 21), de
BB35_7:
	ld	(ix - 6), hl
	ld	de, (ix - 3)
	ld	iy, (ix - 15)
	add	iy, de
	ld	hl, (ix - 18)
	add	hl, de
	ld	de, (ix - 12)
	push	de
	push	iy
	push	hl
	call	_memmove
	ld	de, (ix - 21)
	ld	hl, (ix - 6)
	ld	iy, 9
	add	iy, sp
	ld	sp, iy
	dec	hl
	ld	iy, (ix - 3)
	add	iy, de
	ld	(ix - 3), iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB35_7
	jr	BB35_11
BB35_8:
	ld	hl, (ix + 24)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB35_11
	ld	(ix - 21), de
BB35_10:
	ld	(ix - 6), hl
	ld	de, (ix - 3)
	ld	iy, (ix - 15)
	add	iy, de
	ld	hl, (ix - 18)
	add	hl, de
	ld	de, (ix - 12)
	push	de
	push	iy
	push	hl
	call	_memcpy
	ld	de, (ix - 21)
	ld	hl, (ix - 6)
	ld	iy, 9
	add	iy, sp
	ld	sp, iy
	dec	hl
	ld	iy, (ix - 3)
	add	iy, de
	ld	(ix - 3), iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB35_10
BB35_11:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.rodata,"a",@progbits
;	private	_switch.table.gfy_Tilemap_NoClip
_switch.table.gfy_Tilemap_NoClip:
	dl	gfy_Sprite_NoClip_Size2
	dl	gfy_Sprite_NoClip_Size4
	dl	gfy_Sprite_NoClip_Size8
	dl	gfy_Sprite_NoClip_Size16
	dl	gfy_Sprite_NoClip_Size32
	dl	gfy_Sprite_NoClip_Size64
	dl	gfy_Sprite_NoClip_Size128

;	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 51b05c1c99dbd61fce7daf56414f212f15b2171a)"
;	extern	gfy_internal_Begin
;	extern	__Unwind_SjLj_Register
;	extern	gfy_FontHeight
;	extern	_memcpy
;	extern	gfy_internal_End
;	extern	__idivu
;	extern	__ixor
;	extern	gfy_VertLine
;	extern	gfy_TextXPos
;	extern	__indcallhl
;	extern	_memmove
;	extern	gfy_Color
;	extern	lcd_Init
;	extern	gfy_PrintChar_Clip
;	extern	gfy_ClipXMax
;	extern	gfy_TextYPos
;	extern	gfy_Text_TP_Color
;	extern	__imulu
;	extern	gfy_ClipYMax
;	extern	gfy_TextWidthScale
;	extern	gfy_Transparent_Color
;	extern	gfy_GetCharWidth
;	extern	lcd_SendCommand1
;	extern	gfy_Wait
;	extern	gfy_TextData
;	extern	gfy_ClipXMin
;	extern	gfy_TextHeightScale
;	extern	__ishl
;	extern	gfy_Text_FG_Color
;	extern	__iand
;	extern	gfy_ClipYMin
;	extern	gfy_Text_BG_Color
;	extern	_memset
;	extern	gfy_SetTextXY
;	extern	lcd_SendCommandWords
;	extern	gfy_VertLine_NoClip
;	extern	__Unwind_SjLj_Unregister
;	extern	lcd_Cleanup
;	extern	__bshl
