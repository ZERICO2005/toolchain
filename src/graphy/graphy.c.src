;	section	.text,"ax",@progbits
;	assume	adl = 1
;	section	.text,"ax",@progbits
;	public	gfy_Begin
gfy_Begin:
	call	lcd_Init
	call	gfy_internal_Begin
	ld	hl, 40
	push	hl
	ld	hl, 54
	push	hl
	call	lcd_SendCommand1
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 239
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 554
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 319
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 555
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	jp	lcd_Cleanup
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_End
gfy_End:
	call	lcd_Init
	ld	hl, 8
	push	hl
	ld	hl, 54
	push	hl
	call	lcd_SendCommand1
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 319
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 554
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 239
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 555
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	call	lcd_Cleanup
	jp	gfy_internal_End
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Line_NoClip
gfy_Line_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 19
	ld	sp, hl
	call	gfy_Wait
	ld	a, (ix + 15)
	ld	de, 0
	push	de
	pop	hl
	ld	l, a
	ld	e, (ix + 9)
	ld	(ix - 6), hl
	ld	(ix - 9), de
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 15), de
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	(ix - 3), hl
	ld	hl, (ix + 12)
	ld	bc, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), hl
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	hl, (ix - 3)
	push	hl
	pop	iy
	or	a, a
	sbc	hl, de
	jp	nc, BB2_11
	ld	bc, (ix + 12)
	push	bc
	pop	hl
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	jp	nc, BB2_21
	ld	hl, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 15), hl
	ld	hl, (ix - 9)
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, -8388608
	add	hl, de
	or	a, a
	sbc	hl, de
	ld	hl, 1
	ld	(ix - 3), hl
	jr	nc, BB2_4
	scf
	sbc	hl, hl
	ld	(ix - 3), hl
BB2_4:
	push	bc
	pop	hl
	push	bc
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	c, 1
	add	hl, hl
	ld	(ix - 9), hl
	ex	de, hl
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 18), hl
	ld	iy, (-1900524)
	ld	a, (gfy_Color)
	ld	(ix - 19), a
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB2_39
	ld	hl, (ix + 12)
	call	__set_bc_and_mul_hl_by_240
	push	de
	pop	bc
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 6)
	add	iy, de
	ld	hl, (ix - 9)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix - 12)
	ld	(ix - 6), hl
BB2_6:
	ld	a, (ix - 19)
	ld	(iy), a
	push	bc
	pop	hl
	ld	de, -8388608
	add	hl, de
	inc	de
	or	a, a
	sbc	hl, de
	ccf
	sbc	a, a
	ld	hl, (ix - 18)
	jr	nz, BB2_8
	ld	hl, (ix - 9)
BB2_8:
	bit	0, a
	ld	de, (ix - 3)
	jr	nz, BB2_10
	ld	de, 0
BB2_10:
	add	iy, de
	ld	de, 240
	add	iy, de
	add	hl, bc
	ld	de, 1
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	add	hl, de
	ld	(ix - 6), hl
	jp	nc, BB2_6
	jp	BB2_39
BB2_11:
	ld	hl, -240
	ld	(ix - 3), hl
	ld	l, (ix + 9)
	cp	a, l
	jp	nc, BB2_30
	ld	hl, (ix + 6)
	ld	de, (ix + 12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 9)
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	de, -8388608
	push	bc
	pop	hl
	add	hl, de
	or	a, a
	sbc	hl, de
	jr	c, BB2_14
	ld	hl, 240
	ld	(ix - 3), hl
BB2_14:
	push	bc
	pop	hl
	push	bc
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	c, 1
	add	hl, hl
	ld	(ix - 9), hl
	ex	de, hl
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 12), hl
	ld	iy, (-1900524)
	ld	a, (gfy_Color)
	ld	(ix - 18), a
	ld	a, e
	or	a, a
	jp	z, BB2_39
	ld	hl, (ix + 12)
	call	__set_bc_and_mul_hl_by_240
	push	de
	pop	bc
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 6)
	add	iy, de
	ld	hl, (ix - 9)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	ld	a, (ix + 15)
	sub	a, (ix + 9)
BB2_16:
	ld	(ix - 6), a
	ld	a, (ix - 18)
	ld	(iy), a
	push	de
	pop	hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	ld	hl, (ix - 12)
	jr	nz, BB2_18
	ld	hl, (ix - 9)
BB2_18:
	bit	0, a
	ld	bc, (ix - 3)
	jr	nz, BB2_20
	ld	bc, 0
BB2_20:
	add	iy, bc
	inc	iy
	add	hl, de
	ld	a, (ix - 6)
	add	a, 1
	ex	de, hl
	jp	nc, BB2_16
	jp	BB2_39
BB2_21:
	ld	de, -8388608
	ld	hl, (ix - 15)
	add	hl, de
	or	a, a
	sbc	hl, de
	ld	hl, 1
	ld	(ix - 6), hl
	jr	nc, BB2_23
	scf
	sbc	hl, hl
	ld	(ix - 6), hl
BB2_23:
	ld	c, 1
	lea	hl, iy
	add	hl, hl
	ld	(ix - 15), hl
	lea	hl, iy
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 18), hl
	ld	iy, (-1900524)
	ld	a, (gfy_Color)
	ld	(ix - 19), a
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB2_39
	ld	hl, (ix + 6)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 9)
	add	iy, de
	ld	hl, (ix - 15)
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	hl, (ix + 6)
	ld	de, (ix + 12)
	or	a, a
	sbc	hl, de
	ld	(ix - 3), hl
BB2_25:
	ld	a, (ix - 19)
	ld	(iy), a
	push	bc
	pop	hl
	ld	de, -8388608
	add	hl, de
	inc	de
	or	a, a
	sbc	hl, de
	ccf
	sbc	a, a
	ld	hl, (ix - 18)
	jr	nz, BB2_27
	ld	hl, (ix - 15)
BB2_27:
	bit	0, a
	ld	de, (ix - 6)
	jr	nz, BB2_29
	ld	de, 0
BB2_29:
	add	iy, de
	ld	de, 240
	add	iy, de
	add	hl, bc
	ld	de, 1
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	jp	nc, BB2_25
	jp	BB2_39
BB2_30:
	ld	bc, -8388608
	ld	hl, (ix - 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	c, BB2_32
	ld	hl, 240
	ld	(ix - 3), hl
BB2_32:
	ld	c, 1
	push	de
	pop	hl
	add	hl, hl
	ld	(ix - 6), hl
	ex	de, hl
	ld	iy, (ix - 15)
	lea	de, iy
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 12), hl
	lea	hl, iy
	ld	iy, (-1900524)
	ld	a, (gfy_Color)
	ld	(ix - 18), a
	ld	a, l
	or	a, a
	jp	z, BB2_39
	ld	hl, (ix + 6)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 9)
	add	iy, de
	ld	hl, (ix - 6)
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	a, (ix + 9)
	sub	a, (ix + 15)
BB2_34:
	ld	(ix - 9), a
	ld	a, (ix - 18)
	ld	(iy), a
	push	de
	pop	hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	ld	hl, (ix - 12)
	jr	nz, BB2_36
	ld	hl, (ix - 6)
BB2_36:
	bit	0, a
	ld	bc, (ix - 3)
	jr	nz, BB2_38
	ld	bc, 0
BB2_38:
	add	iy, bc
	inc	iy
	add	hl, de
	ld	a, (ix - 9)
	add	a, 1
	ex	de, hl
	jp	nc, BB2_34
BB2_39:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftDown
gfy_ShiftDown:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	l, (ix + 6)
	ld	a, l
	or	a, a
	jp	z, BB3_5
	ld	de, 0
	ld	e, l
	ld	(ix - 3), de
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 6), hl
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	lea	de, iy
	ld	e, a
	ld	a, (gfy_ClipYMax)
	ld	iyl, a
	push	de
	pop	hl
	ld	bc, (ix - 3)
	add	hl, bc
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ld	bc, -8388608
	ld	(ix - 9), hl
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	jr	c, BB3_5
	ld	hl, (gfy_ClipXMin)
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 15), iy
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 12), hl
	add	hl, bc
	lea	bc, iy
	ld	iy, (ix - 6)
	or	a, a
	sbc	hl, bc
	jr	nc, BB3_5
	ld	bc, 240
	add	iy, de
	ld	de, (ix - 12)
	push	de
	pop	hl
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 15)
	or	a, a
	sbc	hl, de
BB3_4:
	ld	(ix - 12), hl
	ld	(ix - 6), iy
	lea	hl, iy
	ld	de, (ix - 3)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	iy
	push	hl
	call	_memmove
	ld	iy, (ix - 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	add	iy, de
	ld	hl, (ix - 12)
	dec	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB3_4
BB3_5:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftUp
gfy_ShiftUp:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	l, (ix + 6)
	ld	de, 0
	ld	a, l
	or	a, a
	jp	z, BB4_5
	ld	e, l
	ld	(ix - 3), de
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 6), hl
	ld	a, (gfy_ClipYMin)
	ld	de, 0
	ld	e, a
	ld	a, (gfy_ClipYMax)
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	de
	pop	iy
	ld	bc, (ix - 3)
	add	iy, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	bc, -8388608
	ld	(ix - 9), hl
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	jp	c, BB4_5
	ld	hl, (gfy_ClipXMin)
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 15), iy
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 12), hl
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB4_5
	ld	bc, 240
	ld	iy, (ix - 6)
	add	iy, de
	ld	hl, (ix - 12)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	lea	de, iy
	ld	hl, (ix - 15)
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	or	a, a
	sbc	hl, hl
	ld	bc, (ix - 3)
	sbc	hl, bc
	ld	(ix - 12), hl
BB4_4:
	ld	(ix - 3), iy
	push	de
	pop	bc
	ld	(ix - 6), bc
	push	bc
	pop	hl
	ld	de, (ix - 12)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	bc
	push	hl
	call	_memmove
	ld	iy, (ix - 3)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	hl, (ix - 6)
	add	hl, de
	ex	de, hl
	dec	iy
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB4_4
BB4_5:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftLeft
gfy_ShiftLeft:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB5_4
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	a, (gfy_ClipYMin)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, (gfy_ClipXMin)
	ld	a, (gfy_ClipYMax)
	ld	l, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	(ix - 15), bc
	push	bc
	pop	hl
	ld	bc, (ix + 6)
	add	hl, bc
	ld	iy, (gfy_ClipXMax)
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 6), hl
	add	hl, bc
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB5_4
	ld	bc, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 15)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix + 6)
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 15), de
	add	iy, de
BB5_3:
	ld	(ix - 3), iy
	lea	hl, iy
	ld	de, (ix - 15)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	hl
	push	iy
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	c, BB5_3
BB5_4:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftRight
gfy_ShiftRight:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB6_4
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	a, (gfy_ClipYMin)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, (gfy_ClipXMin)
	ld	a, (gfy_ClipYMax)
	ld	l, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	(ix - 15), bc
	push	bc
	pop	hl
	ld	bc, (ix + 6)
	add	hl, bc
	ld	iy, (gfy_ClipXMax)
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 6), hl
	add	hl, bc
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB6_4
	ld	bc, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 15)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix + 6)
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 15), de
	add	iy, de
BB6_3:
	ld	(ix - 3), iy
	lea	hl, iy
	ld	de, (ix - 15)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	hl
	push	iy
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	c, BB6_3
BB6_4:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ScaledSprite_NoClip
gfy_ScaledSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 25
	ld	sp, hl
	ld	l, (ix + 15)
	ld	iy, 0
	ld	a, l
	or	a, a
	jp	z, BB7_17
	ld	c, (ix + 18)
	ld	a, c
	or	a, a
	jp	z, BB7_17
	lea	de, iy
	ld	e, l
	ld	(ix - 6), de
	lea	hl, iy
	ld	l, c
	ld	(ix - 9), hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	hl, (ix + 9)
	call	__set_bc_and_mul_hl_by_240
	ld	(ix - 19), hl
	ld	hl, (ix - 6)
	call	__imulu
	ld	(ix - 6), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	or	a, a
	sbc	hl, hl
	ld	(ix - 15), a
	ld	l, a
	ld	bc, (ix - 9)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	ld	iy, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), hl
	ld	l, (iy)
	ld	a, l
	or	a, a
	jr	nz, BB7_5
	ld	a, (ix + 15)
	cp	a, 1
	jp	z, BB7_17
	ld	hl, (-1900524)
	jp	BB7_17
BB7_5:
	ld	de, 0
	ld	e, (ix + 12)
	ld	(ix - 25), de
	ld	iy, (ix - 3)
	add	iy, de
	ld	de, (ix - 19)
	add	iy, de
	lea	bc, iy
	ld	iy, (ix + 6)
	lea	de, iy + 2
	ld	(ix - 6), de
	ld	a, (ix + 18)
	dec	a
	ld	iy, 0
	ld	iyl, a
	ld	(ix - 22), iy
	push	af
	ld	a, (ix - 15)
	ld	iyl, a
	pop	af
	ld	iyh, iyl
	ld	d, 0
	ld	a, d
BB7_6:
	ld	(ix - 15), a
	ld	a, iyl
	or	a, a
	ld	iyl, d
	ld	a, d
	jr	z, BB7_9
BB7_7:
	ld	(ix - 16), a
	ld	hl, (ix - 6)
	ld	a, (hl)
	ld	hl, (ix - 9)
	push	hl
	ld	l, a
	push	hl
	ld	(ix - 3), bc
	push	bc
	call	_memset
	ld	a, (ix - 16)
	ld	iy, (ix + 6)
	ld	d, 0
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	bc, (ix - 22)
	ld	hl, (ix - 3)
	add	hl, bc
	inc	hl
	push	hl
	pop	bc
	inc	a
	ld	l, (iy + 1)
	ex	de, hl
	ld	iyh, e
	ex	de, hl
	cp	a, l
	jr	c, BB7_7
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	iyl, iyh
BB7_9:
	ld	e, l
	push	bc
	pop	hl
	ld	bc, (ix - 12)
	add	hl, bc
	push	hl
	pop	bc
	ld	l, e
	ld	a, (ix - 15)
	inc	a
	cp	a, l
	jr	c, BB7_6
	ld	a, (ix + 15)
	cp	a, 1
	jp	z, BB7_17
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, iyh
	ex	de, hl
	ld	bc, (ix - 9)
	call	__imulu
	ld	bc, (ix - 25)
	ld	(ix - 9), hl
	ld	a, e
	ld	e, (ix + 15)
	ld	iyl, a
	or	a, a
	jr	z, BB7_17
	ld	hl, (ix - 3)
	add	hl, bc
	ld	bc, (ix - 19)
	add	hl, bc
	ld	a, e
	dec	a
	ld	(ix - 16), a
	push	hl
	pop	bc
BB7_13:
	ld	(ix - 3), bc
	ld	bc, 240
	add	hl, bc
	ld	a, e
	cp	a, 2
	ld	a, (ix - 16)
	ld	(ix - 6), a
	push	hl
	pop	bc
	jr	c, BB7_16
BB7_14:
	ld	(ix - 12), d
	ld	hl, (ix - 9)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 15), bc
	push	bc
	call	_memcpy
	ld	iy, (ix + 6)
	ld	d, (ix - 12)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	e, (ix + 15)
	ld	bc, 240
	ld	hl, (ix - 15)
	add	hl, bc
	push	hl
	pop	bc
	ld	a, (ix - 6)
	dec	a
	ld	(ix - 6), a
	or	a, a
	jr	nz, BB7_14
	ld	a, (iy)
	ld	iyl, a
BB7_16:
	inc	d
	ld	a, d
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	cp	a, l
	push	bc
	pop	hl
	jr	c, BB7_13
BB7_17:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ScaledTransparentSprite_NoClip
gfy_ScaledTransparentSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 19
	ld	sp, hl
	ld	a, (ix + 15)
	or	a, a
	jp	z, BB8_13
	ld	e, (ix + 18)
	ld	a, e
	or	a, a
	jp	z, BB8_13
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	(ix - 7), hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	or	a, a
	sbc	hl, hl
	ld	(ix - 4), a
	ld	l, a
	ld	bc, (ix - 7)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, 240
	push	hl
	pop	de
	or	a, a
	sbc	hl, bc
	ld	c, (ix + 18)
	ld	(ix - 14), hl
	ld	hl, (ix + 6)
	ld	a, (hl)
	or	a, a
	jp	z, BB8_13
	ld	hl, (ix + 9)
	ld	a, c
	ld	bc, 0
	ld	c, (ix + 12)
	ld	iy, (ix - 3)
	add	iy, bc
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	lea	iy, iy + 2
	dec	a
	or	a, a
	sbc	hl, hl
	ld	l, a
	inc	hl
	ld	(ix - 19), hl
	xor	a, a
BB8_4:
	ld	(ix - 15), a
	ld	l, (ix - 4)
	ld	c, 0
BB8_5:
	ld	a, l
	or	a, a
	ld	(ix - 8), c
	jr	nz, BB8_7
	xor	a, a
	ld	l, a
	jr	BB8_11
BB8_7:
	ld	a, (gfy_Transparent_Color)
	ld	d, a
	ld	e, 0
BB8_8:
	ld	a, (iy)
	cp	a, d
	ld	bc, (ix - 7)
	lea	hl, iy
	jr	z, BB8_10
	ld	(ix - 11), hl
	ld	hl, (ix - 7)
	push	hl
	ld	l, a
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 16), e
	call	_memset
	ld	e, (ix - 16)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 11)
	ld	a, (gfy_Transparent_Color)
	ld	d, a
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	(ix - 4), a
	ld	bc, (ix - 19)
BB8_10:
	inc	hl
	push	hl
	pop	iy
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	inc	e
	ld	a, e
	ld	l, (ix - 4)
	cp	a, l
	jr	c, BB8_8
BB8_11:
	ld	(ix - 11), l
	ld	bc, 0
	ld	c, l
	ld	hl, (ix - 3)
	ld	de, (ix - 14)
	add	hl, de
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	sbc	hl, bc
	push	hl
	pop	bc
	add	iy, bc
	ld	c, (ix - 8)
	inc	c
	ld	a, c
	ld	l, (ix + 15)
	cp	a, l
	ld	l, (ix - 11)
	jp	nz, BB8_5
	ld	bc, 0
	ld	c, (ix - 4)
	add	iy, bc
	ld	a, (ix - 15)
	inc	a
	ld	hl, (ix + 6)
	ld	l, (hl)
	cp	a, l
	jp	c, BB8_4
BB8_13:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_FloodFill
gfy_FloodFill:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 41
	ld	sp, hl
	ld	bc, (ix + 6)
	ld	iy, (gfy_ClipXMin)
	ld	de, -8388608
	ld	(ix - 6), iy
	add	iy, de
	push	bc
	pop	hl
	add	hl, de
	push	hl
	pop	de
	ld	(ix - 3), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	c, BB9_39
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 9), iy
	ld	bc, -8388608
	add	iy, bc
	ex	de, hl
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB9_39
	ld	c, (ix + 9)
	ld	a, (gfy_ClipYMin)
	ld	l, a
	ld	a, c
	ld	(ix - 13), l
	cp	a, l
	jp	c, BB9_39
	ld	a, (gfy_ClipYMax)
	ld	l, a
	ld	a, c
	ld	(ix - 17), l
	cp	a, l
	jp	nc, BB9_39
	ld	a, c
	ld	bc, 240
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, a
	ld	iy, (-1900524)
	ld	hl, (ix + 6)
	call	__imulu
	add	hl, de
	push	hl
	pop	bc
	ld	(ix - 20), iy
	lea	hl, iy
	add	hl, bc
	ld	c, a
	ld	a, (hl)
	ld	(ix - 21), a
	ld	l, (ix + 12)
	cp	a, l
	jp	z, BB9_39
	ld	a, c
	ld	bc, 3072
	ld	hl, 0
	add	hl, sp
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	sp, iy
	ld	hl, (ix + 6)
	ld	(iy), l
	ld	(iy + 1), h
	ld	(ix - 28), iy
	ld	(iy + 2), a
	ld	l, (ix - 17)
	dec	l
	ld	(ix - 17), l
	ld	iy, (ix - 6)
	lea	hl, iy
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	hl, (ix - 20)
	add	hl, bc
	ld	(ix - 34), hl
	ld	bc, 1
	dec	iy
	ld	(ix - 6), iy
	ld	hl, (ix - 9)
	dec	hl
	ld	(ix - 9), hl
BB9_6:
	dec	bc
	ld	(ix - 24), bc
	push	bc
	pop	hl
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (iy)
	ld	a, (iy + 2)
	ld	bc, 0
	push	bc
	pop	iy
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	push	bc
	pop	de
	ld	(ix - 25), a
	ld	e, a
	lea	hl, iy
	call	__set_bc_and_mul_hl_by_240
	ld	(ix - 31), de
	add	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 20)
	add	hl, bc
	ld	(ix - 16), hl
	lea	hl, iy
	ld	de, -8388608
	add	hl, de
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	c, BB9_11
	ld	hl, (ix - 34)
	ld	de, (ix - 31)
	add	hl, de
	ld	de, -240
	add	hl, de
	ld	(ix - 31), hl
	ld	hl, (ix - 16)
BB9_8:
	ld	(ix - 16), hl
	ld	a, (hl)
	ld	l, (ix - 21)
	cp	a, l
	ld	bc, -8388608
	jr	nz, BB9_12
	dec	iy
	ld	de, -240
	ld	hl, (ix - 16)
	add	hl, de
	ex	de, hl
	lea	hl, iy
	inc	hl
	add	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	ex	de, hl
	jr	c, BB9_8
	ld	hl, (ix - 31)
	ld	(ix - 16), hl
	ld	iy, (ix - 6)
BB9_11:
	ld	bc, -8388608
BB9_12:
	ld	de, (ix - 9)
	lea	hl, iy
	inc	hl
	add	hl, bc
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	jp	nc, BB9_37
	ld	a, (ix - 25)
	ld	l, a
	dec	l
	ld	(ix - 37), l
	inc	a
	ld	(ix - 38), a
	ex	de, hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 31), hl
	inc.sis	de
	ld	bc, 241
	ld	iy, (ix - 16)
	add	iy, bc
	xor	a, a
	ld	(ix - 35), a
	ld	(ix - 36), a
	ld	bc, (ix - 24)
BB9_14:
	ld	a, (iy - 1)
	ld	l, (ix - 21)
	cp	a, l
	jp	nz, BB9_38
	ld	(ix - 41), de
	ld	(ix - 16), iy
	push	bc
	pop	hl
	ld	de, 1022
	or	a, a
	sbc	hl, de
	jp	nc, BB9_38
	ld	a, (ix + 12)
	ld	iy, (ix - 16)
	ld	(iy - 1), a
	ld	a, (ix - 13)
	ld	l, (ix - 25)
	cp	a, l
	ld	(ix - 24), bc
	jr	nc, BB9_20
	ld	l, (iy - 2)
	ld	a, (ix - 35)
	and	a, 1
	ld	c, a
	bit	0, c
	jr	nz, BB9_21
	ld	a, l
	ld	h, (ix - 21)
	cp	a, h
	jr	nz, BB9_21
	ld	hl, (ix - 24)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (ix - 41)
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (ix - 37)
	ld	(iy + 2), a
	ld	de, (ix - 9)
	ld	hl, (ix - 24)
	inc	hl
	ld	(ix - 24), hl
	ld	a, 1
	jr	BB9_25
BB9_20:
	ld	bc, 240
	ld	de, (ix - 9)
	jr	BB9_27
BB9_21:
	ld	a, c
	xor	a, 1
	ld	c, a
	ld	a, l
	ld	l, (ix - 21)
	cp	a, l
	ld	l, -1
	jr	z, BB9_23
	ld	l, 0
BB9_23:
	ld	a, c
	or	a, l
	bit	0, a
	ld	de, (ix - 9)
	jr	nz, BB9_26
	xor	a, a
BB9_25:
	ld	(ix - 35), a
BB9_26:
	ld	bc, 240
BB9_27:
	ld	a, (ix - 25)
	ld	l, (ix - 17)
	cp	a, l
	jr	nc, BB9_36
	ld	hl, (ix - 16)
	ld	l, (hl)
	ld	a, (ix - 36)
	and	a, 1
	ld	c, a
	bit	0, c
	jr	nz, BB9_31
	ld	a, l
	ld	h, (ix - 21)
	cp	a, h
	jr	nz, BB9_31
	ld	de, (ix - 24)
	push	de
	pop	hl
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (ix - 41)
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (ix - 38)
	ld	(iy + 2), a
	inc	de
	ld	(ix - 24), de
	ld	a, 1
	jr	BB9_34
BB9_31:
	ld	a, c
	xor	a, 1
	ld	c, a
	ld	a, l
	ld	l, (ix - 21)
	cp	a, l
	ld	l, -1
	jr	z, BB9_33
	ld	l, 0
BB9_33:
	ld	a, c
	or	a, l
	bit	0, a
	ld	a, 0
	jr	nz, BB9_35
BB9_34:
	ld	(ix - 36), a
BB9_35:
	ld	bc, 240
BB9_36:
	ld	hl, (ix - 31)
	dec	hl
	ld	de, (ix - 41)
	inc.sis	de
	ld	iy, (ix - 16)
	add	iy, bc
	ld	(ix - 31), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, (ix - 24)
	jp	nz, BB9_14
	jr	BB9_38
BB9_37:
	ld	bc, (ix - 24)
BB9_38:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, (ix - 9)
	jp	nz, BB9_6
BB9_39:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_RLETSprite
gfy_RLETSprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 30
	ld	sp, hl
	ld	hl, (ix + 9)
	ld	iy, (gfy_ClipXMax)
	ld	de, -8388608
	add	iy, de
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB10_40
	ld	hl, (ix + 12)
	ld	a, (gfy_ClipYMax)
	ld	de, 0
	lea	bc, iy
	push	de
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	add	hl, de
	ld	(ix - 3), hl
	ld	(ix - 6), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB10_40
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	a, l
	or	a, a
	jp	z, BB10_40
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	push	bc
	pop	de
	ld	(ix - 9), a
	or	a, a
	jp	z, BB10_40
	ld	iy, 0
	ld	(ix - 12), de
	ex	de, hl
	ld	iyl, e
	ex	de, hl
	ld	bc, (ix + 9)
	add	iy, bc
	ld	bc, (gfy_ClipXMin)
	push	bc
	pop	hl
	ld	de, -8388608
	add	hl, de
	push	hl
	pop	bc
	add	iy, de
	ld	(ix - 18), iy
	lea	hl, iy
	ld	de, (ix - 12)
	ld	(ix - 15), bc
	or	a, a
	sbc	hl, bc
	jp	c, BB10_40
	or	a, a
	sbc	hl, hl
	push	hl
	pop	iy
	push	af
	ld	a, (ix - 9)
	ld	iyl, a
	pop	af
	ld	de, (ix + 12)
	add	iy, de
	ld	a, (gfy_ClipYMin)
	ld	l, a
	push	hl
	pop	de
	ld	de, -8388608
	add	hl, de
	ex	de, hl
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 9), iy
	lea	hl, iy
	ld	bc, (ix - 12)
	push	de
	pop	iy
	or	a, a
	sbc	hl, de
	jp	c, BB10_40
	ld	hl, (ix + 9)
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	jr	c, BB10_10
	ld	hl, (ix - 3)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	c, BB10_10
	push	bc
	pop	hl
	ld	de, (ix - 18)
	or	a, a
	sbc	hl, de
	jr	c, BB10_10
	ld	hl, (ix - 6)
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	jp	nc, BB10_41
BB10_10:
	call	gfy_Wait
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 6), hl
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	hl, (ix + 6)
	ld	a, (hl)
	ld	iy, 0
	ld	(ix - 12), a
	ld	iyl, a
	add	iy, de
	ld	bc, (gfy_ClipXMax)
	lea	hl, iy
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	ld	(ix - 3), hl
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	push	bc
	pop	hl
	add	hl, de
	lea	de, iy
	ld	iy, 0
	or	a, a
	sbc	hl, de
	jr	c, BB10_12
	ld	(ix - 3), iy
BB10_12:
	ld	hl, (ix - 9)
	ld	bc, 255
	inc	hl
	dec.s	hl
	ld	h, b
	push	hl
	pop	bc
	ld	hl, -8388608
	ex	de, hl
	ld	iy, (ix - 6)
	add	iy, de
	ld	hl, (ix + 9)
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	c, BB10_14
	ld	bc, 0
BB10_14:
	ld	(ix - 15), bc
	ld	hl, (ix - 3)
	ld	a, l
	add	a, c
	ld	l, a
	ld	a, (ix - 12)
	ld	(ix - 24), l
	sub	a, l
	ld	(ix - 18), a
	ld	iy, (ix + 6)
	lea	hl, iy + 2
	ld	(ix - 6), hl
	ld	iy, (-1900524)
	push	bc
	pop	hl
	ld	de, (ix + 9)
	add	hl, de
	call	__set_bc_and_mul_hl_by_240
	ld	de, (ix + 12)
	add	hl, de
	ex	de, hl
	add	iy, de
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	de, 0
	ld	(ix - 9), a
	ld	e, a
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	(ix - 21), hl
	ld	hl, (ix - 15)
	ld	a, l
	or	a, a
	jr	z, BB10_21
	ld	(ix - 27), de
	ld	iy, 0
	lea	bc, iy
BB10_16:
	ld	a, (ix - 9)
	or	a, a
	jr	z, BB10_20
BB10_17:
	ld	de, 0
	ld	hl, (ix - 6)
	ld	e, (hl)
	add	iy, de
	lea	hl, iy
	ld	de, (ix - 27)
	or	a, a
	sbc	hl, de
	jr	nc, BB10_19
	ld	de, 0
	ld	hl, (ix - 6)
	ld	(ix - 30), iy
	push	hl
	pop	iy
	ld	e, (iy + 1)
	add	hl, de
	push	hl
	pop	iy
	lea	iy, iy + 2
	ld	(ix - 6), iy
	ld	iy, (ix - 30)
	add	iy, de
	lea	hl, iy
	ld	de, (ix - 27)
	or	a, a
	sbc	hl, de
	jr	c, BB10_17
	jr	BB10_20
BB10_19:
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
BB10_20:
	inc	bc
	push	bc
	pop	hl
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	ld	iy, 0
	jr	nz, BB10_16
BB10_21:
	ld	a, (ix - 12)
	ld	l, (ix - 24)
	cp	a, l
	ld	e, 0
	jp	z, BB10_40
	push	af
	ld	a, (ix - 9)
	ld	iyl, a
	pop	af
	ld	d, e
BB10_23:
	ld	a, iyl
	or	a, a
	jr	nz, BB10_25
	ld	iyl, e
	jp	BB10_39
BB10_25:
	ld	e, iyl
	ld	iy, (ix - 6)
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	ld	(ix - 12), e
	cp	a, e
	jp	nc, BB10_37
	ld	(ix - 15), bc
	ld	(ix - 12), iy
	ld	bc, (ix + 12)
	ld	(ix - 27), d
BB10_27:
	ld	iy, (ix - 12)
	lea	hl, iy + 2
	ld	(ix - 24), hl
	ld	iy, (ix - 12)
	ld	e, (iy + 1)
	ld	a, e
	or	a, a
	jr	nz, BB10_29
	ld	hl, (ix - 24)
	ld	(ix - 12), hl
	ld	a, (ix - 9)
	jr	BB10_35
BB10_29:
	ld	(ix - 6), e
	ld	a, (gfy_ClipYMin)
	ld	(ix - 30), a
	ld	hl, (ix - 24)
	ld	(ix - 12), hl
	ld	de, (ix - 15)
BB10_30:
	push	bc
	pop	hl
	ld	(ix - 9), de
	add	hl, de
	push	hl
	pop	de
	ld	bc, 0
	ld	c, (ix - 30)
	or	a, a
	sbc	hl, bc
	jr	c, BB10_33
	ld	a, (gfy_ClipYMax)
	ld	bc, 0
	ld	c, a
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jr	nc, BB10_33
	ld	hl, (ix - 12)
	ld	a, (hl)
	ld	hl, (ix - 3)
	ld	(hl), a
	ld	a, (gfy_ClipYMin)
	ld	(ix - 30), a
BB10_33:
	ld	hl, (ix - 12)
	inc	hl
	ld	(ix - 12), hl
	ld	de, (ix - 9)
	inc	de
	ld	hl, (ix - 3)
	inc	hl
	ld	(ix - 3), hl
	ld	a, (ix - 6)
	dec	a
	ld	(ix - 6), a
	or	a, a
	ld	bc, (ix + 12)
	jr	nz, BB10_30
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	(ix - 15), de
	ld	d, (ix - 27)
BB10_35:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	hl, (ix - 15)
	sbc	hl, bc
	ld	(ix - 9), a
	jr	nc, BB10_38
	ld	hl, (ix - 12)
	inc	hl
	ld	(ix - 6), hl
	or	a, a
	sbc	hl, hl
	ld	(ix - 24), hl
	ld	hl, (ix - 12)
	ld	iy, (ix - 24)
	push	af
	ld	a, (hl)
	ld	iyl, a
	pop	af
	ld	(ix - 24), iy
	ld	iy, (ix - 3)
	ld	hl, (ix - 15)
	ld	de, (ix - 24)
	add	hl, de
	ld	de, (ix - 24)
	add	iy, de
	ld	(ix - 3), iy
	ld	d, (ix - 27)
	ld	(ix - 15), hl
	or	a, a
	sbc	hl, bc
	ld	iyl, a
	ld	e, 0
	ld	bc, (ix + 12)
	jr	nc, BB10_39
	jp	BB10_27
BB10_37:
	inc	iy
	ld	(ix - 6), iy
	ld	e, 0
	push	af
	ld	a, (ix - 12)
	ld	iyl, a
	pop	af
	jr	BB10_39
BB10_38:
	ld	iyl, a
	ld	hl, (ix - 12)
	ld	(ix - 6), hl
	ld	e, 0
BB10_39:
	ld	bc, (ix - 21)
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	inc	d
	ld	a, d
	ld	c, (ix - 18)
	cp	a, c
	jp	nz, BB10_23
BB10_40:
	ld	sp, ix
	pop	ix
	ret
BB10_41:
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	gfy_RLETSprite_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	jr	BB10_40
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_CopyRectangle
gfy_CopyRectangle:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 12
	ld	sp, hl
	call	gfy_Wait
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, -1900528
	push	hl
	pop	de
	jr	z, BB11_2
	ld	hl, -1900524
BB11_2:
	ld	a, (ix + 21)
	ld	bc, 240
	ld	iy, (hl)
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ex	de, hl
	jr	z, BB11_4
	ld	hl, -1900524
BB11_4:
	ld	hl, (hl)
	ld	(ix - 3), hl
	ld	de, 0
	ld	e, (ix + 15)
	ld	hl, (ix + 12)
	call	__imulu
	add	hl, de
	push	de
	pop	bc
	ex	de, hl
	add	iy, de
	push	bc
	pop	de
	ld	e, a
	ld	hl, (ix + 18)
	call	__set_bc_and_mul_hl_by_240
	push	de
	pop	bc
	add	hl, bc
	ex	de, hl
	ld	hl, (ix - 3)
	add	hl, de
	ex	de, hl
	ld	c, (ix + 27)
	ld	(ix - 6), bc
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jr	nz, BB11_7
	ld	hl, (ix + 24)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	jr	nz, BB11_8
BB11_6:
	ld	sp, ix
	pop	ix
	ret
BB11_7:
	ex	de, hl
	jr	BB11_10
BB11_8:
	ld	hl, 240
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	lea	hl, iy
BB11_9:
	ld	(ix - 9), bc
	ld	de, -240
	add	hl, de
	ld	(ix - 3), hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_memmove
	ld	bc, (ix - 9)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	dec	bc
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, (ix - 3)
	push	hl
	pop	iy
	jr	nz, BB11_9
BB11_10:
	ex	de, hl
	ld	bc, (ix + 24)
BB11_11:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB11_6
	ld	(ix - 12), iy
	ld	(ix - 9), bc
	ld	hl, (ix - 6)
	push	hl
	push	iy
	ld	(ix - 3), de
	push	de
	call	_memcpy
	ld	iy, (ix - 12)
	ld	bc, (ix - 9)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 240
	ex	de, hl
	add	iy, de
	ld	hl, (ix - 3)
	add	hl, de
	ex	de, hl
	dec	bc
	jr	BB11_11
;	section	.text,"ax",@progbits

;	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 51b05c1c99dbd61fce7daf56414f212f15b2171a)"
;	extern	gfy_internal_Begin
;	extern	_memset
;	extern	gfy_Transparent_Color
;	extern	__Unwind_SjLj_Register
;	extern	lcd_SendCommand1
;	extern	_memmove
;	extern	gfy_Color
;	extern	lcd_Init
;	extern	gfy_Wait
;	extern	gfy_ClipXMin
;	extern	gfy_ClipXMax
;	extern	__ishl
;	extern	_memcpy
;	extern	gfy_internal_End
;	extern	lcd_SendSizedCommandWords
;	extern	__Unwind_SjLj_Unregister
;	extern	gfy_RLETSprite_NoClip
;	extern	lcd_Cleanup
;	extern	__iand
;	extern	__ixor
;	extern	__imulu
;	extern	gfy_ClipYMin
;	extern	gfy_ClipYMax
