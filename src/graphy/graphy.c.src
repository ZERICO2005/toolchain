;	section	.text,"ax",@progbits
;	assume	adl = 1
;	section	.text,"ax",@progbits
;	public	gfy_Begin
gfy_Begin:
	call	lcd_Init
	call	gfy_internal_Begin
	ld	hl, 40
	push	hl
	ld	hl, 54
	push	hl
	call	lcd_SendCommand1
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 239
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 554
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 319
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 555
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	jp	lcd_Cleanup
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_End
gfy_End:
	call	lcd_Init
	ld	hl, 8
	push	hl
	ld	hl, 54
	push	hl
	call	lcd_SendCommand1
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 319
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 554
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 239
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 555
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	call	lcd_Cleanup
	jp	gfy_internal_End
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Line_NoClip
gfy_Line_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 19
	ld	sp, hl
	call	gfy_Wait
	ld	a, (ix + 15)
	ld	de, 0
	push	de
	pop	hl
	ld	l, a
	ld	e, (ix + 9)
	ld	(ix - 6), hl
	ld	(ix - 9), de
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 15), de
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	(ix - 3), hl
	ld	hl, (ix + 12)
	ld	bc, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), hl
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	hl, (ix - 3)
	push	hl
	pop	iy
	or	a, a
	sbc	hl, de
	jp	nc, BB2_11
	ld	bc, (ix + 12)
	push	bc
	pop	hl
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	jp	nc, BB2_21
	ld	hl, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 15), hl
	ld	hl, (ix - 9)
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, -8388608
	add	hl, de
	or	a, a
	sbc	hl, de
	ld	hl, 1
	ld	(ix - 3), hl
	jr	nc, BB2_4
	scf
	sbc	hl, hl
	ld	(ix - 3), hl
BB2_4:
	push	bc
	pop	hl
	push	bc
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	c, 1
	add	hl, hl
	ld	(ix - 9), hl
	ex	de, hl
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 18), hl
	ld	iy, (-1900524)
	ld	a, (gfy_Color)
	ld	(ix - 19), a
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB2_39
	ld	hl, (ix + 12)
	call	__set_bc_and_mul_hl_by_240
	push	de
	pop	bc
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 6)
	add	iy, de
	ld	hl, (ix - 9)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix - 12)
	ld	(ix - 6), hl
BB2_6:
	ld	a, (ix - 19)
	ld	(iy), a
	push	bc
	pop	hl
	ld	de, -8388608
	add	hl, de
	inc	de
	or	a, a
	sbc	hl, de
	ccf
	sbc	a, a
	ld	hl, (ix - 18)
	jr	nz, BB2_8
	ld	hl, (ix - 9)
BB2_8:
	bit	0, a
	ld	de, (ix - 3)
	jr	nz, BB2_10
	ld	de, 0
BB2_10:
	add	iy, de
	ld	de, 240
	add	iy, de
	add	hl, bc
	ld	de, 1
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	add	hl, de
	ld	(ix - 6), hl
	jp	nc, BB2_6
	jp	BB2_39
BB2_11:
	ld	hl, -240
	ld	(ix - 3), hl
	ld	l, (ix + 9)
	cp	a, l
	jp	nc, BB2_30
	ld	hl, (ix + 6)
	ld	de, (ix + 12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 9)
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	de, -8388608
	push	bc
	pop	hl
	add	hl, de
	or	a, a
	sbc	hl, de
	jr	c, BB2_14
	ld	hl, 240
	ld	(ix - 3), hl
BB2_14:
	push	bc
	pop	hl
	push	bc
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	c, 1
	add	hl, hl
	ld	(ix - 9), hl
	ex	de, hl
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 12), hl
	ld	iy, (-1900524)
	ld	a, (gfy_Color)
	ld	(ix - 18), a
	ld	a, e
	or	a, a
	jp	z, BB2_39
	ld	hl, (ix + 12)
	call	__set_bc_and_mul_hl_by_240
	push	de
	pop	bc
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 6)
	add	iy, de
	ld	hl, (ix - 9)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	ld	a, (ix + 15)
	sub	a, (ix + 9)
BB2_16:
	ld	(ix - 6), a
	ld	a, (ix - 18)
	ld	(iy), a
	push	de
	pop	hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	ld	hl, (ix - 12)
	jr	nz, BB2_18
	ld	hl, (ix - 9)
BB2_18:
	bit	0, a
	ld	bc, (ix - 3)
	jr	nz, BB2_20
	ld	bc, 0
BB2_20:
	add	iy, bc
	inc	iy
	add	hl, de
	ld	a, (ix - 6)
	add	a, 1
	ex	de, hl
	jp	nc, BB2_16
	jp	BB2_39
BB2_21:
	ld	de, -8388608
	ld	hl, (ix - 15)
	add	hl, de
	or	a, a
	sbc	hl, de
	ld	hl, 1
	ld	(ix - 6), hl
	jr	nc, BB2_23
	scf
	sbc	hl, hl
	ld	(ix - 6), hl
BB2_23:
	ld	c, 1
	lea	hl, iy
	add	hl, hl
	ld	(ix - 15), hl
	lea	hl, iy
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 18), hl
	ld	iy, (-1900524)
	ld	a, (gfy_Color)
	ld	(ix - 19), a
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB2_39
	ld	hl, (ix + 6)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 9)
	add	iy, de
	ld	hl, (ix - 15)
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	hl, (ix + 6)
	ld	de, (ix + 12)
	or	a, a
	sbc	hl, de
	ld	(ix - 3), hl
BB2_25:
	ld	a, (ix - 19)
	ld	(iy), a
	push	bc
	pop	hl
	ld	de, -8388608
	add	hl, de
	inc	de
	or	a, a
	sbc	hl, de
	ccf
	sbc	a, a
	ld	hl, (ix - 18)
	jr	nz, BB2_27
	ld	hl, (ix - 15)
BB2_27:
	bit	0, a
	ld	de, (ix - 6)
	jr	nz, BB2_29
	ld	de, 0
BB2_29:
	add	iy, de
	ld	de, 240
	add	iy, de
	add	hl, bc
	ld	de, 1
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	jp	nc, BB2_25
	jp	BB2_39
BB2_30:
	ld	bc, -8388608
	ld	hl, (ix - 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	c, BB2_32
	ld	hl, 240
	ld	(ix - 3), hl
BB2_32:
	ld	c, 1
	push	de
	pop	hl
	add	hl, hl
	ld	(ix - 6), hl
	ex	de, hl
	ld	iy, (ix - 15)
	lea	de, iy
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 12), hl
	lea	hl, iy
	ld	iy, (-1900524)
	ld	a, (gfy_Color)
	ld	(ix - 18), a
	ld	a, l
	or	a, a
	jp	z, BB2_39
	ld	hl, (ix + 6)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 9)
	add	iy, de
	ld	hl, (ix - 6)
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	a, (ix + 9)
	sub	a, (ix + 15)
BB2_34:
	ld	(ix - 9), a
	ld	a, (ix - 18)
	ld	(iy), a
	push	de
	pop	hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	ld	hl, (ix - 12)
	jr	nz, BB2_36
	ld	hl, (ix - 6)
BB2_36:
	bit	0, a
	ld	bc, (ix - 3)
	jr	nz, BB2_38
	ld	bc, 0
BB2_38:
	add	iy, bc
	inc	iy
	add	hl, de
	ld	a, (ix - 9)
	add	a, 1
	ex	de, hl
	jp	nc, BB2_34
BB2_39:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftDown
gfy_ShiftDown:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	l, (ix + 6)
	ld	a, l
	or	a, a
	jp	z, BB3_5
	ld	de, 0
	ld	e, l
	ld	(ix - 3), de
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 6), hl
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	lea	de, iy
	ld	e, a
	ld	a, (gfy_ClipYMax)
	ld	iyl, a
	push	de
	pop	hl
	ld	bc, (ix - 3)
	add	hl, bc
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ld	bc, -8388608
	ld	(ix - 9), hl
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	jr	c, BB3_5
	ld	hl, (gfy_ClipXMin)
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 15), iy
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 12), hl
	add	hl, bc
	lea	bc, iy
	ld	iy, (ix - 6)
	or	a, a
	sbc	hl, bc
	jr	nc, BB3_5
	ld	bc, 240
	add	iy, de
	ld	de, (ix - 12)
	push	de
	pop	hl
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 15)
	or	a, a
	sbc	hl, de
BB3_4:
	ld	(ix - 12), hl
	ld	(ix - 6), iy
	lea	hl, iy
	ld	de, (ix - 3)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	iy
	push	hl
	call	_memmove
	ld	iy, (ix - 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	add	iy, de
	ld	hl, (ix - 12)
	dec	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB3_4
BB3_5:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftUp
gfy_ShiftUp:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	l, (ix + 6)
	ld	de, 0
	ld	a, l
	or	a, a
	jp	z, BB4_5
	ld	e, l
	ld	(ix - 3), de
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 6), hl
	ld	a, (gfy_ClipYMin)
	ld	de, 0
	ld	e, a
	ld	a, (gfy_ClipYMax)
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	de
	pop	iy
	ld	bc, (ix - 3)
	add	iy, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	bc, -8388608
	ld	(ix - 9), hl
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	jp	c, BB4_5
	ld	hl, (gfy_ClipXMin)
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 15), iy
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 12), hl
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB4_5
	ld	bc, 240
	ld	iy, (ix - 6)
	add	iy, de
	ld	hl, (ix - 12)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	lea	de, iy
	ld	hl, (ix - 15)
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	or	a, a
	sbc	hl, hl
	ld	bc, (ix - 3)
	sbc	hl, bc
	ld	(ix - 12), hl
BB4_4:
	ld	(ix - 3), iy
	push	de
	pop	bc
	ld	(ix - 6), bc
	push	bc
	pop	hl
	ld	de, (ix - 12)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	bc
	push	hl
	call	_memmove
	ld	iy, (ix - 3)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	hl, (ix - 6)
	add	hl, de
	ex	de, hl
	dec	iy
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB4_4
BB4_5:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftLeft
gfy_ShiftLeft:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB5_4
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	a, (gfy_ClipYMin)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, (gfy_ClipXMin)
	ld	a, (gfy_ClipYMax)
	ld	l, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	(ix - 15), bc
	push	bc
	pop	hl
	ld	bc, (ix + 6)
	add	hl, bc
	ld	iy, (gfy_ClipXMax)
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 6), hl
	add	hl, bc
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB5_4
	ld	bc, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 15)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix + 6)
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 15), de
	add	iy, de
BB5_3:
	ld	(ix - 3), iy
	lea	hl, iy
	ld	de, (ix - 15)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	hl
	push	iy
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	c, BB5_3
BB5_4:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftRight
gfy_ShiftRight:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB6_4
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	a, (gfy_ClipYMin)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, (gfy_ClipXMin)
	ld	a, (gfy_ClipYMax)
	ld	l, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	(ix - 15), bc
	push	bc
	pop	hl
	ld	bc, (ix + 6)
	add	hl, bc
	ld	iy, (gfy_ClipXMax)
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 6), hl
	add	hl, bc
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB6_4
	ld	bc, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 15)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix + 6)
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 15), de
	add	iy, de
BB6_3:
	ld	(ix - 3), iy
	lea	hl, iy
	ld	de, (ix - 15)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	hl
	push	iy
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	c, BB6_3
BB6_4:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Tilemap
gfy_Tilemap:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 36
	ld	sp, hl
	ld	hl, (ix + 9)
	xor	a, a
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	c, (iy + 7)
	ld	(ix - 3), bc
	call	__idivu
	ld	(ix - 9), hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 6)
	ld	hl, (ix + 12)
	push	de
	pop	bc
	call	__idivu
	ld	(ix - 12), hl
	ld	hl, (ix - 9)
	ld	bc, (ix - 3)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	hl, (ix - 12)
	ld	(ix - 15), de
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, de
	ld	(ix - 6), hl
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 22), a
	ld	(ix - 18), iy
	jr	z, BB7_2
	ld	a, 0
	jr	BB7_3
BB7_2:
	ld	a, -1
BB7_3:
	ld	de, 0
	push	de
	pop	bc
	ld	de, (ix - 3)
	ld	iy, (ix + 6)
	ld	hl, (iy + 15)
	ld	iy, (ix - 18)
	add	iy, de
	bit	0, a
	jr	nz, BB7_5
	lea	bc, iy
BB7_5:
	or	a, a
	sbc	hl, bc
	ld	(ix - 21), hl
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	c, (iy + 14)
	ld	hl, (ix - 6)
	push	hl
	pop	iy
	ld	de, (ix - 15)
	add	iy, de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, 0
	jr	z, BB7_7
	lea	de, iy
BB7_7:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	(ix - 18), hl
	ld	iy, (ix + 6)
	ld	e, (iy + 9)
	bit	0, a
	jr	nz, BB7_12
	ld	hl, (ix + 9)
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	nc, BB7_10
	ld	hl, (ix - 21)
	add	hl, bc
	ld	(ix - 21), hl
	or	a, a
	sbc	hl, hl
	jr	BB7_11
BB7_10:
	inc	e
	ld	hl, (ix - 9)
	dec	hl
BB7_11:
	ld	(ix - 9), hl
BB7_12:
	ld	d, (iy + 8)
	ld	hl, (ix - 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB7_17
	ld	hl, (ix + 12)
	ld	bc, (ix - 15)
	or	a, a
	sbc	hl, bc
	jr	nc, BB7_15
	ld	hl, (ix - 18)
	add	hl, bc
	ld	(ix - 18), hl
	or	a, a
	sbc	hl, hl
	jr	BB7_16
BB7_15:
	inc	d
	ld	hl, (ix - 12)
	dec	hl
BB7_16:
	ld	(ix - 12), hl
BB7_17:
	ld	a, e
	or	a, a
	jr	z, BB7_19
	ld	a, d
	or	a, a
	jr	nz, BB7_20
BB7_19:
	ld	sp, ix
	pop	ix
	ret
BB7_20:
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	(ix - 15), hl
	ld	(ix - 6), e
	ld	(ix - 23), d
	call	gfy_Wait
	ld	iy, (ix + 6)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, (iy + 13)
	ld	l, (iy + 12)
	call	__imulu
	ld	(ix - 3), hl
	push	bc
	pop	hl
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	ld	(ix - 29), hl
	ld	hl, (gfy_ClipXMax)
	ld	de, 0
	ld	e, (iy + 7)
	or	a, a
	sbc	hl, de
	ld	(ix - 32), hl
	ld	a, (gfy_ClipYMax)
	ld	de, 0
	push	de
	pop	hl
	ld	l, a
	ld	e, (iy + 6)
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	hl, (ix - 12)
	call	__imulu
	ld	a, (ix - 6)
	ld	de, (ix - 9)
	add	hl, de
	push	hl
	pop	bc
BB7_21:
	ld	hl, (ix - 18)
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	jp	nc, BB7_30
	ld	hl, (ix - 3)
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	push	de
	pop	hl
	jr	c, BB7_24
	ld	hl, (ix - 3)
BB7_24:
	ld	c, a
	ld	iy, (ix - 21)
	ld	(ix - 9), iy
	ld	iy, (ix + 6)
	ld	(ix - 12), hl
BB7_25:
	or	a, a
	sbc	hl, de
	jp	z, BB7_19
	ld	(ix - 33), c
	ld	hl, (iy + 3)
	ld	(ix - 36), hl
	ld	iy, (iy)
	ld	(ix - 26), de
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 36)
	add	hl, de
	ld	iy, (hl)
	ld	de, (ix - 9)
	push	de
	pop	hl
	ld	bc, (ix - 32)
	or	a, a
	sbc	hl, bc
	ld	(ix - 9), de
	jr	nc, BB7_28
	ld	hl, (ix - 18)
	push	hl
	push	de
	push	iy
	call	gfy_Sprite_NoClip
	jr	BB7_29
BB7_28:
	ld	hl, (ix - 18)
	push	hl
	push	de
	push	iy
	call	gfy_Sprite
BB7_29:
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, (ix - 26)
	inc	de
	ld	c, (ix - 33)
	dec	c
	ld	a, c
	or	a, a
	ld	b, (ix - 23)
	ld	hl, (ix - 12)
	jr	nz, BB7_25
	jp	BB7_35
BB7_30:
	ld	hl, (ix - 3)
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	ld	(ix - 12), de
	jr	c, BB7_32
	ld	hl, (ix - 3)
	ld	(ix - 12), hl
BB7_32:
	ld	c, a
	ld	hl, (ix - 21)
	ld	(ix - 9), hl
BB7_33:
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, de
	jp	z, BB7_19
	ld	hl, (iy + 3)
	ld	(ix - 36), hl
	ld	hl, (ix + 6)
	ld	iy, (hl)
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	ld	(ix - 33), c
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	ld	(ix - 26), de
	push	hl
	pop	de
	ld	hl, (ix - 36)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 18)
	push	de
	ld	de, (ix - 9)
	push	de
	push	hl
	call	gfy_Sprite
	ld	c, (ix - 33)
	ld	b, (ix - 23)
	ld	iy, (ix + 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	e, (iy + 7)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, (ix - 26)
	inc	de
	dec	c
	ld	a, c
	or	a, a
	jr	nz, BB7_33
BB7_35:
	ld	hl, (ix - 29)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, 0
	ld	e, (iy + 6)
	ld	hl, (ix - 18)
	add	hl, de
	ld	(ix - 18), hl
	ld	a, (ix - 22)
	inc	a
	ld	(ix - 22), a
	cp	a, b
	ld	bc, (ix - 9)
	ld	a, (ix - 6)
	jp	nz, BB7_21
	jp	BB7_19
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Tilemap_NoClip
gfy_Tilemap_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 23
	ld	sp, hl
	call	gfy_Wait
	ld	de, 0
	push	de
	pop	bc
	ld	iy, (ix + 6)
	ld	c, (iy + 7)
	push	de
	pop	hl
	ld	l, (iy + 13)
	ld	a, (iy + 9)
	ld	(ix - 9), a
	ld	e, a
	ld	(ix - 22), hl
	or	a, a
	sbc	hl, de
	ld	(ix - 12), hl
	ld	hl, (iy + 15)
	ld	(ix - 3), hl
	ld	hl, (ix + 9)
	call	__idivu
	ld	(ix - 18), hl
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	e, (iy + 8)
	ld	a, e
	or	a, a
	jp	z, BB8_6
	ld	iy, (ix + 6)
	ld	a, (iy + 14)
	ld	(ix - 3), a
	ld	a, (iy + 6)
	ld	(ix - 23), e
	ld	bc, 0
	ld	(ix - 19), a
	ld	c, a
	ld	hl, (ix + 12)
	call	__idivu
	ld	d, l
	ld	e, c
	mlt	de
	ld	bc, (ix + 12)
	ld	a, c
	sub	a, e
	ld	c, a
	ld	a, (ix - 3)
	sub	a, c
	ld	e, a
	ld	(ix - 6), de
	ld	bc, (ix - 22)
	call	__imulu
	ld	b, (ix - 23)
	ld	c, 0
	ld	de, (ix - 18)
	add	hl, de
	ld	e, c
	ld	(ix - 3), hl
BB8_2:
	ld	(ix - 18), e
	ld	a, (ix - 9)
	or	a, a
	ld	e, c
	ld	a, c
	ld	hl, (ix - 15)
	jr	z, BB8_5
BB8_3:
	ld	(ix - 9), hl
	ld	(ix - 19), a
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix - 22), hl
	ld	hl, (ix + 6)
	ld	iy, (hl)
	ld	de, (ix - 3)
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 22)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 6)
	push	de
	ld	de, (ix - 9)
	push	de
	push	hl
	call	gfy_Sprite_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 9)
	ld	a, (ix - 19)
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	add	hl, de
	ld	de, (ix - 3)
	inc	de
	ld	(ix - 3), de
	inc	a
	ld	iy, (ix + 6)
	ld	e, (iy + 9)
	cp	a, e
	jr	c, BB8_3
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	a, (iy + 6)
	ld	(ix - 19), a
	ld	b, (iy + 8)
BB8_5:
	ld	(ix - 9), e
	ld	hl, (ix - 12)
	ld	de, (ix - 3)
	add	hl, de
	ld	a, (ix - 19)
	ld	de, (ix - 6)
	add	a, e
	ld	e, a
	ld	(ix - 6), de
	ld	e, (ix - 18)
	inc	e
	ld	a, e
	cp	a, b
	ld	(ix - 3), hl
	ld	a, 0
	ld	c, a
	jp	c, BB8_2
BB8_6:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_TransparentTilemap
gfy_TransparentTilemap:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 36
	ld	sp, hl
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	xor	a, a
	ld	(ix - 20), a
	ld	de, 0
	ld	e, (iy + 7)
	push	de
	pop	bc
	call	__idivu
	ld	(ix - 12), hl
	or	a, a
	sbc	hl, hl
	ld	iy, (ix + 6)
	ld	l, (iy + 6)
	push	hl
	pop	iy
	ld	hl, (ix + 12)
	lea	bc, iy
	call	__idivu
	ld	(ix - 15), hl
	ld	hl, (ix - 12)
	ld	(ix - 9), de
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix - 15)
	ld	(ix - 3), iy
	lea	bc, iy
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, bc
	ld	(ix - 18), hl
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 6), de
	jr	z, BB9_2
	ld	a, 0
	jr	BB9_3
BB9_2:
	ld	a, -1
BB9_3:
	ld	de, (ix - 9)
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	hl, (iy + 15)
	ld	iy, (ix - 6)
	add	iy, de
	bit	0, a
	push	bc
	pop	de
	jr	nz, BB9_5
	lea	de, iy
BB9_5:
	or	a, a
	sbc	hl, de
	ld	(ix - 23), hl
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	c, (iy + 14)
	ld	hl, (ix - 18)
	push	hl
	pop	iy
	ld	de, (ix - 3)
	add	iy, de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, 0
	jr	z, BB9_7
	lea	de, iy
BB9_7:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	iy, (ix + 6)
	ld	l, (iy + 9)
	ld	(ix - 6), l
	bit	0, a
	jr	nz, BB9_12
	ld	hl, (ix + 9)
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	jr	nc, BB9_10
	ld	hl, (ix - 23)
	add	hl, de
	ld	(ix - 23), hl
	or	a, a
	sbc	hl, hl
	jr	BB9_11
BB9_10:
	ld	a, (ix - 6)
	inc	a
	ld	(ix - 6), a
	ld	hl, (ix - 12)
	dec	hl
BB9_11:
	ld	(ix - 12), hl
BB9_12:
	ld	de, (ix - 3)
	ld	iy, (ix + 6)
	ld	a, (iy + 8)
	ld	(ix - 19), a
	ld	hl, (ix - 18)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB9_14
	ld	(ix - 18), bc
	jr	BB9_18
BB9_14:
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, de
	jr	nc, BB9_16
	push	bc
	pop	hl
	add	hl, de
	ld	(ix - 18), hl
	or	a, a
	sbc	hl, hl
	jr	BB9_17
BB9_16:
	ld	(ix - 18), bc
	ld	a, (ix - 19)
	inc	a
	ld	(ix - 19), a
	ld	hl, (ix - 15)
	dec	hl
BB9_17:
	ld	(ix - 15), hl
BB9_18:
	ld	iy, 0
	lea	de, iy
	push	de
	pop	bc
	ld	iy, (ix + 6)
	ld	c, (iy + 13)
	ex	de, hl
	ld	l, (iy + 12)
	call	__imulu
	ld	(ix - 26), hl
	ld	de, 0
	ld	e, (ix - 6)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	(ix - 29), hl
	ld	hl, (gfy_ClipXMax)
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	a, (gfy_ClipYMax)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, (ix - 3)
	sbc	hl, de
	push	hl
	pop	de
	ld	a, (ix - 19)
	or	a, a
	jp	z, BB9_37
	ld	hl, (ix - 15)
	call	__imulu
	ld	bc, (ix - 12)
	add	hl, bc
	push	hl
	pop	bc
	ld	(ix - 3), de
BB9_20:
	ld	hl, (ix - 18)
	or	a, a
	sbc	hl, de
	jp	nc, BB9_30
	ld	a, (ix - 6)
	or	a, a
	jp	z, BB9_36
	ld	hl, (ix - 26)
	or	a, a
	sbc	hl, bc
	push	bc
	pop	hl
	jr	c, BB9_24
	ld	hl, (ix - 26)
BB9_24:
	ld	(ix - 15), hl
	ld	l, (ix - 6)
	ld	de, (ix - 23)
	ld	(ix - 12), de
	ld	de, (ix - 15)
BB9_25:
	ld	(ix - 33), l
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jp	z, BB9_37
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix - 36), hl
	ld	iy, (iy)
	ld	(ix - 32), bc
	add	iy, bc
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 36)
	add	hl, de
	ld	iy, (hl)
	ld	de, (ix - 12)
	push	de
	pop	hl
	ld	bc, (ix - 9)
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), de
	jr	nc, BB9_28
	ld	hl, (ix - 18)
	push	hl
	push	de
	push	iy
	call	gfy_TransparentSprite_NoClip
	jr	BB9_29
BB9_28:
	ld	hl, (ix - 18)
	push	hl
	push	de
	push	iy
	call	gfy_TransparentSprite
BB9_29:
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	ld	hl, (ix - 12)
	add	hl, de
	ld	(ix - 12), hl
	ld	bc, (ix - 32)
	inc	bc
	ld	l, (ix - 33)
	dec	l
	ld	a, l
	or	a, a
	ld	de, (ix - 15)
	jr	nz, BB9_25
	jp	BB9_36
BB9_30:
	ld	a, (ix - 6)
	or	a, a
	jp	z, BB9_36
	ld	hl, (ix - 26)
	or	a, a
	sbc	hl, bc
	ld	(ix - 15), bc
	jr	c, BB9_33
	ld	hl, (ix - 26)
	ld	(ix - 15), hl
BB9_33:
	ld	l, (ix - 6)
	ld	de, (ix - 23)
	ld	(ix - 12), de
BB9_34:
	ld	(ix - 33), l
	ld	hl, (ix - 15)
	or	a, a
	sbc	hl, bc
	jp	z, BB9_37
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix - 36), hl
	ld	hl, (ix + 6)
	ld	iy, (hl)
	add	iy, bc
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	ld	(ix - 32), bc
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 36)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 18)
	push	de
	ld	de, (ix - 12)
	push	de
	push	hl
	call	gfy_TransparentSprite
	ld	bc, (ix - 32)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	ld	hl, (ix - 12)
	add	hl, de
	ld	(ix - 12), hl
	inc	bc
	ld	l, (ix - 33)
	dec	l
	ld	a, l
	or	a, a
	jr	nz, BB9_34
BB9_36:
	ld	iy, (ix - 29)
	lea	hl, iy
	add	hl, bc
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 6)
	ld	iy, (ix - 18)
	add	iy, de
	ld	(ix - 18), iy
	ld	a, (ix - 20)
	inc	a
	ld	(ix - 20), a
	ld	e, (ix - 19)
	cp	a, e
	ld	de, (ix - 3)
	push	hl
	pop	bc
	jp	nz, BB9_20
BB9_37:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_TransparentTilemap_NoClip
gfy_TransparentTilemap_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 22
	ld	sp, hl
	ld	iy, (ix + 6)
	ld	de, 0
	push	de
	pop	bc
	ld	c, (iy + 7)
	push	de
	pop	hl
	ld	l, (iy + 13)
	ld	a, (iy + 9)
	ld	(ix - 6), a
	ld	e, a
	ld	(ix - 16), hl
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	iy, (iy + 15)
	ld	hl, (ix + 9)
	call	__idivu
	ld	(ix - 19), hl
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	lea	hl, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 12), hl
	ld	iy, (ix + 6)
	ld	e, (iy + 8)
	ld	a, e
	or	a, a
	jp	z, BB10_6
	ld	iy, (ix + 6)
	ld	a, (iy + 14)
	ld	(ix - 3), a
	ld	a, (iy + 6)
	ld	(ix - 22), e
	ld	bc, 0
	ld	(ix - 13), a
	ld	c, a
	ld	hl, (ix + 12)
	call	__idivu
	ld	d, l
	ld	e, c
	mlt	de
	ld	bc, (ix + 12)
	ld	a, c
	sub	a, e
	ld	c, a
	ld	a, (ix - 3)
	sub	a, c
	ld	e, a
	ld	(ix - 3), de
	ld	bc, (ix - 16)
	call	__imulu
	push	af
	ld	a, (ix - 22)
	ld	iyh, a
	pop	af
	ld	de, (ix - 19)
	add	hl, de
	ld	b, 0
	ex	de, hl
BB10_2:
	ld	a, (ix - 6)
	or	a, a
	ld	a, 0
	ld	c, a
	ld	hl, (ix - 12)
	jr	z, BB10_5
BB10_3:
	ld	(ix - 6), hl
	ld	(ix - 13), a
	ld	(ix - 16), b
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 3)
	ld	(ix - 22), hl
	ld	iy, (iy)
	ld	(ix - 19), de
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 22)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 3)
	push	de
	ld	de, (ix - 6)
	push	de
	push	hl
	call	gfy_TransparentSprite_NoClip
	ld	b, (ix - 16)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 6)
	ld	a, (ix - 13)
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	add	hl, de
	ld	de, (ix - 19)
	inc	de
	inc	a
	ld	c, (iy + 9)
	cp	a, c
	jr	c, BB10_3
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	a, (iy + 6)
	ld	(ix - 13), a
	ld	a, (iy + 8)
	ld	iyh, a
BB10_5:
	ld	(ix - 6), c
	ld	hl, (ix - 9)
	add	hl, de
	ld	a, (ix - 13)
	ld	de, (ix - 3)
	add	a, e
	ld	e, a
	ld	(ix - 3), de
	inc	b
	ld	a, b
	ld	e, iyh
	cp	a, e
	ex	de, hl
	jp	c, BB10_2
BB10_6:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_GetSprite
gfy_GetSprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 7
	ld	sp, hl
	ld	hl, (ix + 6)
	xor	a, a
	ld	(ix - 4), a
	ld	bc, (-1900524)
	ld	a, (hl)
	or	a, a
	jr	z, BB11_3
	ld	hl, (ix + 12)
	
	push	bc
	pop	iy
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 9)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	lea	hl, iy + 2
	ld	de, 0
	ld	e, (iy + 1)
BB11_2:
	push	de
	ld	de, (ix - 3)
	push	de
	ld	(ix - 7), hl
	push	hl
	call	_memcpy
	ld	iy, (ix + 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	ld	de, 0
	ld	e, (iy + 1)
	ld	hl, (ix - 7)
	add	hl, de
	ld	a, (ix - 4)
	inc	a
	ld	c, (iy)
	ld	(ix - 4), a
	cp	a, c
	jr	c, BB11_2
BB11_3:
	ld	hl, (ix + 6)
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ScaledSprite_NoClip
gfy_ScaledSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 25
	ld	sp, hl
	ld	l, (ix + 15)
	ld	iy, 0
	ld	a, l
	or	a, a
	jp	z, BB12_17
	ld	c, (ix + 18)
	ld	a, c
	or	a, a
	jp	z, BB12_17
	lea	de, iy
	ld	e, l
	ld	(ix - 6), de
	lea	hl, iy
	ld	l, c
	ld	(ix - 9), hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	hl, (ix + 9)
	call	__set_bc_and_mul_hl_by_240
	ld	(ix - 19), hl
	ld	hl, (ix - 6)
	call	__imulu
	ld	(ix - 6), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	or	a, a
	sbc	hl, hl
	ld	(ix - 15), a
	ld	l, a
	ld	bc, (ix - 9)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	ld	iy, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), hl
	ld	l, (iy)
	ld	a, l
	or	a, a
	jr	nz, BB12_5
	ld	a, (ix + 15)
	cp	a, 1
	jp	z, BB12_17
	ld	hl, (-1900524)
	jp	BB12_17
BB12_5:
	ld	de, 0
	ld	e, (ix + 12)
	ld	(ix - 25), de
	ld	iy, (ix - 3)
	add	iy, de
	ld	de, (ix - 19)
	add	iy, de
	lea	bc, iy
	ld	iy, (ix + 6)
	lea	de, iy + 2
	ld	(ix - 6), de
	ld	a, (ix + 18)
	dec	a
	ld	iy, 0
	ld	iyl, a
	ld	(ix - 22), iy
	push	af
	ld	a, (ix - 15)
	ld	iyl, a
	pop	af
	ld	iyh, iyl
	ld	d, 0
	ld	a, d
BB12_6:
	ld	(ix - 15), a
	ld	a, iyl
	or	a, a
	ld	iyl, d
	ld	a, d
	jr	z, BB12_9
BB12_7:
	ld	(ix - 16), a
	ld	hl, (ix - 6)
	ld	a, (hl)
	ld	hl, (ix - 9)
	push	hl
	ld	l, a
	push	hl
	ld	(ix - 3), bc
	push	bc
	call	_memset
	ld	a, (ix - 16)
	ld	iy, (ix + 6)
	ld	d, 0
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	bc, (ix - 22)
	ld	hl, (ix - 3)
	add	hl, bc
	inc	hl
	push	hl
	pop	bc
	inc	a
	ld	l, (iy + 1)
	ex	de, hl
	ld	iyh, e
	ex	de, hl
	cp	a, l
	jr	c, BB12_7
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	iyl, iyh
BB12_9:
	ld	e, l
	push	bc
	pop	hl
	ld	bc, (ix - 12)
	add	hl, bc
	push	hl
	pop	bc
	ld	l, e
	ld	a, (ix - 15)
	inc	a
	cp	a, l
	jr	c, BB12_6
	ld	a, (ix + 15)
	cp	a, 1
	jp	z, BB12_17
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, iyh
	ex	de, hl
	ld	bc, (ix - 9)
	call	__imulu
	ld	bc, (ix - 25)
	ld	(ix - 9), hl
	ld	a, e
	ld	e, (ix + 15)
	ld	iyl, a
	or	a, a
	jr	z, BB12_17
	ld	hl, (ix - 3)
	add	hl, bc
	ld	bc, (ix - 19)
	add	hl, bc
	ld	a, e
	dec	a
	ld	(ix - 16), a
	push	hl
	pop	bc
BB12_13:
	ld	(ix - 3), bc
	ld	bc, 240
	add	hl, bc
	ld	a, e
	cp	a, 2
	ld	a, (ix - 16)
	ld	(ix - 6), a
	push	hl
	pop	bc
	jr	c, BB12_16
BB12_14:
	ld	(ix - 12), d
	ld	hl, (ix - 9)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 15), bc
	push	bc
	call	_memcpy
	ld	iy, (ix + 6)
	ld	d, (ix - 12)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	e, (ix + 15)
	ld	bc, 240
	ld	hl, (ix - 15)
	add	hl, bc
	push	hl
	pop	bc
	ld	a, (ix - 6)
	dec	a
	ld	(ix - 6), a
	or	a, a
	jr	nz, BB12_14
	ld	a, (iy)
	ld	iyl, a
BB12_16:
	inc	d
	ld	a, d
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	cp	a, l
	push	bc
	pop	hl
	jr	c, BB12_13
BB12_17:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ScaledTransparentSprite_NoClip
gfy_ScaledTransparentSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 19
	ld	sp, hl
	ld	a, (ix + 15)
	or	a, a
	jp	z, BB13_13
	ld	e, (ix + 18)
	ld	a, e
	or	a, a
	jp	z, BB13_13
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	(ix - 7), hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	or	a, a
	sbc	hl, hl
	ld	(ix - 4), a
	ld	l, a
	ld	bc, (ix - 7)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, 240
	push	hl
	pop	de
	or	a, a
	sbc	hl, bc
	ld	c, (ix + 18)
	ld	(ix - 14), hl
	ld	hl, (ix + 6)
	ld	a, (hl)
	or	a, a
	jp	z, BB13_13
	ld	hl, (ix + 9)
	ld	a, c
	ld	bc, 0
	ld	c, (ix + 12)
	ld	iy, (ix - 3)
	add	iy, bc
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	lea	iy, iy + 2
	dec	a
	or	a, a
	sbc	hl, hl
	ld	l, a
	inc	hl
	ld	(ix - 19), hl
	xor	a, a
BB13_4:
	ld	(ix - 15), a
	ld	l, (ix - 4)
	ld	c, 0
BB13_5:
	ld	a, l
	or	a, a
	ld	(ix - 8), c
	jr	nz, BB13_7
	xor	a, a
	ld	l, a
	jr	BB13_11
BB13_7:
	ld	a, (gfy_Transparent_Color)
	ld	d, a
	ld	e, 0
BB13_8:
	ld	a, (iy)
	cp	a, d
	ld	bc, (ix - 7)
	lea	hl, iy
	jr	z, BB13_10
	ld	(ix - 11), hl
	ld	hl, (ix - 7)
	push	hl
	ld	l, a
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 16), e
	call	_memset
	ld	e, (ix - 16)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 11)
	ld	a, (gfy_Transparent_Color)
	ld	d, a
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	(ix - 4), a
	ld	bc, (ix - 19)
BB13_10:
	inc	hl
	push	hl
	pop	iy
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	inc	e
	ld	a, e
	ld	l, (ix - 4)
	cp	a, l
	jr	c, BB13_8
BB13_11:
	ld	(ix - 11), l
	ld	bc, 0
	ld	c, l
	ld	hl, (ix - 3)
	ld	de, (ix - 14)
	add	hl, de
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	sbc	hl, bc
	push	hl
	pop	bc
	add	iy, bc
	ld	c, (ix - 8)
	inc	c
	ld	a, c
	ld	l, (ix + 15)
	cp	a, l
	ld	l, (ix - 11)
	jp	nz, BB13_5
	ld	bc, 0
	ld	c, (ix - 4)
	add	iy, bc
	ld	a, (ix - 15)
	inc	a
	ld	hl, (ix + 6)
	ld	l, (hl)
	cp	a, l
	jp	c, BB13_4
BB13_13:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_FloodFill
gfy_FloodFill:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 41
	ld	sp, hl
	ld	bc, (ix + 6)
	ld	iy, (gfy_ClipXMin)
	ld	de, -8388608
	ld	(ix - 6), iy
	add	iy, de
	push	bc
	pop	hl
	add	hl, de
	push	hl
	pop	de
	ld	(ix - 3), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	c, BB14_39
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 9), iy
	ld	bc, -8388608
	add	iy, bc
	ex	de, hl
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB14_39
	ld	c, (ix + 9)
	ld	a, (gfy_ClipYMin)
	ld	l, a
	ld	a, c
	ld	(ix - 13), l
	cp	a, l
	jp	c, BB14_39
	ld	a, (gfy_ClipYMax)
	ld	l, a
	ld	a, c
	ld	(ix - 17), l
	cp	a, l
	jp	nc, BB14_39
	ld	a, c
	ld	bc, 240
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, a
	ld	iy, (-1900524)
	ld	hl, (ix + 6)
	call	__imulu
	add	hl, de
	push	hl
	pop	bc
	ld	(ix - 20), iy
	lea	hl, iy
	add	hl, bc
	ld	c, a
	ld	a, (hl)
	ld	(ix - 21), a
	ld	l, (ix + 12)
	cp	a, l
	jp	z, BB14_39
	ld	a, c
	ld	bc, 3072
	ld	hl, 0
	add	hl, sp
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	sp, iy
	ld	hl, (ix + 6)
	ld	(iy), l
	ld	(iy + 1), h
	ld	(ix - 28), iy
	ld	(iy + 2), a
	ld	l, (ix - 17)
	dec	l
	ld	(ix - 17), l
	ld	iy, (ix - 6)
	lea	hl, iy
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	hl, (ix - 20)
	add	hl, bc
	ld	(ix - 34), hl
	ld	bc, 1
	dec	iy
	ld	(ix - 6), iy
	ld	hl, (ix - 9)
	dec	hl
	ld	(ix - 9), hl
BB14_6:
	dec	bc
	ld	(ix - 24), bc
	push	bc
	pop	hl
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (iy)
	ld	a, (iy + 2)
	ld	bc, 0
	push	bc
	pop	iy
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	push	bc
	pop	de
	ld	(ix - 25), a
	ld	e, a
	lea	hl, iy
	call	__set_bc_and_mul_hl_by_240
	ld	(ix - 31), de
	add	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 20)
	add	hl, bc
	ld	(ix - 16), hl
	lea	hl, iy
	ld	de, -8388608
	add	hl, de
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	c, BB14_11
	ld	hl, (ix - 34)
	ld	de, (ix - 31)
	add	hl, de
	ld	de, -240
	add	hl, de
	ld	(ix - 31), hl
	ld	hl, (ix - 16)
BB14_8:
	ld	(ix - 16), hl
	ld	a, (hl)
	ld	l, (ix - 21)
	cp	a, l
	ld	bc, -8388608
	jr	nz, BB14_12
	dec	iy
	ld	de, -240
	ld	hl, (ix - 16)
	add	hl, de
	ex	de, hl
	lea	hl, iy
	inc	hl
	add	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	ex	de, hl
	jr	c, BB14_8
	ld	hl, (ix - 31)
	ld	(ix - 16), hl
	ld	iy, (ix - 6)
BB14_11:
	ld	bc, -8388608
BB14_12:
	ld	de, (ix - 9)
	lea	hl, iy
	inc	hl
	add	hl, bc
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	jp	nc, BB14_37
	ld	a, (ix - 25)
	ld	l, a
	dec	l
	ld	(ix - 37), l
	inc	a
	ld	(ix - 38), a
	ex	de, hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 31), hl
	inc.sis	de
	ld	bc, 241
	ld	iy, (ix - 16)
	add	iy, bc
	xor	a, a
	ld	(ix - 35), a
	ld	(ix - 36), a
	ld	bc, (ix - 24)
BB14_14:
	ld	a, (iy - 1)
	ld	l, (ix - 21)
	cp	a, l
	jp	nz, BB14_38
	ld	(ix - 41), de
	ld	(ix - 16), iy
	push	bc
	pop	hl
	ld	de, 1022
	or	a, a
	sbc	hl, de
	jp	nc, BB14_38
	ld	a, (ix + 12)
	ld	iy, (ix - 16)
	ld	(iy - 1), a
	ld	a, (ix - 13)
	ld	l, (ix - 25)
	cp	a, l
	ld	(ix - 24), bc
	jr	nc, BB14_20
	ld	l, (iy - 2)
	ld	a, (ix - 35)
	and	a, 1
	ld	c, a
	bit	0, c
	jr	nz, BB14_21
	ld	a, l
	ld	h, (ix - 21)
	cp	a, h
	jr	nz, BB14_21
	ld	hl, (ix - 24)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (ix - 41)
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (ix - 37)
	ld	(iy + 2), a
	ld	de, (ix - 9)
	ld	hl, (ix - 24)
	inc	hl
	ld	(ix - 24), hl
	ld	a, 1
	jr	BB14_25
BB14_20:
	ld	bc, 240
	ld	de, (ix - 9)
	jr	BB14_27
BB14_21:
	ld	a, c
	xor	a, 1
	ld	c, a
	ld	a, l
	ld	l, (ix - 21)
	cp	a, l
	ld	l, -1
	jr	z, BB14_23
	ld	l, 0
BB14_23:
	ld	a, c
	or	a, l
	bit	0, a
	ld	de, (ix - 9)
	jr	nz, BB14_26
	xor	a, a
BB14_25:
	ld	(ix - 35), a
BB14_26:
	ld	bc, 240
BB14_27:
	ld	a, (ix - 25)
	ld	l, (ix - 17)
	cp	a, l
	jr	nc, BB14_36
	ld	hl, (ix - 16)
	ld	l, (hl)
	ld	a, (ix - 36)
	and	a, 1
	ld	c, a
	bit	0, c
	jr	nz, BB14_31
	ld	a, l
	ld	h, (ix - 21)
	cp	a, h
	jr	nz, BB14_31
	ld	de, (ix - 24)
	push	de
	pop	hl
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (ix - 41)
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (ix - 38)
	ld	(iy + 2), a
	inc	de
	ld	(ix - 24), de
	ld	a, 1
	jr	BB14_34
BB14_31:
	ld	a, c
	xor	a, 1
	ld	c, a
	ld	a, l
	ld	l, (ix - 21)
	cp	a, l
	ld	l, -1
	jr	z, BB14_33
	ld	l, 0
BB14_33:
	ld	a, c
	or	a, l
	bit	0, a
	ld	a, 0
	jr	nz, BB14_35
BB14_34:
	ld	(ix - 36), a
BB14_35:
	ld	bc, 240
BB14_36:
	ld	hl, (ix - 31)
	dec	hl
	ld	de, (ix - 41)
	inc.sis	de
	ld	iy, (ix - 16)
	add	iy, bc
	ld	(ix - 31), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, (ix - 24)
	jp	nz, BB14_14
	jr	BB14_38
BB14_37:
	ld	bc, (ix - 24)
BB14_38:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, (ix - 9)
	jp	nz, BB14_6
BB14_39:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_RLETSprite
gfy_RLETSprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 27
	ld	sp, hl
	ld	hl, (ix + 9)
	ld	iy, (gfy_ClipXMax)
	ld	de, -8388608
	add	iy, de
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB15_40
	ld	a, (gfy_ClipYMax)
	or	a, a
	sbc	hl, hl
	lea	bc, iy
	push	hl
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix + 12)
	add	hl, de
	ld	(ix - 3), hl
	ld	(ix - 6), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB15_40
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	a, l
	or	a, a
	jp	z, BB15_40
	ld	iy, (ix + 6)
	ld	e, (iy + 1)
	ld	a, e
	or	a, a
	jp	z, BB15_40
	ld	(ix - 9), e
	ld	a, l
	ld	(ix - 12), bc
	ld	iy, (gfy_ClipXMin)
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 9)
	ld	de, -8388608
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB15_8
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	l, a
	ld	(ix - 15), hl
	push	bc
	pop	hl
	ld	l, (ix - 9)
	ld	(ix - 9), hl
	ld	a, (gfy_ClipYMin)
	ld	c, a
	ld	(ix - 18), bc
	ld	de, (ix + 9)
	ld	hl, (ix - 15)
	add	hl, de
	push	hl
	pop	bc
	ld	de, (ix + 12)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, -8388608
	ld	hl, (ix - 18)
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, de
	jr	c, BB15_8
	ld	de, -8388608
	push	bc
	pop	iy
	add	iy, de
	ld	hl, (ix - 12)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	c, BB15_8
	ld	de, -8388608
	ld	iy, (ix - 9)
	add	iy, de
	ld	hl, (ix - 6)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB15_41
BB15_8:
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	de, 0
	ld	(ix - 6), a
	ld	e, a
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 18), hl
	ld	a, (iy)
	ld	(ix - 12), a
	or	a, a
	ld	hl, (ix + 9)
	jp	z, BB15_40
	call	__set_bc_and_mul_hl_by_240
	ld	bc, (ix + 9)
	ld	de, (ix + 12)
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	lea	hl, iy + 2
	ld	(ix - 21), hl
	ld	a, (ix - 6)
	ld	iy, 0
BB15_10:
	ld	(ix - 15), iy
	add	iy, bc
	ld	bc, (gfy_ClipXMin)
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 9), hl
	ld	de, -8388608
	push	bc
	pop	hl
	add	hl, de
	push	hl
	pop	bc
	add	iy, de
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB15_14
	ld	hl, (ix - 9)
	add	hl, de
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB15_14
	ld	e, a
	or	a, a
	jr	nz, BB15_20
	xor	a, a
	sbc	hl, hl
	ld	iy, (ix - 3)
	jp	BB15_38
BB15_14:
	ld	hl, (ix - 9)
	add	hl, de
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB15_40
	ld	e, a
	or	a, a
	sbc	hl, hl
	or	a, a
	jr	nz, BB15_17
	ld	a, e
	jp	BB15_34
BB15_17:
	push	hl
	pop	bc
	ld	c, e
	ld	(ix - 9), bc
	ld	iy, 0
	ld	a, e
BB15_18:
	push	hl
	pop	bc
	ld	hl, (ix - 21)
	push	hl
	pop	de
	ld	c, (hl)
	add	iy, bc
	lea	hl, iy
	ld	bc, (ix - 9)
	or	a, a
	sbc	hl, bc
	jp	nc, BB15_33
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 27), bc
	ex	de, hl
	ld	de, (ix - 27)
	ld	(ix - 24), iy
	push	hl
	pop	iy
	ld	e, (iy + 1)
	add	hl, de
	push	hl
	pop	iy
	lea	iy, iy + 2
	ld	(ix - 21), iy
	ld	iy, (ix - 24)
	add	iy, de
	lea	hl, iy
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	push	bc
	pop	hl
	jr	c, BB15_18
	jp	BB15_34
BB15_20:
	ld	hl, (ix - 21)
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	iy, (ix - 3)
	add	iy, bc
	cp	a, e
	jp	nc, BB15_35
	ld	(ix - 12), bc
	ld	hl, (ix - 21)
	ld	(ix - 9), hl
	ld	e, (ix - 6)
BB15_22:
	ld	(ix - 3), iy
	ld	bc, (ix - 9)
	push	bc
	pop	iy
	lea	hl, iy + 2
	ld	c, (iy + 1)
	ld	a, c
	or	a, a
	jr	nz, BB15_24
	ld	(ix - 9), hl
	or	a, a
	sbc	hl, hl
	ld	a, e
	ld	iy, (ix - 3)
	jr	BB15_31
BB15_24:
	ld	a, (gfy_ClipYMin)
	ld	(ix - 21), a
	ld	(ix - 9), hl
	ld	hl, (ix - 12)
	ld	(ix - 6), hl
	ld	iy, (ix - 3)
BB15_25:
	ld	(ix - 12), c
	ld	hl, (ix + 12)
	ld	de, (ix - 6)
	add	hl, de
	ld	(ix - 3), hl
	ld	bc, 0
	ld	c, (ix - 21)
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	nc, BB15_27
	ld	c, (ix - 12)
	jr	BB15_29
BB15_27:
	ld	a, (gfy_ClipYMax)
	ld	bc, 0
	ld	c, a
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	ld	c, (ix - 12)
	jr	nc, BB15_29
	ld	hl, (ix - 9)
	ld	a, (hl)
	ld	(iy), a
	ld	a, (gfy_ClipYMin)
	ld	(ix - 21), a
BB15_29:
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 9), hl
	inc	de
	ld	(ix - 6), de
	inc	iy
	dec	c
	ld	a, c
	or	a, a
	ld	hl, 0
	jr	nz, BB15_25
	lea	de, iy
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	push	de
	pop	iy
	ld	de, (ix - 6)
	ld	(ix - 12), de
BB15_31:
	push	hl
	pop	bc
	ld	c, a
	ex	de, hl
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, bc
	jr	nc, BB15_36
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 21), hl
	ld	(ix - 3), de
	ld	de, (ix - 3)
	ld	hl, (ix - 9)
	ld	e, (hl)
	ld	(ix - 3), de
	ld	hl, (ix - 12)
	ld	de, (ix - 3)
	add	hl, de
	ld	de, (ix - 3)
	add	iy, de
	ld	(ix - 12), hl
	or	a, a
	sbc	hl, bc
	ld	c, a
	ld	hl, 0
	ld	e, a
	jr	nc, BB15_37
	jp	BB15_22
BB15_33:
	inc	de
	ld	(ix - 21), de
	or	a, a
	sbc	hl, hl
BB15_34:
	ld	bc, 240
	ex	de, hl
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	ex	de, hl
	jr	BB15_39
BB15_35:
	ld	c, e
	ld	de, (ix - 21)
	inc	de
	ld	(ix - 21), de
	ld	e, (ix - 6)
	jr	BB15_37
BB15_36:
	ld	c, a
	ld	hl, (ix - 9)
	ld	(ix - 21), hl
	ex	de, hl
	ld	e, a
BB15_37:
	ld	(ix - 6), e
	ex	de, hl
	ld	hl, (ix + 6)
	ld	a, (hl)
	ex	de, hl
	ld	(ix - 12), a
	ld	a, c
BB15_38:
	ld	bc, (ix - 18)
	add	iy, bc
	ld	(ix - 3), iy
BB15_39:
	ld	iy, (ix - 15)
	inc	iy
	push	hl
	pop	bc
	ld	c, (ix - 12)
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ld	bc, (ix + 9)
	jp	c, BB15_10
BB15_40:
	ld	sp, ix
	pop	ix
	ret
BB15_41:
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	de, 0
	ld	(ix - 12), a
	ld	e, a
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	a, (iy)
	ld	(ix - 9), a
	or	a, a
	ld	hl, (ix + 9)
	jr	z, BB15_40
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	ld	hl, (ix + 12)
	ld	bc, 255
	inc	hl
	dec.s	hl
	ld	h, b
	add	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	ld	c, 0
	ld	a, c
	ld	iy, (ix + 6)
	lea	bc, iy + 2
	ld	iyl, a
	ld	(ix - 6), bc
	ld	d, (ix - 12)
	ld	e, iyl
BB15_43:
	ld	a, d
	or	a, a
	jr	nz, BB15_45
	ld	d, iyl
	jp	BB15_58
BB15_45:
	ld	iy, (ix - 6)
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	cp	a, d
	jp	nc, BB15_56
	ld	(ix - 21), e
	ld	(ix - 9), bc
	ld	(ix - 6), iy
BB15_47:
	ld	iy, (ix - 6)
	lea	hl, iy + 2
	ld	(ix - 18), hl
	ld	d, (iy + 1)
	ld	bc, 0
	ld	c, d
	ld	hl, (ix - 9)
	add	hl, bc
	ld	(ix - 9), hl
	ld	a, d
	or	a, a
	jr	nz, BB15_49
	ld	hl, (ix - 18)
	ld	(ix - 6), hl
	ld	d, (ix - 12)
	ld	e, (ix - 21)
	jr	BB15_52
BB15_49:
	ld	e, (ix - 21)
	ld	hl, (ix - 18)
BB15_50:
	ld	a, (hl)
	inc	hl
	ld	iy, (ix - 3)
	ld	(iy), a
	inc	iy
	ld	(ix - 3), iy
	dec	d
	ld	a, d
	or	a, a
	jr	nz, BB15_50
	ld	(ix - 6), hl
	ld	iy, (ix + 6)
	ld	d, (iy + 1)
BB15_52:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, d
	ld	iy, (ix - 9)
	lea	hl, iy
	sbc	hl, bc
	ld	(ix - 12), d
	jr	nc, BB15_55
	or	a, a
	sbc	hl, hl
	ld	(ix - 18), hl
	ld	hl, (ix - 18)
	ld	iy, (ix - 6)
	ld	l, (iy)
	ld	(ix - 18), hl
	ld	de, (ix - 18)
	ld	hl, (ix - 9)
	add	hl, de
	push	hl
	pop	iy
	ld	hl, (ix - 3)
	ld	de, (ix - 18)
	add	hl, de
	ld	(ix - 3), hl
	lea	hl, iy
	ld	(ix - 9), hl
	or	a, a
	sbc	hl, bc
	jp	c, BB15_47
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	d, (ix - 12)
	ld	e, (ix - 21)
BB15_55:
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	(ix - 9), l
	jr	BB15_57
BB15_56:
	inc	iy
	ld	(ix - 6), iy
BB15_57:
	ld	c, 0
	ld	iyl, c
BB15_58:
	ld	bc, (ix - 15)
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	inc	e
	ld	a, e
	ld	l, (ix - 9)
	cp	a, l
	jp	c, BB15_43
	jp	BB15_40
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_RLETSprite_NoClip
gfy_RLETSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 20
	ld	sp, hl
	call	gfy_Wait
	ld	bc, (-1900524)
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	de, 0
	ld	(ix - 7), a
	ld	e, a
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 6), hl
	ld	hl, (ix + 6)
	ld	d, (hl)
	ld	a, d
	or	a, a
	jp	z, BB16_17
	push	bc
	pop	iy
	ld	hl, (ix + 9)
	ld	a, (ix + 12)
	call	__set_bc_and_mul_hl_by_240
	ld	bc, 0
	ld	c, a
	add	hl, bc
	push	hl
	pop	bc
	lea	hl, iy
	add	hl, bc
	ld	iy, (ix + 6)
	lea	bc, iy + 2
	ld	(ix - 13), bc
	push	af
	ld	a, (ix - 7)
	ld	iyl, a
	pop	af
	ld	e, 0
BB16_2:
	ld	a, iyl
	or	a, a
	jr	nz, BB16_4
	ld	iyl, 0
	jp	BB16_16
BB16_4:
	ld	d, iyl
	ld	iy, (ix - 13)
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	add	hl, bc
	ld	(ix - 3), hl
	ld	(ix - 16), d
	cp	a, d
	jp	nc, BB16_13
	ld	(ix - 10), bc
BB16_6:
	lea	hl, iy + 2
	ld	(ix - 13), hl
	ld	d, (iy + 1)
	ld	bc, 0
	ld	c, d
	ld	iy, (ix - 10)
	add	iy, bc
	ld	(ix - 10), iy
	ld	a, d
	or	a, a
	jr	nz, BB16_8
	ld	hl, (ix - 13)
	ld	(ix - 19), hl
	ld	a, (ix - 7)
	jr	BB16_11
BB16_8:
	ld	hl, (ix - 13)
BB16_9:
	ld	a, (hl)
	inc	hl
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	ld	(iy), a
	inc	bc
	ld	(ix - 3), bc
	dec	d
	ld	a, d
	or	a, a
	jr	nz, BB16_9
	ld	(ix - 19), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
BB16_11:
	ld	iy, 0
	lea	bc, iy
	ld	c, a
	ld	hl, (ix - 10)
	or	a, a
	sbc	hl, bc
	ld	(ix - 7), a
	jr	nc, BB16_14
	ld	hl, (ix - 19)
	inc	hl
	ld	(ix - 13), hl
	ld	(ix - 16), iy
	ld	iy, (ix - 19)
	ld	hl, (ix - 16)
	ld	l, (iy)
	ld	(ix - 16), hl
	ld	(ix - 20), e
	ld	de, (ix - 16)
	ld	hl, (ix - 10)
	add	hl, de
	ld	(ix - 10), hl
	ld	hl, (ix - 3)
	ld	de, (ix - 16)
	add	hl, de
	ld	e, (ix - 20)
	ld	(ix - 3), hl
	ld	hl, (ix - 10)
	or	a, a
	sbc	hl, bc
	ld	(ix - 16), a
	jr	nc, BB16_15
	jp	BB16_6
BB16_13:
	inc	iy
	ld	(ix - 13), iy
	jr	BB16_15
BB16_14:
	ld	(ix - 16), a
	ld	hl, (ix - 19)
	ld	(ix - 13), hl
BB16_15:
	ld	hl, (ix + 6)
	ld	d, (hl)
	ld	hl, (ix - 3)
	push	af
	ld	a, (ix - 16)
	ld	iyl, a
	pop	af
BB16_16:
	ld	bc, (ix - 6)
	add	hl, bc
	inc	e
	ld	a, e
	cp	a, d
	jp	c, BB16_2
BB16_17:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_CopyRectangle
gfy_CopyRectangle:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 18
	ld	sp, hl
	sbc	hl, hl
	ld	(ix - 3), hl
	call	gfy_Wait
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, -1900528
	push	hl
	pop	de
	jr	z, BB17_2
	ld	hl, -1900524
BB17_2:
	ld	a, (ix + 21)
	ld	bc, 240
	ld	iy, (hl)
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ex	de, hl
	jr	z, BB17_4
	ld	hl, -1900524
BB17_4:
	ld	hl, (hl)
	ld	(ix - 6), hl
	ld	de, 0
	ld	e, (ix + 15)
	ld	hl, (ix + 12)
	call	__imulu
	push	de
	pop	bc
	add	hl, bc
	ex	de, hl
	add	iy, de
	ld	c, a
	push	bc
	pop	de
	ld	hl, (ix + 18)
	call	__set_bc_and_mul_hl_by_240
	push	de
	pop	bc
	add	hl, bc
	ex	de, hl
	ld	hl, (ix - 6)
	add	hl, de
	ex	de, hl
	ld	c, (ix + 27)
	ld	hl, 240
	ld	(ix - 9), bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), hl
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jr	nz, BB17_8
	ld	hl, (ix + 24)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	jp	z, BB17_12
	ld	hl, (ix - 12)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	lea	hl, iy
BB17_7:
	ld	(ix - 15), bc
	ld	de, (ix - 9)
	add	hl, de
	ld	bc, -240
	add	hl, bc
	ld	(ix - 6), hl
	push	de
	push	hl
	push	hl
	call	_memmove
	ld	bc, (ix - 15)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	dec	bc
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, (ix - 6)
	push	hl
	pop	iy
	jr	nz, BB17_7
	jr	BB17_9
BB17_8:
	ex	de, hl
BB17_9:
	ld	(ix - 6), hl
	ld	hl, (ix + 24)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB17_12
	ld	(ix - 15), iy
BB17_11:
	ld	(ix - 18), hl
	ld	de, (ix - 3)
	ld	iy, (ix - 15)
	add	iy, de
	ld	hl, (ix - 6)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	iy
	push	hl
	call	_memcpy
	ld	hl, (ix - 18)
	ld	iy, 9
	add	iy, sp
	ld	sp, iy
	ld	bc, (ix - 15)
	dec	hl
	ld	de, (ix - 12)
	ld	iy, (ix - 3)
	add	iy, de
	ld	(ix - 3), iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB17_11
BB17_12:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 51b05c1c99dbd61fce7daf56414f212f15b2171a)"
;	extern	gfy_internal_Begin
;	extern	__Unwind_SjLj_Register
;	extern	gfy_Transparent_Color
;	extern	lcd_SendCommand1
;	extern	gfy_TransparentSprite
;	extern	gfy_Wait
;	extern	gfy_ClipXMin
;	extern	_memcpy
;	extern	__ishl
;	extern	gfy_internal_End
;	extern	__idivu
;	extern	lcd_SendSizedCommandWords
;	extern	__iand
;	extern	gfy_Sprite_NoClip
;	extern	__ixor
;	extern	gfy_ClipYMin
;	extern	gfy_TransparentSprite_NoClip
;	extern	_memset
;	extern	_memmove
;	extern	gfy_Color
;	extern	lcd_Init
;	extern	gfy_ClipXMax
;	extern	__Unwind_SjLj_Unregister
;	extern	lcd_Cleanup
;	extern	gfy_Sprite
;	extern	__imulu
;	extern	gfy_ClipYMax
