;	section	.text,"ax",@progbits
;	assume	adl = 1
;	section	.text,"ax",@progbits
;	public	gfy_Begin
gfy_Begin:
	call	lcd_Init
	call	gfy_internal_Begin
	ld	hl, 40
	push	hl
	ld	hl, 54
	push	hl
	call	lcd_SendCommand1
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 239
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 554
	push	hl
	call	lcd_SendCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 319
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 555
	push	hl
	call	lcd_SendCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	jp	lcd_Cleanup
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_End
gfy_End:
	call	lcd_Init
	ld	hl, 8
	push	hl
	ld	hl, 54
	push	hl
	call	lcd_SendCommand1
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 319
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 554
	push	hl
	call	lcd_SendCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 239
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 555
	push	hl
	call	lcd_SendCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	call	lcd_Cleanup
	jp	gfy_internal_End
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_PrintChar
gfy_PrintChar:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 26
	ld	sp, hl
	ld	a, (gfy_TextWidthScale)
	ld	e, a
	ld	a, (gfy_TextHeightScale)
	ld	l, a
	ld	a, e
	or	a, a
	jp	z, BB2_43
	ld	a, l
	or	a, a
	jp	z, BB2_43
	ld	a, -128
	ld	(ix - 4), a
	call	gfy_Wait
	ld	l, (ix + 6)
	push	hl
	call	gfy_GetCharWidth
	pop	de
	ld	a, (gfy_TextWidthScale)
	ld	d, a
	ld	bc, 0
	ld	c, d
	ld	(ix - 17), bc
	call	__idivu
	ld	e, l
	ld	(ix - 7), de
	ld	bc, 255
	inc.s	hl
	dec	hl
	ld	h, b
	ld	(ix - 14), hl
	ld	a, (gfy_TextHeightScale)
	ld	(ix - 11), a
	ld	b, 3
	add	a, a
	add	a, a
	add	a, a
	ld	(ix - 3), a
	ld	a, (gfy_PrintChar_Clip)
	ld	hl, (gfy_TextXPos)
	ld	(ix - 10), hl
	cp	a, 2
	jp	z, BB2_26
	ld	hl, (ix - 10)
	ld	iy, (gfy_ClipXMin)
	ld	bc, -8388608
	add	iy, bc
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB2_26
	ld	hl, (gfy_TextYPos)
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	ld	iyl, a
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 20), hl
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB2_26
	ld	hl, (ix - 7)
	mlt	hl
	ld	bc, 0
	ld	c, l
	ld	iy, (ix - 10)
	add	iy, bc
	ld	hl, (gfy_ClipXMax)
	ld	de, -8388608
	add	iy, de
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB2_26
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, (ix - 3)
	ld	iy, (ix - 20)
	add	iy, bc
	ld	a, (gfy_ClipYMax)
	ld	l, a
	ld	de, -8388608
	add	iy, de
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB2_26
	ld	hl, (-1900524)
	ld	(ix - 25), hl
	ld	de, (ix - 14)
	push	de
	pop	hl
	ld	bc, (ix - 17)
	call	__imulu
	push	de
	pop	bc
	push	hl
	pop	de
	ld	hl, (ix - 10)
	add	hl, de
	ld	(gfy_TextXPos), hl
	ld	a, c
	or	a, a
	jp	z, BB2_43
	ld	iy, (gfy_TextData)
	ld	hl, (ix - 10)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	ld	hl, (ix - 20)
	add	hl, de
	ld	(ix - 20), hl
	or	a, a
	sbc	hl, hl
	ld	l, (ix + 6)
	ld	c, 3
	add	hl, hl
	add	hl, hl
	add	hl, hl
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 7)
	ld	a, (ix - 11)
	ld	(ix - 22), a
	ld	a, d
	or	a, a
	sbc	hl, hl
	ld	(ix - 10), hl
BB2_9:
	or	a, a
	jr	nz, BB2_11
	xor	a, a
	jp	BB2_25
BB2_11:
	ld	a, (gfy_FontHeight)
	ld	c, a
	ld	(ix - 17), c
	ld	l, 0
BB2_12:
	ld	(ix - 21), l
	ld	(ix - 7), de
	ld	a, c
	or	a, a
	ld	e, 0
	ld	c, e
	ld	hl, (ix - 20)
	ld	(ix - 3), hl
	jp	z, BB2_24
BB2_13:
	ld	a, (iy)
	and	a, (ix - 4)
	ld	c, a
	ld	a, (gfy_Text_BG_Color)
	ld	h, a
	ld	a, (gfy_Text_FG_Color)
	ld	l, a
	ld	a, c
	or	a, a
	jr	z, BB2_15
	ld	h, l
BB2_15:
	ld	a, (gfy_Text_TP_Color)
	ld	l, a
	ld	a, h
	cp	a, l
	jr	nz, BB2_17
	ld	bc, 0
	ld	a, (ix - 11)
	ld	c, a
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	ld	l, a
	jr	BB2_22
BB2_17:
	ld	(ix - 26), h
	ld	a, (ix - 22)
	or	a, a
	ld	a, 0
	ld	l, a
	ld	bc, (ix - 3)
	jr	z, BB2_22
BB2_18:
	ld	(ix - 3), a
	ld	(ix - 7), e
	push	bc
	pop	hl
	ld	de, 76800
	or	a, a
	sbc	hl, de
	jr	nc, BB2_20
	ld	hl, (ix - 25)
	add	hl, bc
	ld	a, (ix - 26)
	ld	(hl), a
	ld	a, (gfy_TextHeightScale)
	ld	(ix - 11), a
BB2_20:
	inc	bc
	ld	a, (ix - 3)
	inc	a
	ld	l, (ix - 11)
	cp	a, l
	ld	e, (ix - 7)
	jr	c, BB2_18
	ld	a, (gfy_FontHeight)
	ld	(ix - 17), a
	ld	l, (ix - 11)
	ld	(ix - 3), bc
BB2_22:
	ld	(ix - 22), l
	inc	iy
	inc	e
	ld	a, e
	ld	l, (ix - 17)
	cp	a, l
	jp	c, BB2_13
	ld	a, (gfy_TextWidthScale)
	ld	h, a
	ld	(ix - 7), hl
	ld	c, (ix - 17)
BB2_24:
	ld	de, 0
	ld	e, c
	ld	a, c
	ld	bc, 240
	ld	hl, (ix - 20)
	add	hl, bc
	ld	c, a
	ld	(ix - 20), hl
	or	a, a
	sbc	hl, hl
	sbc	hl, de
	push	hl
	pop	de
	add	iy, de
	ld	l, (ix - 21)
	inc	l
	ld	a, l
	ld	de, (ix - 7)
	cp	a, d
	ld	a, d
	jp	c, BB2_12
BB2_25:
	ld	l, (ix - 4)
	srl	l
	ld	(ix - 4), l
	ld	hl, (ix - 10)
	inc	hl
	ld	(ix - 10), hl
	ld	bc, (ix - 14)
	or	a, a
	sbc	hl, bc
	jp	z, BB2_43
	jp	BB2_9
BB2_26:
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	hl, (gfy_TextYPos)
	ld	(ix - 20), hl
	ld	hl, (ix - 14)
	ld	bc, (ix - 17)
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix - 10)
	add	hl, de
	ld	(gfy_TextXPos), hl
	ld	hl, (ix - 7)
	ld	a, l
	or	a, a
	jp	z, BB2_43
	ld	iy, (gfy_TextData)
	ld	hl, (ix - 10)
	call	__set_bc_and_mul_hl_by_240
	ld	de, (ix - 20)
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	ld	l, (ix + 6)
	ld	c, 3
	add	hl, hl
	add	hl, hl
	add	hl, hl
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 7)
	ld	(ix - 20), d
	ld	l, d
	ld	c, b
BB2_28:
	ld	a, l
	or	a, a
	jr	nz, BB2_30
	ld	l, b
	jp	BB2_42
BB2_30:
	ld	a, (gfy_FontHeight)
	ld	h, a
	ld	(ix - 14), h
	ld	a, b
	ld	(ix - 21), c
BB2_31:
	ld	(ix - 17), a
	ld	a, h
	or	a, a
	ld	a, b
	ld	l, b
	ld	de, (ix - 3)
	ld	(ix - 10), de
	jr	z, BB2_41
BB2_32:
	ld	a, (iy)
	and	a, (ix - 4)
	ld	b, a
	ld	a, (gfy_Text_BG_Color)
	ld	h, a
	ld	a, (gfy_Text_FG_Color)
	ld	d, a
	ld	a, b
	or	a, a
	jr	z, BB2_34
	ld	h, d
BB2_34:
	ld	a, (gfy_Text_TP_Color)
	ld	d, a
	ld	a, h
	cp	a, d
	jr	nz, BB2_36
	ld	bc, 0
	ld	c, (ix - 11)
	lea	de, iy
	ld	iy, (ix - 10)
	add	iy, bc
	ld	(ix - 10), iy
	push	de
	pop	iy
	jr	BB2_39
BB2_36:
	ld	a, (ix - 11)
	or	a, a
	ld	a, 0
	ld	d, a
	ld	(ix - 11), a
	jr	z, BB2_39
BB2_37:
	lea	bc, iy
	ld	iy, (ix - 10)
	ld	(iy), h
	inc	iy
	ld	(ix - 10), iy
	push	bc
	pop	iy
	inc	d
	ld	a, (gfy_TextHeightScale)
	ld	e, a
	ld	a, d
	ld	(ix - 11), e
	cp	a, e
	jr	c, BB2_37
	ld	a, (gfy_FontHeight)
	ld	(ix - 14), a
BB2_39:
	inc	iy
	inc	l
	ld	a, l
	ld	e, (ix - 14)
	cp	a, e
	jr	c, BB2_32
	ld	a, (gfy_TextWidthScale)
	ld	(ix - 20), a
	ld	a, (ix - 14)
BB2_41:
	ld	bc, 0
	ld	c, a
	ld	de, 240
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	sbc	hl, bc
	push	hl
	pop	bc
	ld	h, a
	add	iy, bc
	ld	a, (ix - 17)
	inc	a
	ld	l, (ix - 20)
	cp	a, l
	ld	b, d
	ld	de, (ix - 7)
	ld	c, (ix - 21)
	jp	c, BB2_31
BB2_42:
	ld	a, (ix - 4)
	srl	a
	ld	(ix - 4), a
	inc	c
	ld	a, c
	cp	a, e
	jp	nz, BB2_28
BB2_43:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_PrintString
gfy_PrintString:
	push	ix
	ld	ix, 0
	add	ix, sp
	push	hl
	ld	iy, (ix + 6)
	ld	l, (iy)
	ld	a, l
	or	a, a
	jp	z, BB3_3
	inc	iy
BB3_2:
	ld	(ix - 3), iy
	push	hl
	call	gfy_PrintChar
	ld	iy, (ix - 3)
	pop	hl
	ld	a, (iy)
	ld	l, a
	inc	iy
	or	a, a
	jr	nz, BB3_2
BB3_3:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_PrintStringXY
gfy_PrintStringXY:
	push	ix
	ld	ix, 0
	add	ix, sp
	push	hl
	ld	hl, (ix + 9)
	ld	de, (ix + 12)
	push	de
	push	hl
	call	gfy_SetTextXY
	ld	iy, (ix + 6)
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	l, (iy)
	ld	a, l
	or	a, a
	jp	z, BB4_3
	inc	iy
BB4_2:
	ld	(ix - 3), iy
	push	hl
	call	gfy_PrintChar
	ld	iy, (ix - 3)
	pop	hl
	ld	a, (iy)
	ld	l, a
	inc	iy
	or	a, a
	jr	nz, BB4_2
BB4_3:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Line
gfy_Line:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 27
	ld	sp, hl
	ld	de, (ix + 9)
	ld	bc, (ix + 15)
	ld	hl, 1
	ld	(ix - 6), hl
	push	bc
	pop	hl
	sbc	hl, de
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 15), de
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	(ix - 12), hl
	ld	hl, (ix + 12)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	ld	(ix - 18), hl
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	bc, (ix - 12)
	push	hl
	pop	de
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	hl, (ix + 15)
	ld	(ix - 3), hl
	jp	nc, BB5_16
	ld	hl, (-1900524)
	ld	(ix - 9), hl
	ld	bc, -8388608
	ld	hl, (ix + 6)
	add	hl, bc
	ex	de, hl
	ld	iy, (ix + 12)
	lea	hl, iy
	add	hl, bc
	push	de
	pop	iy
	or	a, a
	sbc	hl, de
	ld	de, (ix + 12)
	ld	hl, (ix + 6)
	jp	nc, BB5_32
	or	a, a
	sbc	hl, de
	ld	(ix - 12), hl
	ld	hl, (ix + 9)
	ld	de, (ix + 15)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nc, BB5_4
	scf
	sbc	hl, hl
	ld	(ix - 6), hl
BB5_4:
	push	de
	pop	hl
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	c, 1
	add	hl, hl
	push	hl
	pop	iy
	ex	de, hl
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 18), hl
	ld	(ix - 27), iy
	lea	hl, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 12), hl
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 15), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 24), hl
	ld	de, (ix + 12)
	push	de
	pop	hl
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	hl, (ix - 9)
	add	hl, bc
	ld	(ix - 9), hl
	push	de
	pop	bc
BB5_5:
	ld	iy, (ix - 15)
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	push	bc
	pop	hl
	add	hl, de
	ld	(ix - 21), hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	c, BB5_8
	ld	iy, (ix - 24)
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix - 21)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	nc, BB5_8
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	ld	iyl, a
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	ld	hl, (ix - 3)
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB5_14
BB5_8:
	ld	de, (ix - 3)
BB5_9:
	ld	(ix - 3), de
	ld	hl, (ix - 12)
	ld	de, -8388608
	add	hl, de
	inc	de
	or	a, a
	sbc	hl, de
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 18)
	jr	nz, BB5_11
	ld	hl, (ix - 27)
BB5_11:
	bit	0, a
	ld	iy, (ix - 6)
	ld	de, (ix - 3)
	jr	nz, BB5_13
	ld	iy, 0
BB5_13:
	add	iy, de
	ld	de, (ix - 12)
	add	hl, de
	ld	(ix - 12), hl
	inc	bc
	ld	de, 240
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	hl, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 3), iy
	jp	nz, BB5_5
	jp	BB5_60
BB5_14:
	ld	a, (gfy_ClipYMax)
	ld	iy, 0
	ld	iyl, a
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	ld	hl, (ix - 3)
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	de, (ix - 3)
	jp	nc, BB5_9
	ld	a, (gfy_Color)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(hl), a
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 15), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 24), hl
	jp	BB5_9
BB5_16:
	ld	hl, (-1900524)
	ld	(ix - 21), hl
	ld	bc, -8388608
	ld	iy, (ix + 9)
	add	iy, bc
	ld	hl, (ix + 15)
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	hl, (ix + 9)
	jp	nc, BB5_46
	push	hl
	pop	iy
	ld	hl, (ix + 6)
	ld	de, (ix + 12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	lea	hl, iy
	ld	de, (ix + 15)
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	push	bc
	pop	hl
	ld	de, -8388608
	add	hl, de
	or	a, a
	sbc	hl, de
	jr	nc, BB5_19
	scf
	sbc	hl, hl
	ld	(ix - 6), hl
BB5_19:
	push	bc
	pop	hl
	push	bc
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	c, 1
	add	hl, hl
	push	hl
	pop	iy
	ex	de, hl
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 15), hl
	ld	(ix - 27), iy
	lea	hl, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 12), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 18), hl
	ld	bc, (ix + 12)
BB5_20:
	ld	iy, (ix - 12)
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	push	bc
	pop	hl
	add	hl, de
	push	bc
	pop	de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB5_24
	ld	iy, (ix - 18)
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 24), de
	ex	de, hl
	add	hl, bc
	push	bc
	pop	de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB5_23
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	ld	iyl, a
	add	iy, de
	ld	hl, (ix - 3)
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB5_30
BB5_23:
	ld	bc, (ix - 24)
	jr	BB5_25
BB5_24:
	push	de
	pop	bc
	ld	de, -8388608
BB5_25:
	ld	hl, (ix - 9)
	add	hl, de
	ld	de, -8388607
	or	a, a
	sbc	hl, de
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 15)
	jr	nz, BB5_27
	ld	hl, (ix - 27)
BB5_27:
	bit	0, a
	ld	iy, (ix - 6)
	jr	nz, BB5_29
	ld	iy, 0
BB5_29:
	add	iy, bc
	ld	de, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, (ix - 3)
	inc	de
	ld	hl, (ix + 9)
	ld	(ix - 3), de
	or	a, a
	sbc	hl, de
	lea	bc, iy
	jp	nz, BB5_20
	jp	BB5_60
BB5_30:
	ld	a, (gfy_ClipYMax)
	ld	iy, 0
	ld	iyl, a
	add	iy, de
	ld	hl, (ix - 3)
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	bc, (ix - 24)
	jp	nc, BB5_25
	ld	a, (gfy_Color)
	push	bc
	pop	hl
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	hl, (ix - 21)
	add	hl, bc
	ld	bc, (ix - 3)
	add	hl, bc
	ld	bc, (ix - 24)
	ld	(hl), a
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 12), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 18), hl
	jp	BB5_25
BB5_32:
	ld	(ix - 21), iy
	ld	(ix - 3), hl
	ld	hl, (ix - 15)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nc, BB5_34
	scf
	sbc	hl, hl
	ld	(ix - 6), hl
BB5_34:
	ld	c, 1
	ld	de, (ix - 12)
	push	de
	pop	hl
	call	__ishl
	ld	(ix - 24), hl
	ex	de, hl
	ld	de, (ix - 18)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 15), hl
	ld	iy, (ix + 12)
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix - 21)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB5_60
	ld	hl, (ix - 24)
	ld	de, (ix - 18)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 18), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 27), hl
	ld	hl, (ix + 6)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	hl, (ix - 9)
	add	hl, bc
	ld	(ix - 9), hl
	ld	iy, (ix + 9)
BB5_36:
	ld	(ix - 12), iy
	ld	iy, (ix - 18)
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 21), hl
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB5_41
	ld	iy, (ix - 27)
	ld	bc, -8388608
	add	iy, bc
	ld	hl, (ix - 21)
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB5_41
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	ld	iyl, a
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 12)
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB5_41
	ld	a, (gfy_ClipYMax)
	ld	iy, 0
	ld	iyl, a
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 12)
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB5_41
	ld	a, (gfy_Color)
	ld	hl, (ix - 9)
	ld	bc, (ix - 12)
	add	hl, bc
	ld	(hl), a
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 18), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 27), hl
BB5_41:
	push	de
	pop	hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 15)
	jr	nz, BB5_43
	ld	hl, (ix - 24)
BB5_43:
	bit	0, a
	ld	iy, (ix - 6)
	ld	bc, (ix - 12)
	jr	nz, BB5_45
	ld	iy, 0
BB5_45:
	add	iy, bc
	add	hl, de
	ld	(ix - 12), hl
	ld	de, (ix - 3)
	inc	de
	ld	bc, 240
	ld	hl, (ix - 9)
	add	hl, bc
	ld	(ix - 9), hl
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, de
	ld	(ix - 3), de
	ld	de, (ix - 12)
	jp	nz, BB5_36
	jp	BB5_60
BB5_46:
	ld	(ix - 3), iy
	ld	hl, (ix - 18)
	ld	bc, -8388608
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nc, BB5_48
	scf
	sbc	hl, hl
	ld	(ix - 6), hl
BB5_48:
	ld	c, 1
	push	de
	pop	hl
	add	hl, hl
	ld	(ix - 24), hl
	ex	de, hl
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 18), hl
	ld	iy, (ix + 15)
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix - 3)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB5_60
	ld	hl, (ix - 24)
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	ld	(ix - 3), hl
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 15), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 27), hl
	ld	de, (ix + 9)
	ld	hl, (ix + 6)
	push	hl
	pop	bc
BB5_50:
	ld	(ix - 9), de
	ld	iy, (ix - 15)
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	push	bc
	pop	hl
	add	hl, de
	push	bc
	pop	de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), de
	jr	c, BB5_55
	ld	iy, (ix - 27)
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ex	de, hl
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB5_55
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	ld	iyl, a
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	de, (ix - 9)
	push	de
	pop	hl
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB5_55
	ld	a, (gfy_ClipYMax)
	ld	iy, 0
	ld	iyl, a
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ex	de, hl
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB5_55
	ld	a, (gfy_Color)
	ld	hl, (ix - 12)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	hl, (ix - 21)
	add	hl, bc
	ld	de, (ix - 9)
	add	hl, de
	ld	(hl), a
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 15), hl
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 27), hl
BB5_55:
	ld	hl, (ix - 3)
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 18)
	jr	nz, BB5_57
	ld	hl, (ix - 24)
BB5_57:
	bit	0, a
	ld	iy, (ix - 6)
	ld	de, (ix - 12)
	jr	nz, BB5_59
	ld	iy, 0
BB5_59:
	add	iy, de
	ld	bc, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	ld	de, (ix - 9)
	inc	de
	ld	hl, (ix + 15)
	or	a, a
	sbc	hl, de
	lea	bc, iy
	jp	nz, BB5_50
BB5_60:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_FillCircle
gfy_FillCircle:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	bc, (ix + 12)
	ld	de, 0
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	push	bc
	pop	hl
	call	__set_bc_and_mul_hl_by_minus2
	ld	bc, 2
	add	hl, bc
	ld	(ix - 6), hl
	ld	(ix - 3), de
BB6_1:
	ld	hl, (ix + 6)
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	lea	hl, iy
	ld	bc, (ix + 9)
	add	hl, bc
	ld	(ix - 12), hl
	ld	(ix - 9), iy
	lea	hl, iy
	call	__set_bc_and_mul_hl_by_minus2
	inc	hl
	ld	(ix - 15), hl
	push	hl
	ld	hl, (ix - 12)
	push	hl
	push	de
	call	gfy_VertLine
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 3)
	ld	de, (ix + 6)
	add	hl, de
	ld	de, (ix - 15)
	push	de
	ld	de, (ix - 12)
	push	de
	push	hl
	call	gfy_VertLine
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	iy, (ix - 6)
	ld	de, -8388608
	add	iy, de
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	add	hl, de
	ld	(ix - 12), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	sbc	a, a
	push	bc
	pop	iy
	inc	iy
	lea	hl, iy
	ld	c, 1
	add	hl, hl
	bit	0, a
	jr	nz, BB6_3
	ld	(ix - 3), iy
BB6_3:
	bit	0, a
	ld	iy, 0
	jr	nz, BB6_5
	inc	hl
	push	hl
	pop	iy
BB6_5:
	ld	de, (ix - 6)
	add	iy, de
	ld	(ix - 6), iy
	ld	hl, (ix - 9)
	ld	bc, -8388608
	add	hl, bc
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	e, a
	add	iy, bc
	ld	hl, (ix - 3)
	add	hl, bc
	lea	bc, iy
	ld	iy, (ix - 9)
	or	a, a
	sbc	hl, bc
	sbc	a, a
	ld	l, a
	ld	a, e
	or	a, l
	lea	de, iy
	inc	de
	push	de
	pop	hl
	ld	c, 1
	add	hl, hl
	bit	0, a
	jr	nz, BB6_7
	lea	de, iy
BB6_7:
	bit	0, a
	jr	nz, BB6_9
	or	a, a
	sbc	hl, hl
	jr	BB6_10
BB6_9:
	inc	hl
BB6_10:
	ld	bc, -8388608
	push	bc
	pop	iy
	ld	bc, (ix - 6)
	add	hl, bc
	ld	(ix - 6), hl
	push	de
	pop	hl
	lea	bc, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	de
	pop	iy
	jp	c, BB6_1
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Line_NoClip
gfy_Line_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 21
	ld	sp, hl
	ld	a, (ix + 15)
	ld	hl, 1
	ld	(ix - 3), hl
	ld	de, 0
	push	de
	pop	hl
	ld	l, a
	ld	e, (ix + 9)
	ld	(ix - 6), hl
	ld	(ix - 15), de
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 9), de
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	(ix - 12), hl
	ld	hl, (ix + 12)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	ld	(ix - 21), hl
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, de
	jp	nc, BB7_11
	ld	hl, (-1900524)
	ld	(ix - 18), hl
	ld	iy, (ix + 12)
	lea	hl, iy
	ld	bc, (ix + 6)
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	jp	nc, BB7_20
	push	bc
	pop	hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	hl, (ix - 15)
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, -8388608
	add	hl, de
	or	a, a
	sbc	hl, de
	jr	nc, BB7_4
	scf
	sbc	hl, hl
	ld	(ix - 3), hl
BB7_4:
	push	bc
	pop	hl
	push	bc
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	c, 1
	add	hl, hl
	ld	(ix - 12), hl
	ex	de, hl
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 15), hl
	ld	iy, (ix + 6)
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	ld	bc, (ix + 12)
	push	bc
	pop	hl
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	iy, (ix - 18)
	jp	nc, BB7_38
	ld	hl, (ix - 12)
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	bc
	pop	hl
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
BB7_6:
	ld	a, (gfy_Color)
	ld	(ix - 18), iy
	ld	bc, (ix - 6)
	add	iy, bc
	ld	(iy), a
	push	de
	pop	hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 15)
	jr	nz, BB7_8
	ld	hl, (ix - 12)
BB7_8:
	bit	0, a
	ld	iy, (ix - 3)
	jr	nz, BB7_10
	ld	iy, 0
BB7_10:
	ld	bc, (ix - 6)
	add	iy, bc
	add	hl, de
	ld	(ix - 21), hl
	ld	hl, (ix - 9)
	dec	hl
	ld	de, 240
	lea	bc, iy
	ld	iy, (ix - 18)
	add	iy, de
	ld	(ix - 9), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 6), bc
	ld	de, (ix - 21)
	jp	nz, BB7_6
	jp	BB7_38
BB7_11:
	ld	iy, (-1900524)
	ld	l, (ix + 9)
	cp	a, l
	jp	nc, BB7_29
	ld	(ix - 12), iy
	ld	hl, (ix + 6)
	ld	de, (ix + 12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 15)
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	de, -8388608
	push	bc
	pop	hl
	add	hl, de
	or	a, a
	sbc	hl, de
	jr	nc, BB7_14
	scf
	sbc	hl, hl
	ld	(ix - 3), hl
BB7_14:
	push	bc
	pop	hl
	push	bc
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	iy
	ld	c, 1
	add	hl, hl
	ld	(ix - 18), hl
	lea	hl, iy
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 21), hl
	ld	hl, (ix - 18)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, (ix - 6)
	ld	iy, (ix - 12)
	add	iy, de
	ld	de, (ix + 12)
	ex	de, hl
BB7_15:
	ld	a, (gfy_Color)
	ld	(ix - 15), hl
	push	bc
	pop	de
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	(ix - 12), iy
	lea	hl, iy
	add	hl, bc
	ld	(hl), a
	ld	(ix - 6), de
	ex	de, hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 21)
	jr	nz, BB7_17
	ld	hl, (ix - 18)
BB7_17:
	bit	0, a
	ld	iy, (ix - 3)
	jr	nz, BB7_19
	ld	iy, 0
BB7_19:
	ld	de, (ix - 15)
	add	iy, de
	ld	de, (ix - 6)
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 9)
	dec	hl
	ld	bc, (ix - 12)
	inc	bc
	ld	(ix - 9), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	lea	hl, iy
	push	bc
	pop	iy
	push	de
	pop	bc
	jp	nz, BB7_15
	jp	BB7_38
BB7_20:
	ld	de, -8388608
	ld	hl, (ix - 9)
	add	hl, de
	or	a, a
	sbc	hl, de
	jr	nc, BB7_22
	scf
	sbc	hl, hl
	ld	(ix - 3), hl
BB7_22:
	ld	c, 1
	ld	de, (ix - 12)
	push	de
	pop	hl
	call	__ishl
	ld	(ix - 9), hl
	ex	de, hl
	ld	de, (ix - 21)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 12), hl
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 6)
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	iy, (ix - 18)
	jp	nc, BB7_38
	ld	hl, (ix - 9)
	or	a, a
	sbc	hl, de
	ld	(ix - 6), hl
	ld	hl, (ix + 6)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	ld	bc, (ix - 6)
BB7_24:
	ld	(ix - 21), de
	ld	a, (gfy_Color)
	ld	(ix - 18), iy
	ld	de, (ix - 15)
	add	iy, de
	ld	(iy), a
	ld	(ix - 6), bc
	push	bc
	pop	hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 12)
	jr	nz, BB7_26
	ld	hl, (ix - 9)
BB7_26:
	bit	0, a
	ld	iy, (ix - 3)
	jr	nz, BB7_28
	ld	iy, 0
BB7_28:
	add	iy, de
	ld	(ix - 15), iy
	ld	de, (ix - 6)
	add	hl, de
	ld	de, (ix - 21)
	dec	de
	ld	bc, 240
	ld	iy, (ix - 18)
	add	iy, bc
	push	hl
	pop	bc
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB7_24
	jp	BB7_38
BB7_29:
	ld	bc, -8388608
	ld	hl, (ix - 21)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nc, BB7_31
	scf
	sbc	hl, hl
	ld	(ix - 3), hl
BB7_31:
	ld	a, 1
	push	de
	pop	hl
	ld	c, a
	call	__ishl
	ld	(ix - 6), hl
	ex	de, hl
	ld	bc, (ix - 9)
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	ld	c, a
	call	__ishl
	ld	(ix - 18), hl
	ld	a, (ix + 9)
	ld	l, (ix + 15)
	cp	a, l
	jp	nc, BB7_38
	ld	hl, (ix - 6)
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, (ix - 15)
	add	iy, de
	ld	de, (ix + 6)
	ex	de, hl
	ld	de, (ix - 9)
BB7_33:
	ld	(ix - 9), de
	ld	a, (gfy_Color)
	ld	(ix - 21), hl
	push	bc
	pop	de
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	(ix - 12), iy
	add	iy, bc
	ld	(iy), a
	ld	(ix - 15), de
	ex	de, hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 18)
	jr	nz, BB7_35
	ld	hl, (ix - 6)
BB7_35:
	bit	0, a
	ld	iy, (ix - 3)
	jr	nz, BB7_37
	ld	iy, 0
BB7_37:
	ld	de, (ix - 21)
	add	iy, de
	ld	de, (ix - 15)
	add	hl, de
	ld	(ix - 15), hl
	ld	de, (ix - 9)
	dec	de
	ld	bc, (ix - 12)
	inc	bc
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	lea	hl, iy
	push	bc
	pop	iy
	ld	bc, (ix - 15)
	jp	nz, BB7_33
BB7_38:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_FillCircle_NoClip
gfy_FillCircle_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	de, (ix + 12)
	ld	iy, 0
	ld	bc, -2
	lea	hl, iy
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix + 12)
	call	__imulu
	ld	bc, 2
	add	hl, bc
	ld	(ix - 6), hl
	ld	(ix - 3), iy
	push	de
	pop	bc
BB8_1:
	ld	hl, (ix + 6)
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	a, c
	add	a, (ix + 9)
	ld	l, a
	ld	(ix - 12), hl
	ld	(ix - 9), bc
	push	bc
	pop	hl
	call	__set_bc_and_mul_hl_by_minus2
	inc	hl
	ld	(ix - 15), hl
	push	hl
	ld	hl, (ix - 12)
	push	hl
	push	de
	call	gfy_VertLine_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 3)
	ld	de, (ix + 6)
	add	hl, de
	ld	de, (ix - 15)
	push	de
	ld	de, (ix - 12)
	push	de
	push	hl
	call	gfy_VertLine_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	iy, (ix - 6)
	ld	de, -8388608
	add	iy, de
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	add	hl, de
	ld	(ix - 12), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	sbc	a, a
	push	bc
	pop	iy
	inc	iy
	lea	hl, iy
	ld	c, 1
	add	hl, hl
	bit	0, a
	jr	nz, BB8_3
	ld	(ix - 3), iy
BB8_3:
	bit	0, a
	ld	iy, 0
	jr	nz, BB8_5
	inc	hl
	push	hl
	pop	iy
BB8_5:
	ld	de, (ix - 6)
	add	iy, de
	ld	(ix - 6), iy
	ld	hl, (ix - 9)
	ld	bc, -8388608
	add	hl, bc
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	e, a
	add	iy, bc
	ld	hl, (ix - 3)
	add	hl, bc
	lea	bc, iy
	ld	iy, (ix - 9)
	or	a, a
	sbc	hl, bc
	sbc	a, a
	ld	l, a
	ld	a, e
	or	a, l
	lea	de, iy
	inc	de
	push	de
	pop	hl
	ld	c, 1
	add	hl, hl
	bit	0, a
	jr	nz, BB8_7
	lea	de, iy
BB8_7:
	bit	0, a
	jr	nz, BB8_9
	or	a, a
	sbc	hl, hl
	jr	BB8_10
BB8_9:
	inc	hl
BB8_10:
	ld	bc, -8388608
	push	bc
	pop	iy
	ld	bc, (ix - 6)
	add	hl, bc
	ld	(ix - 6), hl
	push	de
	pop	hl
	lea	bc, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	de
	pop	bc
	jp	c, BB8_1
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftDown
gfy_ShiftDown:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	l, (ix + 6)
	ld	a, l
	or	a, a
	jp	z, BB9_5
	ld	de, 0
	ld	e, l
	ld	(ix - 3), de
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 6), hl
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	lea	de, iy
	ld	e, a
	ld	a, (gfy_ClipYMax)
	ld	iyl, a
	push	de
	pop	hl
	ld	bc, (ix - 3)
	add	hl, bc
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ld	bc, -8388608
	ld	(ix - 9), hl
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	jr	c, BB9_5
	ld	hl, (gfy_ClipXMin)
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 15), iy
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 12), hl
	add	hl, bc
	lea	bc, iy
	ld	iy, (ix - 6)
	or	a, a
	sbc	hl, bc
	jr	nc, BB9_5
	ld	bc, 240
	add	iy, de
	ld	de, (ix - 12)
	push	de
	pop	hl
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 15)
	or	a, a
	sbc	hl, de
BB9_4:
	ld	(ix - 12), hl
	ld	(ix - 6), iy
	lea	hl, iy
	ld	de, (ix - 3)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	iy
	push	hl
	call	_memmove
	ld	iy, (ix - 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	add	iy, de
	ld	hl, (ix - 12)
	dec	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB9_4
BB9_5:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftUp
gfy_ShiftUp:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	l, (ix + 6)
	ld	de, 0
	ld	a, l
	or	a, a
	jp	z, BB10_5
	ld	e, l
	ld	(ix - 3), de
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 6), hl
	ld	a, (gfy_ClipYMin)
	ld	de, 0
	ld	e, a
	ld	a, (gfy_ClipYMax)
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	de
	pop	iy
	ld	bc, (ix - 3)
	add	iy, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	bc, -8388608
	ld	(ix - 9), hl
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	jp	c, BB10_5
	ld	hl, (gfy_ClipXMin)
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 15), iy
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 12), hl
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB10_5
	ld	bc, 240
	ld	iy, (ix - 6)
	add	iy, de
	ld	hl, (ix - 12)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	lea	de, iy
	ld	hl, (ix - 15)
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	or	a, a
	sbc	hl, hl
	ld	bc, (ix - 3)
	sbc	hl, bc
	ld	(ix - 12), hl
BB10_4:
	ld	(ix - 3), iy
	push	de
	pop	bc
	ld	(ix - 6), bc
	push	bc
	pop	hl
	ld	de, (ix - 12)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	bc
	push	hl
	call	_memmove
	ld	iy, (ix - 3)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	hl, (ix - 6)
	add	hl, de
	ex	de, hl
	dec	iy
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB10_4
BB10_5:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftLeft
gfy_ShiftLeft:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB11_4
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	a, (gfy_ClipYMin)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, (gfy_ClipXMin)
	ld	a, (gfy_ClipYMax)
	ld	l, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	(ix - 15), bc
	push	bc
	pop	hl
	ld	bc, (ix + 6)
	add	hl, bc
	ld	iy, (gfy_ClipXMax)
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 6), hl
	add	hl, bc
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB11_4
	ld	bc, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 15)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix + 6)
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 15), de
	add	iy, de
BB11_3:
	ld	(ix - 3), iy
	lea	hl, iy
	ld	de, (ix - 15)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	hl
	push	iy
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	c, BB11_3
BB11_4:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftRight
gfy_ShiftRight:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB12_4
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	a, (gfy_ClipYMin)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, (gfy_ClipXMin)
	ld	a, (gfy_ClipYMax)
	ld	l, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	(ix - 15), bc
	push	bc
	pop	hl
	ld	bc, (ix + 6)
	add	hl, bc
	ld	iy, (gfy_ClipXMax)
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 6), hl
	add	hl, bc
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB12_4
	ld	bc, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 15)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix + 6)
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 15), de
	add	iy, de
BB12_3:
	ld	(ix - 3), iy
	lea	hl, iy
	ld	de, (ix - 15)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	hl
	push	iy
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	c, BB12_3
BB12_4:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Tilemap
gfy_Tilemap:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 36
	ld	sp, hl
	ld	hl, (ix + 9)
	xor	a, a
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	c, (iy + 7)
	ld	(ix - 3), bc
	call	__idivu
	ld	(ix - 9), hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 6)
	ld	hl, (ix + 12)
	push	de
	pop	bc
	call	__idivu
	ld	(ix - 12), hl
	ld	hl, (ix - 9)
	ld	bc, (ix - 3)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	hl, (ix - 12)
	ld	(ix - 15), de
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, de
	ld	(ix - 6), hl
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 22), a
	ld	(ix - 18), iy
	jr	z, BB13_2
	ld	a, 0
	jr	BB13_3
BB13_2:
	ld	a, -1
BB13_3:
	ld	de, 0
	push	de
	pop	bc
	ld	de, (ix - 3)
	ld	iy, (ix + 6)
	ld	hl, (iy + 15)
	ld	iy, (ix - 18)
	add	iy, de
	bit	0, a
	jr	nz, BB13_5
	lea	bc, iy
BB13_5:
	or	a, a
	sbc	hl, bc
	ld	(ix - 21), hl
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	c, (iy + 14)
	ld	hl, (ix - 6)
	push	hl
	pop	iy
	ld	de, (ix - 15)
	add	iy, de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, 0
	jr	z, BB13_7
	lea	de, iy
BB13_7:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	(ix - 18), hl
	ld	iy, (ix + 6)
	ld	e, (iy + 9)
	bit	0, a
	jr	nz, BB13_12
	ld	hl, (ix + 9)
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	nc, BB13_10
	ld	hl, (ix - 21)
	add	hl, bc
	ld	(ix - 21), hl
	or	a, a
	sbc	hl, hl
	jr	BB13_11
BB13_10:
	inc	e
	ld	hl, (ix - 9)
	dec	hl
BB13_11:
	ld	(ix - 9), hl
BB13_12:
	ld	d, (iy + 8)
	ld	hl, (ix - 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB13_17
	ld	hl, (ix + 12)
	ld	bc, (ix - 15)
	or	a, a
	sbc	hl, bc
	jr	nc, BB13_15
	ld	hl, (ix - 18)
	add	hl, bc
	ld	(ix - 18), hl
	or	a, a
	sbc	hl, hl
	jr	BB13_16
BB13_15:
	inc	d
	ld	hl, (ix - 12)
	dec	hl
BB13_16:
	ld	(ix - 12), hl
BB13_17:
	ld	a, e
	or	a, a
	jr	z, BB13_19
	ld	a, d
	or	a, a
	jr	nz, BB13_20
BB13_19:
	ld	sp, ix
	pop	ix
	ret
BB13_20:
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	(ix - 15), hl
	ld	(ix - 6), e
	ld	(ix - 23), d
	call	gfy_Wait
	ld	iy, (ix + 6)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, (iy + 13)
	ld	l, (iy + 12)
	call	__imulu
	ld	(ix - 3), hl
	push	bc
	pop	hl
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	ld	(ix - 29), hl
	ld	hl, (gfy_ClipXMax)
	ld	de, 0
	ld	e, (iy + 7)
	or	a, a
	sbc	hl, de
	ld	(ix - 32), hl
	ld	a, (gfy_ClipYMax)
	ld	de, 0
	push	de
	pop	hl
	ld	l, a
	ld	e, (iy + 6)
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	hl, (ix - 12)
	call	__imulu
	ld	a, (ix - 6)
	ld	de, (ix - 9)
	add	hl, de
	push	hl
	pop	bc
BB13_21:
	ld	hl, (ix - 18)
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	jp	nc, BB13_30
	ld	hl, (ix - 3)
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	push	de
	pop	hl
	jr	c, BB13_24
	ld	hl, (ix - 3)
BB13_24:
	ld	c, a
	ld	iy, (ix - 21)
	ld	(ix - 9), iy
	ld	iy, (ix + 6)
	ld	(ix - 12), hl
BB13_25:
	or	a, a
	sbc	hl, de
	jp	z, BB13_19
	ld	(ix - 33), c
	ld	hl, (iy + 3)
	ld	(ix - 36), hl
	ld	iy, (iy)
	ld	(ix - 26), de
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 36)
	add	hl, de
	ld	iy, (hl)
	ld	de, (ix - 9)
	push	de
	pop	hl
	ld	bc, (ix - 32)
	or	a, a
	sbc	hl, bc
	ld	(ix - 9), de
	jr	nc, BB13_28
	ld	hl, (ix - 18)
	push	hl
	push	de
	push	iy
	call	gfy_Sprite_NoClip
	jr	BB13_29
BB13_28:
	ld	hl, (ix - 18)
	push	hl
	push	de
	push	iy
	call	gfy_Sprite
BB13_29:
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, (ix - 26)
	inc	de
	ld	c, (ix - 33)
	dec	c
	ld	a, c
	or	a, a
	ld	b, (ix - 23)
	ld	hl, (ix - 12)
	jr	nz, BB13_25
	jp	BB13_35
BB13_30:
	ld	hl, (ix - 3)
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	ld	(ix - 12), de
	jr	c, BB13_32
	ld	hl, (ix - 3)
	ld	(ix - 12), hl
BB13_32:
	ld	c, a
	ld	hl, (ix - 21)
	ld	(ix - 9), hl
BB13_33:
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, de
	jp	z, BB13_19
	ld	hl, (iy + 3)
	ld	(ix - 36), hl
	ld	hl, (ix + 6)
	ld	iy, (hl)
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	ld	(ix - 33), c
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	ld	(ix - 26), de
	push	hl
	pop	de
	ld	hl, (ix - 36)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 18)
	push	de
	ld	de, (ix - 9)
	push	de
	push	hl
	call	gfy_Sprite
	ld	c, (ix - 33)
	ld	b, (ix - 23)
	ld	iy, (ix + 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	e, (iy + 7)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, (ix - 26)
	inc	de
	dec	c
	ld	a, c
	or	a, a
	jr	nz, BB13_33
BB13_35:
	ld	hl, (ix - 29)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, 0
	ld	e, (iy + 6)
	ld	hl, (ix - 18)
	add	hl, de
	ld	(ix - 18), hl
	ld	a, (ix - 22)
	inc	a
	ld	(ix - 22), a
	cp	a, b
	ld	bc, (ix - 9)
	ld	a, (ix - 6)
	jp	nz, BB13_21
	jp	BB13_19
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Sprite
gfy_Sprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 31
	ld	sp, hl
	ld	hl, (ix + 9)
	ld	iy, (gfy_ClipXMax)
	ld	de, -8388608
	add	iy, de
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB14_21
	ld	hl, (ix + 12)
	ld	a, (gfy_ClipYMax)
	ld	de, 0
	lea	bc, iy
	push	de
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	add	hl, de
	ld	(ix - 3), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB14_21
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	a, l
	or	a, a
	jp	z, BB14_21
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	(ix - 6), a
	or	a, a
	jp	z, BB14_21
	ld	de, 0
	ld	a, l
	ex	de, hl
	ld	l, a
	ld	de, (ix + 9)
	add	hl, de
	ld	(ix - 9), bc
	ld	iy, (gfy_ClipXMin)
	ld	de, -8388608
	add	iy, de
	ld	(ix - 19), hl
	add	hl, de
	ld	(ix - 16), a
	ld	(ix - 12), hl
	ld	(ix - 15), iy
	lea	de, iy
	ld	bc, (ix - 9)
	or	a, a
	sbc	hl, de
	jp	c, BB14_21
	ld	iy, 0
	lea	hl, iy
	ld	l, (ix - 6)
	ld	(ix - 31), hl
	ld	de, (ix + 12)
	add	hl, de
	ld	(ix - 22), hl
	ld	a, (gfy_ClipYMin)
	ld	iyl, a
	ld	hl, -8388608
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix - 22)
	add	hl, de
	ld	(ix - 25), hl
	ld	(ix - 28), iy
	lea	de, iy
	push	bc
	pop	iy
	or	a, a
	sbc	hl, de
	jp	c, BB14_21
	ld	hl, (ix + 9)
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	jr	c, BB14_10
	ld	hl, (ix + 12)
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 28)
	or	a, a
	sbc	hl, de
	jr	c, BB14_10
	lea	hl, iy
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	c, BB14_10
	ld	hl, (ix - 3)
	ld	de, (ix - 25)
	or	a, a
	sbc	hl, de
	jp	nc, BB14_22
BB14_10:
	call	gfy_Wait
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 15), hl
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, de
	ld	(ix - 28), hl
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix + 12)
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	ld	(ix - 3), hl
	jr	nc, BB14_12
	ld	hl, (ix + 12)
	sub	a, l
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix - 3), hl
BB14_12:
	ld	iy, (gfy_ClipXMax)
	ld	hl, (ix - 19)
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	(ix - 9), hl
	add	iy, de
	lea	hl, iy
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	jr	c, BB14_14
	or	a, a
	sbc	hl, hl
	ld	(ix - 9), hl
BB14_14:
	ld	bc, 255
	ld	a, (gfy_ClipYMax)
	ld	iy, 0
	ld	iyl, a
	lea	hl, iy
	add	hl, de
	ld	de, (ix - 25)
	or	a, a
	sbc	hl, de
	ld	hl, 0
	jr	nc, BB14_16
	ld	hl, (ix - 22)
	ld	a, l
	sub	a, iyl
	or	a, a
	sbc	hl, hl
	ld	l, a
BB14_16:
	ld	(ix - 19), hl
	ld	hl, (ix - 28)
	call	__iand
	push	hl
	pop	de
	ld	bc, -8388608
	ld	iy, (ix - 15)
	add	iy, bc
	ld	hl, (ix + 9)
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB14_18
	ld	de, 0
BB14_18:
	ld	hl, (ix - 9)
	ld	a, l
	ld	(ix - 12), de
	add	a, e
	ld	l, a
	ld	c, (ix - 16)
	ld	a, c
	sub	a, l
	ld	(ix - 9), a
	ld	de, (-1900524)
	ld	a, c
	cp	a, l
	jp	z, BB14_21
	ld	hl, (ix - 3)
	ld	bc, (ix + 12)
	add	hl, bc
	push	hl
	pop	bc
	push	de
	pop	iy
	add	iy, bc
	ld	hl, (ix - 12)
	ld	de, (ix + 9)
	add	hl, de
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	lea	de, iy
	ld	iy, (ix + 6)
	ld	bc, (ix - 3)
	add	iy, bc
	ld	hl, (ix - 12)
	ld	bc, (ix - 31)
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	lea	iy, iy + 2
	ld	hl, (ix - 19)
	ld	a, l
	ld	hl, (ix - 3)
	add	a, l
	ld	l, a
	ld	a, (ix - 6)
	sub	a, l
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix - 12), hl
BB14_20:
	ld	(ix - 3), iy
	ld	hl, (ix - 12)
	push	hl
	push	iy
	ld	(ix - 6), de
	push	de
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 1)
	ld	iy, (ix - 3)
	add	iy, de
	ld	de, 240
	ld	hl, (ix - 6)
	add	hl, de
	ex	de, hl
	ld	a, (ix - 9)
	dec	a
	ld	(ix - 9), a
	or	a, a
	jr	nz, BB14_20
BB14_21:
	ld	sp, ix
	pop	ix
	ret
BB14_22:
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	gfy_Sprite_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	jr	BB14_21
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Tilemap_NoClip
gfy_Tilemap_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 23
	ld	sp, hl
	call	gfy_Wait
	ld	de, 0
	push	de
	pop	bc
	ld	iy, (ix + 6)
	ld	c, (iy + 7)
	push	de
	pop	hl
	ld	l, (iy + 13)
	ld	a, (iy + 9)
	ld	(ix - 9), a
	ld	e, a
	ld	(ix - 22), hl
	or	a, a
	sbc	hl, de
	ld	(ix - 12), hl
	ld	hl, (iy + 15)
	ld	(ix - 3), hl
	ld	hl, (ix + 9)
	call	__idivu
	ld	(ix - 18), hl
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	e, (iy + 8)
	ld	a, e
	or	a, a
	jp	z, BB15_6
	ld	iy, (ix + 6)
	ld	a, (iy + 14)
	ld	(ix - 3), a
	ld	a, (iy + 6)
	ld	(ix - 23), e
	ld	bc, 0
	ld	(ix - 19), a
	ld	c, a
	ld	hl, (ix + 12)
	call	__idivu
	ld	d, l
	ld	e, c
	mlt	de
	ld	bc, (ix + 12)
	ld	a, c
	sub	a, e
	ld	c, a
	ld	a, (ix - 3)
	sub	a, c
	ld	e, a
	ld	(ix - 6), de
	ld	bc, (ix - 22)
	call	__imulu
	ld	b, (ix - 23)
	ld	c, 0
	ld	de, (ix - 18)
	add	hl, de
	ld	e, c
	ld	(ix - 3), hl
BB15_2:
	ld	(ix - 18), e
	ld	a, (ix - 9)
	or	a, a
	ld	e, c
	ld	a, c
	ld	hl, (ix - 15)
	jr	z, BB15_5
BB15_3:
	ld	(ix - 9), hl
	ld	(ix - 19), a
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix - 22), hl
	ld	hl, (ix + 6)
	ld	iy, (hl)
	ld	de, (ix - 3)
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 22)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 6)
	push	de
	ld	de, (ix - 9)
	push	de
	push	hl
	call	gfy_Sprite_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 9)
	ld	a, (ix - 19)
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	add	hl, de
	ld	de, (ix - 3)
	inc	de
	ld	(ix - 3), de
	inc	a
	ld	iy, (ix + 6)
	ld	e, (iy + 9)
	cp	a, e
	jr	c, BB15_3
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	a, (iy + 6)
	ld	(ix - 19), a
	ld	b, (iy + 8)
BB15_5:
	ld	(ix - 9), e
	ld	hl, (ix - 12)
	ld	de, (ix - 3)
	add	hl, de
	ld	a, (ix - 19)
	ld	de, (ix - 6)
	add	a, e
	ld	e, a
	ld	(ix - 6), de
	ld	e, (ix - 18)
	inc	e
	ld	a, e
	cp	a, b
	ld	(ix - 3), hl
	ld	a, 0
	ld	c, a
	jp	c, BB15_2
BB15_6:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_TransparentTilemap
gfy_TransparentTilemap:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 49
	ld	sp, hl
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	ld	de, 0
	ld	e, (iy + 7)
	push	de
	pop	bc
	call	__idivu
	ld	(ix - 13), hl
	or	a, a
	sbc	hl, hl
	ld	iy, (ix + 6)
	ld	l, (iy + 6)
	push	hl
	pop	iy
	ld	hl, (ix + 12)
	lea	bc, iy
	call	__idivu
	ld	(ix - 16), hl
	ld	hl, (ix - 13)
	ld	(ix - 10), de
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix - 16)
	ld	(ix - 3), iy
	lea	bc, iy
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, bc
	ld	(ix - 19), hl
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 6), de
	jr	z, BB16_2
	ld	a, 0
	jr	BB16_3
BB16_2:
	ld	a, -1
BB16_3:
	ld	de, 0
	ld	iy, (ix + 6)
	ld	hl, (iy + 15)
	ld	bc, (ix - 10)
	ld	iy, (ix - 6)
	add	iy, bc
	bit	0, a
	push	de
	pop	bc
	jr	nz, BB16_5
	lea	bc, iy
BB16_5:
	or	a, a
	sbc	hl, bc
	ld	(ix - 23), hl
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	c, (iy + 14)
	ld	hl, (ix - 19)
	push	hl
	pop	iy
	ld	de, (ix - 3)
	add	iy, de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, 0
	jr	z, BB16_7
	lea	de, iy
BB16_7:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	(ix - 6), hl
	ld	iy, (ix + 6)
	ld	l, (iy + 9)
	ld	(ix - 7), l
	bit	0, a
	jr	nz, BB16_12
	ld	hl, (ix + 9)
	ld	de, (ix - 10)
	or	a, a
	sbc	hl, de
	jr	nc, BB16_10
	ld	hl, (ix - 23)
	add	hl, de
	ld	(ix - 23), hl
	or	a, a
	sbc	hl, hl
	jr	BB16_11
BB16_10:
	ld	a, (ix - 7)
	inc	a
	ld	(ix - 7), a
	ld	hl, (ix - 13)
	dec	hl
BB16_11:
	ld	(ix - 13), hl
BB16_12:
	ld	de, 0
	ld	bc, (ix - 3)
	ld	a, (iy + 8)
	ld	(ix - 20), a
	ld	hl, (ix - 19)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB16_17
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, bc
	jr	nc, BB16_15
	ld	hl, (ix - 6)
	add	hl, bc
	ld	(ix - 6), hl
	or	a, a
	sbc	hl, hl
	jr	BB16_16
BB16_15:
	ld	a, (ix - 20)
	inc	a
	ld	(ix - 20), a
	ld	hl, (ix - 16)
	dec	hl
BB16_16:
	ld	(ix - 16), hl
BB16_17:
	push	de
	pop	bc
	ld	c, (iy + 13)
	ex	de, hl
	ld	l, (iy + 12)
	call	__imulu
	push	hl
	pop	iy
	ld	de, 0
	ld	e, (ix - 7)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	(ix - 19), hl
	ld	hl, (gfy_ClipXMax)
	ld	de, (ix - 10)
	or	a, a
	sbc	hl, de
	ld	(ix - 26), hl
	ld	a, (gfy_ClipYMax)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, (ix - 3)
	sbc	hl, de
	ld	(ix - 10), hl
	ld	a, (ix - 20)
	or	a, a
	jr	nz, BB16_19
BB16_18:
	ld	sp, ix
	pop	ix
	ret
BB16_19:
	ld	hl, (ix - 16)
	call	__imulu
	ld	bc, (ix - 13)
	add	hl, bc
	xor	a, a
	ld	(ix - 13), a
	ld	(ix - 16), iy
BB16_20:
	ld	(ix - 3), hl
	ld	hl, (ix - 6)
	ld	bc, (ix - 10)
	or	a, a
	sbc	hl, bc
	jp	nc, BB16_39
	ld	a, (ix - 7)
	or	a, a
	jp	z, BB16_40
	ld	hl, (ix - 6)
	ld	bc, 255
	inc.s	hl
	dec	hl
	ld	h, b
	ld	(ix - 41), hl
	lea	hl, iy
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	push	bc
	pop	de
	jr	c, BB16_24
	lea	de, iy
BB16_24:
	xor	a, a
	ld	iy, (ix - 23)
BB16_25:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jr	z, BB16_18
	ld	(ix - 38), a
	ld	(ix - 35), de
	ld	(ix - 29), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix - 32), hl
	ld	iy, (iy)
	ld	(ix - 3), bc
	add	iy, bc
	ld	de, 0
	ex	de, hl
	ld	l, (iy)
	ld	iy, (ix - 29)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 32)
	add	hl, de
	ld	hl, (hl)
	ld	(ix - 32), hl
	lea	hl, iy
	ld	de, (ix - 26)
	or	a, a
	sbc	hl, de
	jp	nc, BB16_37
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 48), hl
	ld	iy, (ix - 32)
	ld	d, (iy + 1)
	ld	bc, 0
	ld	c, d
	ld	hl, 240
	or	a, a
	sbc	hl, bc
	ld	(ix - 44), hl
	ld	a, (iy)
	ld	(ix - 45), a
	or	a, a
	jp	z, BB16_38
	ld	bc, (ix - 41)
	ld	iy, (ix - 48)
	add	iy, bc
	ld	hl, (ix - 29)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	lea	bc, iy
	ld	a, d
	cp	a, 2
	ld	(ix - 48), d
	jr	nc, BB16_30
	ld	a, 1
	ld	(ix - 48), a
BB16_30:
	ld	iy, (ix - 32)
	lea	hl, iy + 2
	ld	(ix - 32), hl
	ld	h, d
	ld	e, 0
	push	bc
	pop	iy
	ld	(ix - 49), d
BB16_31:
	ld	a, h
	or	a, a
	ld	h, 0
	ld	c, (ix - 48)
	jr	z, BB16_36
BB16_32:
	ld	hl, (ix - 32)
	ld	d, (hl)
	ld	a, (gfy_Transparent_Color)
	ld	b, a
	ld	a, d
	cp	a, b
	jr	nz, BB16_34
	ld	d, (iy)
BB16_34:
	ld	(iy), d
	inc	hl
	ld	(ix - 32), hl
	inc	iy
	dec	c
	ld	a, c
	or	a, a
	ld	d, (ix - 49)
	jr	nz, BB16_32
	ld	h, d
BB16_36:
	ld	bc, (ix - 44)
	add	iy, bc
	inc	e
	ld	a, e
	ld	l, (ix - 45)
	cp	a, l
	jr	nz, BB16_31
	jr	BB16_38
BB16_37:
	ld	hl, (ix - 6)
	push	hl
	push	iy
	ld	hl, (ix - 32)
	push	hl
	call	gfy_TransparentSprite
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
BB16_38:
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	ld	iy, (ix - 29)
	add	iy, de
	ld	bc, (ix - 3)
	inc	bc
	ld	a, (ix - 38)
	inc	a
	ld	l, (ix - 7)
	cp	a, l
	ld	de, (ix - 35)
	jp	nz, BB16_25
	jr	BB16_41
BB16_39:
	ld	a, (ix - 7)
	or	a, a
	jr	nz, BB16_42
BB16_40:
	ld	bc, (ix - 3)
BB16_41:
	ld	hl, (ix - 19)
	add	hl, bc
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 6)
	ld	iy, (ix - 6)
	add	iy, de
	ld	(ix - 6), iy
	ld	iy, (ix - 16)
	ld	a, (ix - 13)
	inc	a
	ld	(ix - 13), a
	ld	c, (ix - 20)
	cp	a, c
	jp	nz, BB16_20
	jp	BB16_18
BB16_42:
	lea	hl, iy
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	push	bc
	pop	de
	jr	c, BB16_44
	lea	de, iy
BB16_44:
	push	af
	ld	a, (ix - 7)
	ld	iyl, a
	pop	af
	ld	hl, (ix - 23)
	ld	(ix - 29), hl
BB16_45:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jp	z, BB16_18
	push	af
	ld	a, iyl
	ld	(ix - 35), a
	pop	af
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix - 38), hl
	ld	hl, (ix + 6)
	ld	iy, (hl)
	add	iy, bc
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	ld	(ix - 3), bc
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	ld	(ix - 32), de
	push	hl
	pop	de
	ld	hl, (ix - 38)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 6)
	push	de
	ld	de, (ix - 29)
	push	de
	push	hl
	call	gfy_TransparentSprite
	ld	bc, (ix - 3)
	ld	iy, (ix + 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	e, (iy + 7)
	push	af
	ld	a, (ix - 35)
	ld	iyl, a
	pop	af
	ld	hl, (ix - 29)
	add	hl, de
	ld	(ix - 29), hl
	ld	de, (ix - 32)
	inc	bc
	dec	iyl
	ld	a, iyl
	or	a, a
	jr	nz, BB16_45
	jp	BB16_41
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_TransparentSprite_NoClip
;gfy_TransparentSprite_NoClip:
;	push	ix
;	ld	ix, 0
;	add	ix, sp
;	lea	hl, ix - 9
;	ld	sp, hl
;	call	gfy_Wait
;	ld	hl, (-1900524)
;	ld	(ix - 6), hl
;	ld	iy, (ix + 6)
;	ld	e, (iy + 1)
;	ld	bc, 0
;	ld	c, e
;	ld	hl, 240
;	or	a, a
;	sbc	hl, bc
;	ld	(ix - 9), hl
;	ld	hl, (ix + 6)
;	ld	l, (hl)
;	ld	a, l
;	or	a, a
;	jr	z, BB17_8
;	ld	a, l
;	ld	hl, (ix + 9)
;	ld	bc, 0
;	ld	c, (ix + 12)
;	ld	iy, (ix - 6)
;	add	iy, bc
;	call	__set_bc_and_mul_hl_by_240
;	push	hl
;	pop	bc
;	ld	h, a
;	ld	l, 0
;	add	iy, bc
;	ld	(ix - 6), iy
;	ld	iy, (ix + 6)
;	lea	bc, iy + 2
;	ld	(ix - 3), bc
;	ld	iy, (ix - 6)
;	ld	b, l
;BB17_2:
;	ld	a, e
;	or	a, a
;	ld	e, l
;	ld	c, l
;	jr	z, BB17_7
;BB17_3:
;	ld	hl, (ix - 3)
;	ld	e, (hl)
;	ld	a, (gfy_Transparent_Color)
;	ld	h, a
;	ld	a, e
;	cp	a, h
;	jr	nz, BB17_5
;	ld	e, (iy)
;BB17_5:
;	ld	(iy), e
;	ld	hl, (ix - 3)
;	inc	hl
;	ld	(ix - 3), hl
;	inc	iy
;	inc	c
;	lea	hl, iy
;	ld	iy, (ix + 6)
;	ld	e, (iy + 1)
;	push	hl
;	pop	iy
;	ld	a, c
;	cp	a, e
;	jr	c, BB17_3
;	ld	hl, (ix + 6)
;	ld	h, (hl)
;	ld	l, 0
;BB17_7:
;	ld	a, e
;	ld	de, (ix - 9)
;	add	iy, de
;	ld	e, a
;	inc	b
;	ld	a, b
;	cp	a, h
;	jr	c, BB17_2
;BB17_8:
;	ld	sp, ix
;	pop	ix
;	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_TransparentSprite
gfy_TransparentSprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 34
	ld	sp, hl
	ld	hl, (ix + 9)
	ld	iy, (gfy_ClipXMax)
	ld	de, -8388608
	add	iy, de
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB18_25
	ld	hl, (ix + 12)
	ld	a, (gfy_ClipYMax)
	ld	de, 0
	lea	bc, iy
	push	de
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	add	hl, de
	ld	(ix - 3), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB18_25
	ld	hl, (ix + 6)
	ld	e, (hl)
	ld	a, e
	or	a, a
	jp	z, BB18_25
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	(ix - 4), a
	or	a, a
	jp	z, BB18_25
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	a, e
	ld	de, (ix + 9)
	add	hl, de
	ld	(ix - 7), bc
	ld	iy, (gfy_ClipXMin)
	ld	de, -8388608
	add	iy, de
	ld	(ix - 19), hl
	add	hl, de
	ld	(ix - 16), a
	ld	(ix - 10), hl
	ld	(ix - 13), iy
	lea	de, iy
	ld	iy, (ix - 7)
	or	a, a
	sbc	hl, de
	jp	c, BB18_25
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	l, (ix - 4)
	ld	(ix - 28), hl
	ld	de, (ix + 12)
	add	hl, de
	ld	a, (gfy_ClipYMin)
	push	bc
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	ld	(ix - 31), hl
	add	hl, de
	ld	(ix - 22), hl
	ld	(ix - 25), iy
	lea	de, iy
	ld	iy, (ix - 7)
	or	a, a
	sbc	hl, de
	jp	c, BB18_25
	ld	hl, (ix + 9)
	ld	bc, -8388608
	add	hl, bc
	ld	de, (ix - 13)
	or	a, a
	sbc	hl, de
	push	bc
	pop	de
	jr	c, BB18_10
	ld	hl, (ix + 12)
	add	hl, de
	ld	de, (ix - 25)
	or	a, a
	sbc	hl, de
	jr	c, BB18_10
	lea	hl, iy
	ld	de, (ix - 10)
	or	a, a
	sbc	hl, de
	jr	c, BB18_10
	ld	hl, (ix - 3)
	ld	de, (ix - 22)
	or	a, a
	sbc	hl, de
	jp	nc, BB18_26
BB18_10:
	call	gfy_Wait
	ld	bc, 0
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 25), hl
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, de
	ld	(ix - 34), hl
	ld	a, (gfy_ClipYMin)
	push	bc
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix + 12)
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	hl, 0
	jr	nc, BB18_12
	ld	hl, (ix + 12)
	sub	a, l
	or	a, a
	sbc	hl, hl
	ld	l, a
BB18_12:
	ld	(ix - 13), hl
	ld	iy, (gfy_ClipXMax)
	ld	hl, (ix - 19)
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 7), hl
	ld	de, -8388608
	add	iy, de
	lea	hl, iy
	ld	de, (ix - 10)
	or	a, a
	sbc	hl, de
	jr	c, BB18_14
	or	a, a
	sbc	hl, hl
	ld	(ix - 7), hl
BB18_14:
	ld	a, (gfy_ClipYMax)
	ld	e, a
	push	bc
	pop	hl
	ld	l, e
	ld	bc, -8388608
	add	hl, bc
	ld	bc, (ix - 22)
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	jr	nc, BB18_16
	ld	hl, (ix - 31)
	ld	a, l
	sub	a, e
	or	a, a
	sbc	hl, hl
	ld	l, a
BB18_16:
	ld	(ix - 3), hl
	ld	hl, (ix - 34)
	ld	bc, 255
	inc.s	hl
	dec	hl
	ld	h, b
	ld	(ix - 10), hl
	ld	hl, -8388608
	ex	de, hl
	ld	iy, (ix - 25)
	add	iy, de
	ld	hl, (ix + 9)
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB18_18
	or	a, a
	sbc	hl, hl
	ld	(ix - 10), hl
BB18_18:
	ld	hl, (ix - 7)
	ld	a, l
	ld	hl, (ix - 10)
	add	a, l
	ld	c, a
	ld	b, (ix - 16)
	ld	a, b
	sub	a, c
	ld	(ix - 19), a
	ld	iy, (ix - 3)
	ld	de, (ix - 13)
	add	iy, de
	ld	a, (ix - 4)
	sub	a, iyl
	ld	de, 0
	ld	e, a
	ld	hl, (-1900524)
	ld	(ix - 7), hl
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 22), hl
	ld	a, b
	cp	a, c
	lea	hl, iy
	jp	z, BB18_25
	ld	(ix - 3), hl
	ld	hl, (ix - 13)
	ld	bc, (ix + 12)
	add	hl, bc
	ld	(ix - 16), de
	push	hl
	pop	bc
	ld	iy, (ix - 7)
	add	iy, bc
	ld	hl, (ix - 10)
	ld	de, (ix + 9)
	add	hl, de
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 7), iy
	ld	iy, (ix + 6)
	ld	de, (ix - 13)
	add	iy, de
	ld	hl, (ix - 10)
	ld	bc, (ix - 28)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	lea	iy, iy + 2
	ld	hl, (ix - 3)
	ld	bc, 255
	inc.s	hl
	dec	hl
	ld	h, b
	ld	d, b
	ld	a, d
	ld	(ix - 13), hl
	ld	hl, (ix - 3)
BB18_20:
	ld	(ix - 10), a
	ld	bc, (ix - 7)
	ld	a, (ix - 4)
	cp	a, l
	ld	hl, (ix - 16)
	ld	e, l
	jr	z, BB18_24
BB18_21:
	ld	d, (iy)
	ld	a, (gfy_Transparent_Color)
	ld	h, a
	ld	a, d
	cp	a, h
	jr	nz, BB18_23
	push	bc
	pop	hl
	ld	d, (hl)
BB18_23:
	push	bc
	pop	hl
	ld	(hl), d
	inc	iy
	inc	hl
	push	hl
	pop	bc
	dec	e
	ld	a, e
	or	a, a
	jr	nz, BB18_21
BB18_24:
	ld	de, (ix - 13)
	add	iy, de
	push	bc
	pop	hl
	ld	bc, (ix - 22)
	add	hl, bc
	ld	(ix - 7), hl
	ld	a, (ix - 10)
	inc	a
	ld	l, (ix - 19)
	cp	a, l
	ld	hl, (ix - 3)
	jr	nz, BB18_20
BB18_25:
	ld	sp, ix
	pop	ix
	ret
BB18_26:
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	gfy_TransparentSprite_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	jr	BB18_25
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_TransparentTilemap_NoClip
gfy_TransparentTilemap_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 29
	ld	sp, hl
	ld	iy, (ix + 6)
	ld	de, 0
	push	de
	pop	bc
	ld	c, (iy + 7)
	push	de
	pop	hl
	ld	l, (iy + 13)
	ld	a, (iy + 9)
	ld	(ix - 6), a
	ld	e, a
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, de
	ld	(ix - 13), hl
	ld	iy, (iy + 15)
	ld	hl, (ix + 9)
	call	__idivu
	ld	(ix - 10), hl
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	lea	hl, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 23), hl
	ld	iy, (ix + 6)
	ld	e, (iy + 8)
	ld	a, e
	or	a, a
	jp	z, BB19_18
	ld	bc, (ix + 12)
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	a, (iy + 14)
	ld	(ix - 16), a
	ld	a, (iy + 6)
	ld	(ix - 7), a
	ld	iyl, e
	ld	de, 0
	ld	e, a
	push	bc
	pop	hl
	push	de
	pop	bc
	call	__idivu
	ld	b, l
	ld	c, e
	ld	e, iyl
	mlt	bc
	ld	iy, (ix + 12)
	ld	a, iyl
	sub	a, c
	ld	c, a
	ld	a, (ix - 16)
	sub	a, c
	ld	iyl, a
	ld	bc, (ix - 3)
	call	__imulu
	ld	bc, (ix - 10)
	add	hl, bc
	ld	b, e
	ld	c, d
BB19_2:
	ld	a, (ix - 6)
	or	a, a
	jr	nz, BB19_4
	xor	a, a
	ld	(ix - 6), a
	ld	(ix - 3), hl
	jp	BB19_17
BB19_4:
	ld	(ix - 26), c
	ld	bc, 0
	push	bc
	pop	de
	push	af
	ld	a, iyl
	ld	(ix - 25), a
	pop	af
	ld	e, iyl
	ld	(ix - 29), de
	xor	a, a
	ld	(ix - 7), a
	ld	de, (ix - 23)
	ld	(ix - 6), de
	ex	de, hl
	ld	iy, (ix + 6)
BB19_5:
	ld	hl, (iy + 3)
	ld	(ix - 10), hl
	ld	iy, (iy)
	ld	(ix - 3), de
	add	iy, de
	push	bc
	pop	hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 10)
	add	hl, de
	ld	hl, (hl)
	ld	(ix - 10), hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 20), hl
	ld	iy, (ix - 10)
	ld	d, (iy + 1)
	ld	bc, 0
	ld	c, d
	ld	hl, 240
	or	a, a
	sbc	hl, bc
	ld	(ix - 16), hl
	ld	a, (iy)
	ld	(ix - 17), a
	or	a, a
	jr	z, BB19_15
	ld	bc, (ix - 29)
	ld	iy, (ix - 20)
	add	iy, bc
	ld	hl, (ix - 6)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	lea	bc, iy
	ld	a, d
	cp	a, 2
	ld	(ix - 20), d
	jr	nc, BB19_8
	ld	a, 1
	ld	(ix - 20), a
BB19_8:
	ld	iy, (ix - 10)
	lea	hl, iy + 2
	ld	(ix - 10), hl
	ld	h, d
	ld	e, 0
	push	bc
	pop	iy
	ld	(ix - 24), d
BB19_9:
	ld	a, h
	or	a, a
	ld	h, 0
	ld	c, (ix - 20)
	jr	z, BB19_14
BB19_10:
	ld	hl, (ix - 10)
	ld	d, (hl)
	ld	a, (gfy_Transparent_Color)
	ld	b, a
	ld	a, d
	cp	a, b
	jr	nz, BB19_12
	ld	d, (iy)
BB19_12:
	ld	(iy), d
	inc	hl
	ld	(ix - 10), hl
	inc	iy
	dec	c
	ld	a, c
	or	a, a
	ld	d, (ix - 24)
	jr	nz, BB19_10
	ld	h, d
BB19_14:
	ld	bc, (ix - 16)
	add	iy, bc
	inc	e
	ld	a, e
	ld	l, (ix - 17)
	cp	a, l
	jr	nz, BB19_9
BB19_15:
	ld	bc, 0
	push	bc
	pop	de
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	ld	hl, (ix - 6)
	add	hl, de
	ld	(ix - 6), hl
	ld	de, (ix - 3)
	inc	de
	ld	a, (ix - 7)
	inc	a
	ld	l, (iy + 9)
	ld	(ix - 7), a
	cp	a, l
	jp	c, BB19_5
	ld	(ix - 6), l
	ld	a, (iy + 6)
	ld	(ix - 7), a
	ld	(ix - 3), de
	ld	b, (iy + 8)
	push	af
	ld	a, (ix - 25)
	ld	iyl, a
	pop	af
	ld	c, (ix - 26)
BB19_17:
	ld	hl, (ix - 13)
	ld	de, (ix - 3)
	add	hl, de
	ld	a, (ix - 7)
	add	a, iyl
	ld	iyl, a
	inc	c
	ld	a, c
	cp	a, b
	jp	c, BB19_2
BB19_18:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_GetSprite
gfy_GetSprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 7
	ld	sp, hl
	ld	hl, (ix + 6)
	xor	a, a
	ld	(ix - 4), a
	ld	bc, (-1900524)
	ld	a, (hl)
	or	a, a
	jr	z, BB20_3
	ld	hl, (ix + 12)
	
	push	bc
	pop	iy
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 9)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	lea	hl, iy + 2
	ld	de, 0
	ld	e, (iy + 1)
BB20_2:
	push	de
	ld	de, (ix - 3)
	push	de
	ld	(ix - 7), hl
	push	hl
	call	_memcpy
	ld	iy, (ix + 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	ld	de, 0
	ld	e, (iy + 1)
	ld	hl, (ix - 7)
	add	hl, de
	ld	a, (ix - 4)
	inc	a
	ld	c, (iy)
	ld	(ix - 4), a
	cp	a, c
	jr	c, BB20_2
BB20_3:
	ld	hl, (ix + 6)
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ScaledSprite_NoClip
gfy_ScaledSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 25
	ld	sp, hl
	ld	l, (ix + 15)
	ld	iy, 0
	ld	a, l
	or	a, a
	jp	z, BB21_17
	ld	c, (ix + 18)
	ld	a, c
	or	a, a
	jp	z, BB21_17
	lea	de, iy
	ld	e, l
	ld	(ix - 6), de
	lea	hl, iy
	ld	l, c
	ld	(ix - 9), hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	hl, (ix + 9)
	call	__set_bc_and_mul_hl_by_240
	ld	(ix - 19), hl
	ld	hl, (ix - 6)
	call	__imulu
	ld	(ix - 6), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	or	a, a
	sbc	hl, hl
	ld	(ix - 15), a
	ld	l, a
	ld	bc, (ix - 9)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	ld	iy, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), hl
	ld	l, (iy)
	ld	a, l
	or	a, a
	jr	nz, BB21_5
	ld	a, (ix + 15)
	cp	a, 1
	jp	z, BB21_17
	ld	hl, (-1900524)
	jp	BB21_17
BB21_5:
	ld	de, 0
	ld	e, (ix + 12)
	ld	(ix - 25), de
	ld	iy, (ix - 3)
	add	iy, de
	ld	de, (ix - 19)
	add	iy, de
	lea	bc, iy
	ld	iy, (ix + 6)
	lea	de, iy + 2
	ld	(ix - 6), de
	ld	a, (ix + 18)
	dec	a
	ld	iy, 0
	ld	iyl, a
	ld	(ix - 22), iy
	push	af
	ld	a, (ix - 15)
	ld	iyl, a
	pop	af
	ld	iyh, iyl
	ld	d, 0
	ld	a, d
BB21_6:
	ld	(ix - 15), a
	ld	a, iyl
	or	a, a
	ld	iyl, d
	ld	a, d
	jr	z, BB21_9
BB21_7:
	ld	(ix - 16), a
	ld	hl, (ix - 6)
	ld	a, (hl)
	ld	hl, (ix - 9)
	push	hl
	ld	l, a
	push	hl
	ld	(ix - 3), bc
	push	bc
	call	_memset
	ld	a, (ix - 16)
	ld	iy, (ix + 6)
	ld	d, 0
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	bc, (ix - 22)
	ld	hl, (ix - 3)
	add	hl, bc
	inc	hl
	push	hl
	pop	bc
	inc	a
	ld	l, (iy + 1)
	ex	de, hl
	ld	iyh, e
	ex	de, hl
	cp	a, l
	jr	c, BB21_7
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	iyl, iyh
BB21_9:
	ld	e, l
	push	bc
	pop	hl
	ld	bc, (ix - 12)
	add	hl, bc
	push	hl
	pop	bc
	ld	l, e
	ld	a, (ix - 15)
	inc	a
	cp	a, l
	jr	c, BB21_6
	ld	a, (ix + 15)
	cp	a, 1
	jp	z, BB21_17
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, iyh
	ex	de, hl
	ld	bc, (ix - 9)
	call	__imulu
	ld	bc, (ix - 25)
	ld	(ix - 9), hl
	ld	a, e
	ld	e, (ix + 15)
	ld	iyl, a
	or	a, a
	jr	z, BB21_17
	ld	hl, (ix - 3)
	add	hl, bc
	ld	bc, (ix - 19)
	add	hl, bc
	ld	a, e
	dec	a
	ld	(ix - 16), a
	push	hl
	pop	bc
BB21_13:
	ld	(ix - 3), bc
	ld	bc, 240
	add	hl, bc
	ld	a, e
	cp	a, 2
	ld	a, (ix - 16)
	ld	(ix - 6), a
	push	hl
	pop	bc
	jr	c, BB21_16
BB21_14:
	ld	(ix - 12), d
	ld	hl, (ix - 9)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 15), bc
	push	bc
	call	_memcpy
	ld	iy, (ix + 6)
	ld	d, (ix - 12)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	e, (ix + 15)
	ld	bc, 240
	ld	hl, (ix - 15)
	add	hl, bc
	push	hl
	pop	bc
	ld	a, (ix - 6)
	dec	a
	ld	(ix - 6), a
	or	a, a
	jr	nz, BB21_14
	ld	a, (iy)
	ld	iyl, a
BB21_16:
	inc	d
	ld	a, d
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	cp	a, l
	push	bc
	pop	hl
	jr	c, BB21_13
BB21_17:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ScaledTransparentSprite_NoClip
gfy_ScaledTransparentSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 19
	ld	sp, hl
	ld	a, (ix + 15)
	or	a, a
	jp	z, BB22_13
	ld	e, (ix + 18)
	ld	a, e
	or	a, a
	jp	z, BB22_13
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	(ix - 7), hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	or	a, a
	sbc	hl, hl
	ld	(ix - 4), a
	ld	l, a
	ld	bc, (ix - 7)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, 240
	push	hl
	pop	de
	or	a, a
	sbc	hl, bc
	ld	c, (ix + 18)
	ld	(ix - 14), hl
	ld	hl, (ix + 6)
	ld	a, (hl)
	or	a, a
	jp	z, BB22_13
	ld	hl, (ix + 9)
	ld	a, c
	ld	bc, 0
	ld	c, (ix + 12)
	ld	iy, (ix - 3)
	add	iy, bc
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	lea	iy, iy + 2
	dec	a
	or	a, a
	sbc	hl, hl
	ld	l, a
	inc	hl
	ld	(ix - 19), hl
	xor	a, a
BB22_4:
	ld	(ix - 15), a
	ld	l, (ix - 4)
	ld	c, 0
BB22_5:
	ld	a, l
	or	a, a
	ld	(ix - 8), c
	jr	nz, BB22_7
	xor	a, a
	ld	l, a
	jr	BB22_11
BB22_7:
	ld	a, (gfy_Transparent_Color)
	ld	d, a
	ld	e, 0
BB22_8:
	ld	a, (iy)
	cp	a, d
	ld	bc, (ix - 7)
	lea	hl, iy
	jr	z, BB22_10
	ld	(ix - 11), hl
	ld	hl, (ix - 7)
	push	hl
	ld	l, a
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 16), e
	call	_memset
	ld	e, (ix - 16)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 11)
	ld	a, (gfy_Transparent_Color)
	ld	d, a
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	(ix - 4), a
	ld	bc, (ix - 19)
BB22_10:
	inc	hl
	push	hl
	pop	iy
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	inc	e
	ld	a, e
	ld	l, (ix - 4)
	cp	a, l
	jr	c, BB22_8
BB22_11:
	ld	(ix - 11), l
	ld	bc, 0
	ld	c, l
	ld	hl, (ix - 3)
	ld	de, (ix - 14)
	add	hl, de
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	sbc	hl, bc
	push	hl
	pop	bc
	add	iy, bc
	ld	c, (ix - 8)
	inc	c
	ld	a, c
	ld	l, (ix + 15)
	cp	a, l
	ld	l, (ix - 11)
	jp	nz, BB22_5
	ld	bc, 0
	ld	c, (ix - 4)
	add	iy, bc
	ld	a, (ix - 15)
	inc	a
	ld	hl, (ix + 6)
	ld	l, (hl)
	cp	a, l
	jp	c, BB22_4
BB22_13:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_FloodFill
gfy_FloodFill:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 41
	ld	sp, hl
	ld	bc, (ix + 6)
	ld	iy, (gfy_ClipXMin)
	ld	de, -8388608
	ld	(ix - 6), iy
	add	iy, de
	push	bc
	pop	hl
	add	hl, de
	push	hl
	pop	de
	ld	(ix - 3), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	c, BB23_39
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 9), iy
	ld	bc, -8388608
	add	iy, bc
	ex	de, hl
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB23_39
	ld	c, (ix + 9)
	ld	a, (gfy_ClipYMin)
	ld	l, a
	ld	a, c
	ld	(ix - 13), l
	cp	a, l
	jp	c, BB23_39
	ld	a, (gfy_ClipYMax)
	ld	l, a
	ld	a, c
	ld	(ix - 17), l
	cp	a, l
	jp	nc, BB23_39
	ld	a, c
	ld	bc, 240
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, a
	ld	iy, (-1900524)
	ld	hl, (ix + 6)
	call	__imulu
	add	hl, de
	push	hl
	pop	bc
	ld	(ix - 20), iy
	lea	hl, iy
	add	hl, bc
	ld	c, a
	ld	a, (hl)
	ld	(ix - 21), a
	ld	l, (ix + 12)
	cp	a, l
	jp	z, BB23_39
	ld	a, c
	ld	bc, 3072
	ld	hl, 0
	add	hl, sp
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	sp, iy
	ld	hl, (ix + 6)
	ld	(iy), l
	ld	(iy + 1), h
	ld	(ix - 28), iy
	ld	(iy + 2), a
	ld	l, (ix - 17)
	dec	l
	ld	(ix - 17), l
	ld	iy, (ix - 6)
	lea	hl, iy
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	hl, (ix - 20)
	add	hl, bc
	ld	(ix - 34), hl
	ld	bc, 1
	dec	iy
	ld	(ix - 6), iy
	ld	hl, (ix - 9)
	dec	hl
	ld	(ix - 9), hl
BB23_6:
	dec	bc
	ld	(ix - 24), bc
	push	bc
	pop	hl
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (iy)
	ld	a, (iy + 2)
	ld	bc, 0
	push	bc
	pop	iy
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	push	bc
	pop	de
	ld	(ix - 25), a
	ld	e, a
	lea	hl, iy
	call	__set_bc_and_mul_hl_by_240
	ld	(ix - 31), de
	add	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 20)
	add	hl, bc
	ld	(ix - 16), hl
	lea	hl, iy
	ld	de, -8388608
	add	hl, de
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	c, BB23_11
	ld	hl, (ix - 34)
	ld	de, (ix - 31)
	add	hl, de
	ld	de, -240
	add	hl, de
	ld	(ix - 31), hl
	ld	hl, (ix - 16)
BB23_8:
	ld	(ix - 16), hl
	ld	a, (hl)
	ld	l, (ix - 21)
	cp	a, l
	ld	bc, -8388608
	jr	nz, BB23_12
	dec	iy
	ld	de, -240
	ld	hl, (ix - 16)
	add	hl, de
	ex	de, hl
	lea	hl, iy
	inc	hl
	add	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	ex	de, hl
	jr	c, BB23_8
	ld	hl, (ix - 31)
	ld	(ix - 16), hl
	ld	iy, (ix - 6)
BB23_11:
	ld	bc, -8388608
BB23_12:
	ld	de, (ix - 9)
	lea	hl, iy
	inc	hl
	add	hl, bc
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	jp	nc, BB23_37
	ld	a, (ix - 25)
	ld	l, a
	dec	l
	ld	(ix - 37), l
	inc	a
	ld	(ix - 38), a
	ex	de, hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 31), hl
	inc.sis	de
	ld	bc, 241
	ld	iy, (ix - 16)
	add	iy, bc
	xor	a, a
	ld	(ix - 35), a
	ld	(ix - 36), a
	ld	bc, (ix - 24)
BB23_14:
	ld	a, (iy - 1)
	ld	l, (ix - 21)
	cp	a, l
	jp	nz, BB23_38
	ld	(ix - 41), de
	ld	(ix - 16), iy
	push	bc
	pop	hl
	ld	de, 1022
	or	a, a
	sbc	hl, de
	jp	nc, BB23_38
	ld	a, (ix + 12)
	ld	iy, (ix - 16)
	ld	(iy - 1), a
	ld	a, (ix - 13)
	ld	l, (ix - 25)
	cp	a, l
	ld	(ix - 24), bc
	jr	nc, BB23_20
	ld	l, (iy - 2)
	ld	a, (ix - 35)
	and	a, 1
	ld	c, a
	bit	0, c
	jr	nz, BB23_21
	ld	a, l
	ld	h, (ix - 21)
	cp	a, h
	jr	nz, BB23_21
	ld	hl, (ix - 24)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (ix - 41)
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (ix - 37)
	ld	(iy + 2), a
	ld	de, (ix - 9)
	ld	hl, (ix - 24)
	inc	hl
	ld	(ix - 24), hl
	ld	a, 1
	jr	BB23_25
BB23_20:
	ld	bc, 240
	ld	de, (ix - 9)
	jr	BB23_27
BB23_21:
	ld	a, c
	xor	a, 1
	ld	c, a
	ld	a, l
	ld	l, (ix - 21)
	cp	a, l
	ld	l, -1
	jr	z, BB23_23
	ld	l, 0
BB23_23:
	ld	a, c
	or	a, l
	bit	0, a
	ld	de, (ix - 9)
	jr	nz, BB23_26
	xor	a, a
BB23_25:
	ld	(ix - 35), a
BB23_26:
	ld	bc, 240
BB23_27:
	ld	a, (ix - 25)
	ld	l, (ix - 17)
	cp	a, l
	jr	nc, BB23_36
	ld	hl, (ix - 16)
	ld	l, (hl)
	ld	a, (ix - 36)
	and	a, 1
	ld	c, a
	bit	0, c
	jr	nz, BB23_31
	ld	a, l
	ld	h, (ix - 21)
	cp	a, h
	jr	nz, BB23_31
	ld	de, (ix - 24)
	push	de
	pop	hl
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (ix - 41)
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (ix - 38)
	ld	(iy + 2), a
	inc	de
	ld	(ix - 24), de
	ld	a, 1
	jr	BB23_34
BB23_31:
	ld	a, c
	xor	a, 1
	ld	c, a
	ld	a, l
	ld	l, (ix - 21)
	cp	a, l
	ld	l, -1
	jr	z, BB23_33
	ld	l, 0
BB23_33:
	ld	a, c
	or	a, l
	bit	0, a
	ld	a, 0
	jr	nz, BB23_35
BB23_34:
	ld	(ix - 36), a
BB23_35:
	ld	bc, 240
BB23_36:
	ld	hl, (ix - 31)
	dec	hl
	ld	de, (ix - 41)
	inc.sis	de
	ld	iy, (ix - 16)
	add	iy, bc
	ld	(ix - 31), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, (ix - 24)
	jp	nz, BB23_14
	jr	BB23_38
BB23_37:
	ld	bc, (ix - 24)
BB23_38:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, (ix - 9)
	jp	nz, BB23_6
BB23_39:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_RLETSprite
gfy_RLETSprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 27
	ld	sp, hl
	ld	hl, (ix + 9)
	ld	iy, (gfy_ClipXMax)
	ld	de, -8388608
	add	iy, de
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB24_40
	ld	a, (gfy_ClipYMax)
	or	a, a
	sbc	hl, hl
	lea	bc, iy
	push	hl
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix + 12)
	add	hl, de
	ld	(ix - 3), hl
	ld	(ix - 6), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB24_40
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	a, l
	or	a, a
	jp	z, BB24_40
	ld	iy, (ix + 6)
	ld	e, (iy + 1)
	ld	a, e
	or	a, a
	jp	z, BB24_40
	ld	(ix - 9), e
	ld	a, l
	ld	(ix - 12), bc
	ld	iy, (gfy_ClipXMin)
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 9)
	ld	de, -8388608
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB24_8
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	l, a
	ld	(ix - 15), hl
	push	bc
	pop	hl
	ld	l, (ix - 9)
	ld	(ix - 9), hl
	ld	a, (gfy_ClipYMin)
	ld	c, a
	ld	(ix - 18), bc
	ld	de, (ix + 9)
	ld	hl, (ix - 15)
	add	hl, de
	push	hl
	pop	bc
	ld	de, (ix + 12)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, -8388608
	ld	hl, (ix - 18)
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, de
	jr	c, BB24_8
	ld	de, -8388608
	push	bc
	pop	iy
	add	iy, de
	ld	hl, (ix - 12)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	c, BB24_8
	ld	de, -8388608
	ld	iy, (ix - 9)
	add	iy, de
	ld	hl, (ix - 6)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB24_41
BB24_8:
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	de, 0
	ld	(ix - 6), a
	ld	e, a
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 18), hl
	ld	a, (iy)
	ld	(ix - 12), a
	or	a, a
	ld	hl, (ix + 9)
	jp	z, BB24_40
	call	__set_bc_and_mul_hl_by_240
	ld	bc, (ix + 9)
	ld	de, (ix + 12)
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	lea	hl, iy + 2
	ld	(ix - 21), hl
	ld	a, (ix - 6)
	ld	iy, 0
BB24_10:
	ld	(ix - 15), iy
	add	iy, bc
	ld	bc, (gfy_ClipXMin)
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 9), hl
	ld	de, -8388608
	push	bc
	pop	hl
	add	hl, de
	push	hl
	pop	bc
	add	iy, de
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB24_14
	ld	hl, (ix - 9)
	add	hl, de
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB24_14
	ld	e, a
	or	a, a
	jr	nz, BB24_20
	xor	a, a
	sbc	hl, hl
	ld	iy, (ix - 3)
	jp	BB24_38
BB24_14:
	ld	hl, (ix - 9)
	add	hl, de
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB24_40
	ld	e, a
	or	a, a
	sbc	hl, hl
	or	a, a
	jr	nz, BB24_17
	ld	a, e
	jp	BB24_34
BB24_17:
	push	hl
	pop	bc
	ld	c, e
	ld	(ix - 9), bc
	ld	iy, 0
	ld	a, e
BB24_18:
	push	hl
	pop	bc
	ld	hl, (ix - 21)
	push	hl
	pop	de
	ld	c, (hl)
	add	iy, bc
	lea	hl, iy
	ld	bc, (ix - 9)
	or	a, a
	sbc	hl, bc
	jp	nc, BB24_33
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 27), bc
	ex	de, hl
	ld	de, (ix - 27)
	ld	(ix - 24), iy
	push	hl
	pop	iy
	ld	e, (iy + 1)
	add	hl, de
	push	hl
	pop	iy
	lea	iy, iy + 2
	ld	(ix - 21), iy
	ld	iy, (ix - 24)
	add	iy, de
	lea	hl, iy
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	push	bc
	pop	hl
	jr	c, BB24_18
	jp	BB24_34
BB24_20:
	ld	hl, (ix - 21)
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	iy, (ix - 3)
	add	iy, bc
	cp	a, e
	jp	nc, BB24_35
	ld	(ix - 12), bc
	ld	hl, (ix - 21)
	ld	(ix - 9), hl
	ld	e, (ix - 6)
BB24_22:
	ld	(ix - 3), iy
	ld	bc, (ix - 9)
	push	bc
	pop	iy
	lea	hl, iy + 2
	ld	c, (iy + 1)
	ld	a, c
	or	a, a
	jr	nz, BB24_24
	ld	(ix - 9), hl
	or	a, a
	sbc	hl, hl
	ld	a, e
	ld	iy, (ix - 3)
	jr	BB24_31
BB24_24:
	ld	a, (gfy_ClipYMin)
	ld	(ix - 21), a
	ld	(ix - 9), hl
	ld	hl, (ix - 12)
	ld	(ix - 6), hl
	ld	iy, (ix - 3)
BB24_25:
	ld	(ix - 12), c
	ld	hl, (ix + 12)
	ld	de, (ix - 6)
	add	hl, de
	ld	(ix - 3), hl
	ld	bc, 0
	ld	c, (ix - 21)
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	nc, BB24_27
	ld	c, (ix - 12)
	jr	BB24_29
BB24_27:
	ld	a, (gfy_ClipYMax)
	ld	bc, 0
	ld	c, a
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	ld	c, (ix - 12)
	jr	nc, BB24_29
	ld	hl, (ix - 9)
	ld	a, (hl)
	ld	(iy), a
	ld	a, (gfy_ClipYMin)
	ld	(ix - 21), a
BB24_29:
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 9), hl
	inc	de
	ld	(ix - 6), de
	inc	iy
	dec	c
	ld	a, c
	or	a, a
	ld	hl, 0
	jr	nz, BB24_25
	lea	de, iy
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	push	de
	pop	iy
	ld	de, (ix - 6)
	ld	(ix - 12), de
BB24_31:
	push	hl
	pop	bc
	ld	c, a
	ex	de, hl
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, bc
	jr	nc, BB24_36
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 21), hl
	ld	(ix - 3), de
	ld	de, (ix - 3)
	ld	hl, (ix - 9)
	ld	e, (hl)
	ld	(ix - 3), de
	ld	hl, (ix - 12)
	ld	de, (ix - 3)
	add	hl, de
	ld	de, (ix - 3)
	add	iy, de
	ld	(ix - 12), hl
	or	a, a
	sbc	hl, bc
	ld	c, a
	ld	hl, 0
	ld	e, a
	jr	nc, BB24_37
	jp	BB24_22
BB24_33:
	inc	de
	ld	(ix - 21), de
	or	a, a
	sbc	hl, hl
BB24_34:
	ld	bc, 240
	ex	de, hl
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	ex	de, hl
	jr	BB24_39
BB24_35:
	ld	c, e
	ld	de, (ix - 21)
	inc	de
	ld	(ix - 21), de
	ld	e, (ix - 6)
	jr	BB24_37
BB24_36:
	ld	c, a
	ld	hl, (ix - 9)
	ld	(ix - 21), hl
	ex	de, hl
	ld	e, a
BB24_37:
	ld	(ix - 6), e
	ex	de, hl
	ld	hl, (ix + 6)
	ld	a, (hl)
	ex	de, hl
	ld	(ix - 12), a
	ld	a, c
BB24_38:
	ld	bc, (ix - 18)
	add	iy, bc
	ld	(ix - 3), iy
BB24_39:
	ld	iy, (ix - 15)
	inc	iy
	push	hl
	pop	bc
	ld	c, (ix - 12)
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ld	bc, (ix + 9)
	jp	c, BB24_10
BB24_40:
	ld	sp, ix
	pop	ix
	ret
BB24_41:
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	de, 0
	ld	(ix - 12), a
	ld	e, a
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	a, (iy)
	ld	(ix - 9), a
	or	a, a
	ld	hl, (ix + 9)
	jr	z, BB24_40
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	ld	hl, (ix + 12)
	ld	bc, 255
	inc.s	hl
	dec	hl
	ld	h, b
	add	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	ld	c, 0
	ld	a, c
	ld	iy, (ix + 6)
	lea	bc, iy + 2
	ld	iyl, a
	ld	(ix - 6), bc
	ld	d, (ix - 12)
	ld	e, iyl
BB24_43:
	ld	a, d
	or	a, a
	jr	nz, BB24_45
	ld	d, iyl
	jp	BB24_58
BB24_45:
	ld	iy, (ix - 6)
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	cp	a, d
	jp	nc, BB24_56
	ld	(ix - 21), e
	ld	(ix - 9), bc
	ld	(ix - 6), iy
BB24_47:
	ld	iy, (ix - 6)
	lea	hl, iy + 2
	ld	(ix - 18), hl
	ld	d, (iy + 1)
	ld	bc, 0
	ld	c, d
	ld	hl, (ix - 9)
	add	hl, bc
	ld	(ix - 9), hl
	ld	a, d
	or	a, a
	jr	nz, BB24_49
	ld	hl, (ix - 18)
	ld	(ix - 6), hl
	ld	d, (ix - 12)
	ld	e, (ix - 21)
	jr	BB24_52
BB24_49:
	ld	e, (ix - 21)
	ld	hl, (ix - 18)
BB24_50:
	ld	a, (hl)
	inc	hl
	ld	iy, (ix - 3)
	ld	(iy), a
	inc	iy
	ld	(ix - 3), iy
	dec	d
	ld	a, d
	or	a, a
	jr	nz, BB24_50
	ld	(ix - 6), hl
	ld	iy, (ix + 6)
	ld	d, (iy + 1)
BB24_52:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, d
	ld	iy, (ix - 9)
	lea	hl, iy
	sbc	hl, bc
	ld	(ix - 12), d
	jr	nc, BB24_55
	or	a, a
	sbc	hl, hl
	ld	(ix - 18), hl
	ld	hl, (ix - 18)
	ld	iy, (ix - 6)
	ld	l, (iy)
	ld	(ix - 18), hl
	ld	de, (ix - 18)
	ld	hl, (ix - 9)
	add	hl, de
	push	hl
	pop	iy
	ld	hl, (ix - 3)
	ld	de, (ix - 18)
	add	hl, de
	ld	(ix - 3), hl
	lea	hl, iy
	ld	(ix - 9), hl
	or	a, a
	sbc	hl, bc
	jp	c, BB24_47
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	d, (ix - 12)
	ld	e, (ix - 21)
BB24_55:
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	(ix - 9), l
	jr	BB24_57
BB24_56:
	inc	iy
	ld	(ix - 6), iy
BB24_57:
	ld	c, 0
	ld	iyl, c
BB24_58:
	ld	bc, (ix - 15)
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	inc	e
	ld	a, e
	ld	l, (ix - 9)
	cp	a, l
	jp	c, BB24_43
	jp	BB24_40
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_RLETSprite_NoClip
gfy_RLETSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 20
	ld	sp, hl
	call	gfy_Wait
	ld	bc, (-1900524)
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	de, 0
	ld	(ix - 7), a
	ld	e, a
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 6), hl
	ld	hl, (ix + 6)
	ld	d, (hl)
	ld	a, d
	or	a, a
	jp	z, BB25_17
	push	bc
	pop	iy
	ld	hl, (ix + 9)
	ld	a, (ix + 12)
	call	__set_bc_and_mul_hl_by_240
	ld	bc, 0
	ld	c, a
	add	hl, bc
	push	hl
	pop	bc
	lea	hl, iy
	add	hl, bc
	ld	iy, (ix + 6)
	lea	bc, iy + 2
	ld	(ix - 13), bc
	push	af
	ld	a, (ix - 7)
	ld	iyl, a
	pop	af
	ld	e, 0
BB25_2:
	ld	a, iyl
	or	a, a
	jr	nz, BB25_4
	ld	iyl, 0
	jp	BB25_16
BB25_4:
	ld	d, iyl
	ld	iy, (ix - 13)
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	add	hl, bc
	ld	(ix - 3), hl
	ld	(ix - 16), d
	cp	a, d
	jp	nc, BB25_13
	ld	(ix - 10), bc
BB25_6:
	lea	hl, iy + 2
	ld	(ix - 13), hl
	ld	d, (iy + 1)
	ld	bc, 0
	ld	c, d
	ld	iy, (ix - 10)
	add	iy, bc
	ld	(ix - 10), iy
	ld	a, d
	or	a, a
	jr	nz, BB25_8
	ld	hl, (ix - 13)
	ld	(ix - 19), hl
	ld	a, (ix - 7)
	jr	BB25_11
BB25_8:
	ld	hl, (ix - 13)
BB25_9:
	ld	a, (hl)
	inc	hl
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	ld	(iy), a
	inc	bc
	ld	(ix - 3), bc
	dec	d
	ld	a, d
	or	a, a
	jr	nz, BB25_9
	ld	(ix - 19), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
BB25_11:
	ld	iy, 0
	lea	bc, iy
	ld	c, a
	ld	hl, (ix - 10)
	or	a, a
	sbc	hl, bc
	ld	(ix - 7), a
	jr	nc, BB25_14
	ld	hl, (ix - 19)
	inc	hl
	ld	(ix - 13), hl
	ld	(ix - 16), iy
	ld	iy, (ix - 19)
	ld	hl, (ix - 16)
	ld	l, (iy)
	ld	(ix - 16), hl
	ld	(ix - 20), e
	ld	de, (ix - 16)
	ld	hl, (ix - 10)
	add	hl, de
	ld	(ix - 10), hl
	ld	hl, (ix - 3)
	ld	de, (ix - 16)
	add	hl, de
	ld	e, (ix - 20)
	ld	(ix - 3), hl
	ld	hl, (ix - 10)
	or	a, a
	sbc	hl, bc
	ld	(ix - 16), a
	jr	nc, BB25_15
	jp	BB25_6
BB25_13:
	inc	iy
	ld	(ix - 13), iy
	jr	BB25_15
BB25_14:
	ld	(ix - 16), a
	ld	hl, (ix - 19)
	ld	(ix - 13), hl
BB25_15:
	ld	hl, (ix + 6)
	ld	d, (hl)
	ld	hl, (ix - 3)
	push	af
	ld	a, (ix - 16)
	ld	iyl, a
	pop	af
BB25_16:
	ld	bc, (ix - 6)
	add	hl, bc
	inc	e
	ld	a, e
	cp	a, d
	jp	c, BB25_2
BB25_17:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_RotateScaleSprite
; gfy_RotateScaleSprite:
; 	push	ix
; 	ld	ix, 0
; 	add	ix, sp
; 	lea	hl, ix - 45
; 	ld	sp, hl
; 	ld	hl, (ix + 6)
; 	ld	iy, (ix + 9)
; 	ld	de, 0
; 	ld	(ix - 32), de
; 	ld	a, (hl)
; 	ld	bc, 0
; 	push	bc
; 	pop	hl
; 	ld	(ix - 17), a
; 	ld	l, a
; 	ld	c, (ix + 15)
; 	ld	(ix - 39), hl
; 	call	__imulu
; 	ld	c, 6
; 	call	__ishru
; 	push	hl
; 	pop	bc
; 	ld	de, 255
; 	or	a, a
; 	sbc	hl, de
; 	jr	c, BB26_2
; 	ld	bc, 255
; BB26_2:
; 	ld	(ix - 7), bc
; 	ld	(iy), c
; 	ld	(iy + 1), c
; 	lea	de, iy + 2
; 	ld	a, (gfy_Transparent_Color)
; 	ld	iyl, a
; 	push	bc
; 	pop	hl
; 	ld	bc, (ix - 7)
; 	call	__imulu
; 	push	hl
; 	push	iy
; 	ld	(ix - 10), de
; 	push	de
; 	call	_memset
; 	ld	hl, 9
; 	add	hl, sp
; 	ld	sp, hl
; 	ld	bc, 0
; 	ld	c, (ix + 12)
; 	xor	a, a
; 	call	__ultof
; 	ld	hl, -3600421
; 	ld	e, 60
; 	call	__fmul
; 	ld	(ix - 13), bc
; 	ld	l, a
; 	ld	(ix - 16), hl
; 	push	hl
; 	push	bc
; 	call	_cosf
; 	ld	(ix - 3), hl
; 	ld	(ix - 4), e
; 	ld	hl, 6
; 	add	hl, sp
; 	ld	sp, hl
; 	ld	hl, (ix - 16)
; 	push	hl
; 	ld	hl, (ix - 13)
; 	push	hl
; 	call	_sinf
; 	ld	(ix - 13), hl
; 	ld	(ix - 16), e
; 	ld	hl, 6
; 	add	hl, sp
; 	ld	sp, hl
; 	ld	bc, (ix - 39)
; 	xor	a, a
; 	call	__ultof
; 	push	bc
; 	pop	iy
; 	ld	d, a
; 	ld	hl, (ix - 7)
; 	ld	bc, 255
	
; 	xor	a, a
; 	inc.s	hl
; 	dec	hl
; 	ld	h, b
; 	ld	e, b
; 	push	hl
; 	pop	bc
; 	ld	a, e
; 	call	__ultof
; 	push	bc
; 	pop	hl
; 	ld	e, a
; 	ld	(ix - 28), iy
; 	lea	bc, iy
; 	ld	iyh, d
; 	ld	a, iyh
; 	call	__fdiv
; 	push	bc
; 	pop	hl
; 	ld	e, a
; 	ld	bc, (ix - 3)
; 	ld	a, (ix - 4)
; 	call	__fmul
; 	ld	(ix - 20), bc
; 	ld	(ix - 21), a
; 	ld	bc, (ix - 13)
; 	ld	a, (ix - 16)
; 	ld	d, a
; 	call	__fmul
; 	ld	(ix - 24), bc
; 	ld	(ix - 25), a
; 	ld	hl, (ix - 7)
; 	ld	a, l
; 	or	a, a
; 	jp	z, BB26_10
; 	ld	e, -65
; 	ld	bc, (ix - 28)
; 	ld	a, iyh
; 	or	a, a
; 	sbc	hl, hl
; 	call	__fmul
; 	push	bc
; 	pop	iy
; 	ld	(ix - 28), a
; 	ld	bc, (ix - 3)
; 	ld	a, (ix - 4)
; 	ld	hl, (ix - 13)
; 	ld	e, d
; 	call	__fsub
; 	ld	hl, -8388608
; 	ld	e, -65
; 	call	__fadd
; 	push	bc
; 	pop	hl
; 	ld	e, a
; 	lea	bc, iy
; 	ld	d, (ix - 28)
; 	ld	a, d
; 	call	__fmul
; 	ld	(ix - 35), bc
; 	ld	(ix - 36), a
; 	ld	bc, (ix - 3)
; 	ld	a, (ix - 4)
; 	ld	hl, (ix - 13)
; 	ld	e, (ix - 16)
; 	call	__fadd
; 	ld	hl, -8388608
; 	ld	e, -65
; 	call	__fadd
; 	push	bc
; 	pop	hl
; 	ld	e, a
; 	lea	bc, iy
; 	ld	a, d
; 	call	__fmul
; 	push	bc
; 	pop	iy
; 	ld	bc, (ix - 35)
; 	ld	de, (ix - 7)
; 	ld	l, a
; 	ld	a, (ix - 36)
; BB26_4:
; 	ld	(ix - 13), de
; 	ld	(ix - 42), iy
; 	ld	(ix - 3), iy
; 	ld	(ix - 28), l
; 	ld	(ix - 4), l
; 	ld	(ix - 35), bc
; 	ld	(ix - 16), bc
; 	ld	(ix - 36), a
; 	ld	iy, 255
; BB26_5:
; 	ld	de, (ix - 16)
; 	push	de
; 	pop	bc
; 	ld	(ix - 29), a
; 	call	__ftol
; 	push	bc
; 	pop	hl
; 	lea	bc, iy
; 	call	__iand
; 	push	hl
; 	pop	bc
; 	ld	a, c
; 	ld	l, (ix - 17)
; 	cp	a, l
; 	push	de
; 	pop	iy
; 	jr	nc, BB26_8
; 	push	bc
; 	pop	de
; 	ld	bc, (ix - 3)
; 	ld	a, (ix - 4)
; 	call	__ftol
; 	push	bc
; 	pop	hl
; 	ld	bc, 255
; 	inc.s	hl
; 	dec	hl
; 	ld	h, b
; 	ld	(ix - 45), hl
; 	ld	a, l
; 	ld	l, (ix - 17)
; 	cp	a, l
; 	jr	nc, BB26_8
; 	ex	de, hl
; 	ld	bc, (ix - 39)
; 	call	__imulu
; 	push	hl
; 	pop	bc
; 	ld	hl, (ix - 45)
; 	add	hl, bc
; 	push	hl
; 	pop	bc
; 	lea	hl, iy
; 	ld	iy, (ix + 6)
; 	add	iy, bc
; 	ld	a, (iy + 2)
; 	push	hl
; 	pop	iy
; 	ld	hl, (ix - 10)
; 	ld	(hl), a
; BB26_8:
; 	ld	hl, (ix - 10)
; 	inc	hl
; 	ld	(ix - 10), hl
; 	ld	bc, (ix - 20)
; 	ld	a, (ix - 21)
; 	lea	hl, iy
; 	ld	e, (ix - 29)
; 	call	__fadd
; 	ld	(ix - 16), bc
; 	ld	d, a
; 	ld	bc, (ix - 24)
; 	ld	a, (ix - 25)
; 	ld	hl, (ix - 3)
; 	ld	e, (ix - 4)
; 	call	__fadd
; 	ld	(ix - 3), bc
; 	ld	(ix - 4), a
; 	ld	a, d
; 	ld	hl, (ix - 13)
; 	dec	hl
; 	ld	(ix - 13), hl
; 	add	hl, bc
; 	or	a, a
; 	sbc	hl, bc
; 	ld	iy, 255
; 	jp	nz, BB26_5
; 	ld	bc, (ix - 20)
; 	ld	a, (ix - 21)
; 	ld	hl, (ix - 42)
; 	ld	e, (ix - 28)
; 	call	__fadd
; 	push	bc
; 	pop	iy
; 	ld	(ix - 28), a
; 	ld	bc, (ix - 35)
; 	ld	a, (ix - 36)
; 	ld	hl, (ix - 24)
; 	ld	e, (ix - 25)
; 	call	__fsub
; 	ld	hl, (ix - 32)
; 	inc	hl
; 	ld	(ix - 32), hl
; 	ld	de, (ix - 7)
; 	or	a, a
; 	sbc	hl, de
; 	ld	l, (ix - 28)
; 	jp	nz, BB26_4
; BB26_10:
; 	ld	hl, (ix + 9)
; 	ld	sp, ix
; 	pop	ix
; 	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_RotatedScaledTransparentSprite_NoClip
; gfy_RotatedScaledTransparentSprite_NoClip:
; 	push	ix
; 	ld	ix, 0
; 	add	ix, sp
; 	lea	hl, ix - 44
; 	ld	sp, hl
; 	call	gfy_Wait
; 	ld	hl, (-1900524)
; 	ld	(ix - 15), hl
; 	ld	hl, (ix + 6)
; 	ld	a, (hl)
; 	ld	bc, 0
; 	push	bc
; 	pop	hl
; 	ld	(ix - 16), a
; 	ld	l, a
; 	push	bc
; 	pop	iy
; 	ld	c, (ix + 18)
; 	ld	(ix - 33), hl
; 	call	__imulu
; 	ld	c, 6
; 	call	__ishru
; 	push	hl
; 	pop	bc
; 	ld	de, 255
; 	or	a, a
; 	sbc	hl, de
; 	jr	c, BB27_2
; 	ld	bc, 255
; BB27_2:
; 	ld	(ix - 6), bc
; 	lea	bc, iy
; 	ld	c, (ix + 15)
; 	xor	a, a
; 	call	__ultof
; 	ld	hl, -3600421
; 	ld	e, 60
; 	call	__fmul
; 	ld	(ix - 9), bc
; 	ld	l, a
; 	ld	(ix - 12), hl
; 	push	hl
; 	push	bc
; 	call	_cosf
; 	ld	(ix - 3), hl
; 	ld	(ix - 27), e
; 	ld	hl, 6
; 	add	hl, sp
; 	ld	sp, hl
; 	ld	hl, (ix - 12)
; 	push	hl
; 	ld	hl, (ix - 9)
; 	push	hl
; 	call	_sinf
; 	ld	(ix - 9), hl
; 	ld	(ix - 12), e
; 	ld	hl, 6
; 	add	hl, sp
; 	ld	sp, hl
; 	ld	bc, (ix - 33)
; 	xor	a, a
; 	call	__ultof
; 	push	bc
; 	pop	iy
; 	ld	d, a
; 	ld	hl, (ix - 6)
; 	ld	bc, 255
	
; 	xor	a, a
; 	inc.s	hl
; 	dec	hl
; 	ld	h, b
; 	ld	e, b
; 	push	hl
; 	pop	bc
; 	ld	a, e
; 	call	__ultof
; 	push	bc
; 	pop	hl
; 	ld	e, a
; 	ld	(ix - 30), iy
; 	lea	bc, iy
; 	ld	iyl, d
; 	ld	a, iyl
; 	call	__fdiv
; 	push	bc
; 	pop	hl
; 	ld	e, a
; 	ld	bc, (ix - 3)
; 	ld	a, (ix - 27)
; 	call	__fmul
; 	ld	(ix - 19), bc
; 	ld	(ix - 20), a
; 	ld	bc, (ix - 9)
; 	ld	a, (ix - 12)
; 	call	__fmul
; 	ld	(ix - 23), bc
; 	ld	bc, (ix - 6)
; 	ld	(ix - 24), a
; 	ld	a, c
; 	or	a, a
; 	jp	z, BB27_11
; 	ld	hl, (ix + 9)
; 	ld	de, 0
; 	ld	e, (ix + 12)
; 	ld	bc, 240
; 	ld	iyh, -65
; 	call	__imulu
; 	push	hl
; 	pop	bc
; 	ld	hl, (ix - 15)
; 	add	hl, bc
; 	add	hl, de
; 	ld	(ix - 15), hl
; 	ld	bc, (ix - 30)
; 	ld	a, iyl
; 	or	a, a
; 	sbc	hl, hl
; 	ld	e, iyh
; 	call	__fmul
; 	push	bc
; 	pop	iy
; 	ld	(ix - 36), iy
; 	ld	(ix - 37), a
; 	ld	bc, (ix - 3)
; 	ld	d, (ix - 27)
; 	ld	a, d
; 	ld	hl, (ix - 9)
; 	ld	e, (ix - 12)
; 	call	__fsub
; 	ld	hl, -8388608
; 	ld	e, -65
; 	call	__fadd
; 	push	bc
; 	pop	hl
; 	ld	e, a
; 	lea	bc, iy
; 	push	af
; 	ld	a, (ix - 37)
; 	ld	iyl, a
; 	pop	af
; 	ld	a, iyl
; 	call	__fmul
; 	ld	(ix - 30), bc
; 	ld	iyh, a
; 	ld	bc, (ix - 3)
; 	ld	a, d
; 	ld	hl, (ix - 9)
; 	ld	e, (ix - 12)
; 	call	__fadd
; 	ld	hl, -8388608
; 	ld	e, -65
; 	call	__fadd
; 	push	bc
; 	pop	hl
; 	ld	e, a
; 	ld	bc, (ix - 36)
; 	ld	a, iyl
; 	call	__fmul
; 	ld	(ix - 27), bc
; 	ld	iyl, a
; 	ld	a, iyh
; 	ld	bc, 0
; 	push	bc
; 	pop	hl
; 	ld	de, (ix - 6)
; 	or	a, a
; 	sbc	hl, de
; 	ld	de, (ix - 30)
; 	ld	(ix - 44), hl
; 	ld	(ix - 36), bc
; BB27_4:
; 	ld	bc, 0
; 	push	bc
; 	pop	hl
; 	ld	bc, (ix - 27)
; 	push	af
; 	ld	a, iyl
; 	ld	(ix - 38), a
; 	pop	af
; 	ld	(ix - 30), de
; 	ld	(ix - 9), de
; 	ld	(ix - 37), a
; 	ld	e, a
; 	ld	a, iyl
; 	ld	iy, 255
; BB27_5:
; 	ld	(ix - 12), hl
; 	ld	(ix - 3), bc
; 	ld	d, a
; 	call	__ftol
; 	push	bc
; 	pop	hl
; 	lea	bc, iy
; 	call	__iand
; 	push	hl
; 	pop	bc
; 	ld	a, c
; 	ld	l, (ix - 16)
; 	cp	a, l
; 	jr	nc, BB27_9
; 	ld	(ix - 41), bc
; 	ld	bc, (ix - 9)
; 	ld	a, e
; 	call	__ftol
; 	push	bc
; 	pop	hl
; 	lea	bc, iy
; 	call	__iand
; 	ld	bc, (ix - 41)
; 	push	hl
; 	pop	iy
; 	ld	a, l
; 	ld	l, (ix - 16)
; 	cp	a, l
; 	jr	nc, BB27_9
; 	push	bc
; 	pop	hl
; 	ld	bc, (ix - 33)
; 	call	__imulu
; 	lea	bc, iy
; 	add	hl, bc
; 	push	hl
; 	pop	bc
; 	ld	iy, (ix + 6)
; 	add	iy, bc
; 	ld	c, (iy + 2)
; 	ld	a, (gfy_Transparent_Color)
; 	ld	b, e
; 	ld	e, a
; 	ld	a, c
; 	cp	a, e
; 	ld	e, b
; 	jr	z, BB27_9
; 	ld	hl, (ix - 15)
; 	ld	a, d
; 	ld	de, (ix - 12)
; 	add	hl, de
; 	ld	e, b
; 	ld	d, a
; 	ld	(hl), c
; BB27_9:
; 	ld	bc, (ix - 19)
; 	ld	a, (ix - 20)
; 	ld	hl, (ix - 9)
; 	call	__fadd
; 	ld	(ix - 9), bc
; 	ld	iyl, a
; 	ld	bc, (ix - 23)
; 	ld	a, (ix - 24)
; 	ld	hl, (ix - 3)
; 	ld	e, d
; 	call	__fadd
; 	ld	(ix - 3), bc
; 	ld	bc, (ix - 12)
; 	inc	bc
; 	push	bc
; 	pop	hl
; 	ld	de, (ix - 6)
; 	or	a, a
; 	sbc	hl, de
; 	ld	e, iyl
; 	ld	iy, 255
; 	add	hl, bc
; 	or	a, a
; 	sbc	hl, bc
; 	push	bc
; 	pop	hl
; 	ld	bc, (ix - 3)
; 	jp	nz, BB27_5
; 	ld	hl, (ix - 15)
; 	ld	de, (ix - 44)
; 	add	hl, de
; 	ld	de, (ix - 12)
; 	add	hl, de
; 	ld	de, 241
; 	add	hl, de
; 	ld	(ix - 15), hl
; 	ld	bc, (ix - 19)
; 	ld	a, (ix - 20)
; 	ld	hl, (ix - 27)
; 	ld	e, (ix - 38)
; 	call	__fadd
; 	ld	(ix - 27), bc
; 	ld	iyl, a
; 	ld	bc, (ix - 30)
; 	ld	a, (ix - 37)
; 	ld	hl, (ix - 23)
; 	ld	e, (ix - 24)
; 	call	__fsub
; 	push	bc
; 	pop	de
; 	ld	hl, (ix - 36)
; 	inc	hl
; 	ld	(ix - 36), hl
; 	ld	bc, (ix - 6)
; 	or	a, a
; 	sbc	hl, bc
; 	jp	nz, BB27_4
; BB27_11:
; 	ld	a, c
; 	ld	sp, ix
; 	pop	ix
; 	ret
; ;	section	.text,"ax",@progbits

; ;	section	.text,"ax",@progbits
; ;	public	gfy_RotatedScaledSprite_NoClip
; gfy_RotatedScaledSprite_NoClip:
; 	push	ix
; 	ld	ix, 0
; 	add	ix, sp
; 	lea	hl, ix - 47
; 	ld	sp, hl
; 	call	gfy_Wait
; 	ld	hl, (-1900524)
; 	ld	(ix - 15), hl
; 	ld	hl, (ix + 6)
; 	ld	a, (hl)
; 	ld	bc, 0
; 	push	bc
; 	pop	hl
; 	ld	(ix - 16), a
; 	ld	l, a
; 	push	bc
; 	pop	iy
; 	ld	c, (ix + 18)
; 	ld	(ix - 39), hl
; 	call	__imulu
; 	ld	c, 6
; 	call	__ishru
; 	push	hl
; 	pop	bc
; 	ld	de, 255
; 	or	a, a
; 	sbc	hl, de
; 	jr	c, BB28_2
; 	ld	bc, 255
; BB28_2:
; 	ld	(ix - 3), bc
; 	lea	bc, iy
; 	ld	c, (ix + 15)
; 	xor	a, a
; 	call	__ultof
; 	ld	hl, -3600421
; 	ld	e, 60
; 	call	__fmul
; 	ld	(ix - 9), bc
; 	ld	l, a
; 	ld	(ix - 12), hl
; 	push	hl
; 	push	bc
; 	call	_cosf
; 	ld	(ix - 6), hl
; 	ld	(ix - 27), e
; 	ld	hl, 6
; 	add	hl, sp
; 	ld	sp, hl
; 	ld	hl, (ix - 12)
; 	push	hl
; 	ld	hl, (ix - 9)
; 	push	hl
; 	call	_sinf
; 	ld	(ix - 9), hl
; 	ld	(ix - 12), e
; 	ld	hl, 6
; 	add	hl, sp
; 	ld	sp, hl
; 	ld	bc, (ix - 39)
; 	xor	a, a
; 	call	__ultof
; 	push	bc
; 	pop	iy
; 	ld	d, a
; 	ld	hl, (ix - 3)
; 	ld	bc, 255
	
; 	xor	a, a
; 	inc.s	hl
; 	dec	hl
; 	ld	h, b
; 	ld	e, b
; 	push	hl
; 	pop	bc
; 	ld	a, e
; 	call	__ultof
; 	push	bc
; 	pop	hl
; 	ld	e, a
; 	ld	(ix - 30), iy
; 	lea	bc, iy
; 	ld	iyl, d
; 	ld	a, iyl
; 	call	__fdiv
; 	push	bc
; 	pop	hl
; 	ld	e, a
; 	ld	bc, (ix - 6)
; 	ld	a, (ix - 27)
; 	call	__fmul
; 	ld	(ix - 19), bc
; 	ld	(ix - 20), a
; 	ld	bc, (ix - 9)
; 	ld	a, (ix - 12)
; 	call	__fmul
; 	ld	(ix - 23), bc
; 	ld	bc, (ix - 3)
; 	ld	(ix - 24), a
; 	ld	a, c
; 	or	a, a
; 	jp	z, BB28_10
; 	ld	hl, (ix + 9)
; 	ld	de, 0
; 	ld	e, (ix + 12)
; 	ld	bc, 240
; 	ld	iyh, -65
; 	call	__imulu
; 	push	hl
; 	pop	bc
; 	ld	hl, (ix - 15)
; 	add	hl, bc
; 	add	hl, de
; 	ld	(ix - 15), hl
; 	ld	bc, (ix - 30)
; 	ld	a, iyl
; 	or	a, a
; 	sbc	hl, hl
; 	ld	e, iyh
; 	call	__fmul
; 	push	bc
; 	pop	iy
; 	ld	(ix - 30), iy
; 	ld	(ix - 33), a
; 	ld	bc, (ix - 6)
; 	ld	d, (ix - 27)
; 	ld	a, d
; 	ld	hl, (ix - 9)
; 	ld	e, (ix - 12)
; 	call	__fsub
; 	ld	hl, -8388608
; 	ld	e, -65
; 	call	__fadd
; 	push	bc
; 	pop	hl
; 	ld	e, a
; 	lea	bc, iy
; 	push	af
; 	ld	a, (ix - 33)
; 	ld	iyl, a
; 	pop	af
; 	ld	a, iyl
; 	call	__fmul
; 	ld	(ix - 36), bc
; 	ld	iyh, a
; 	ld	bc, (ix - 6)
; 	ld	a, d
; 	ld	hl, (ix - 9)
; 	ld	e, (ix - 12)
; 	call	__fadd
; 	ld	hl, -8388608
; 	ld	e, -65
; 	call	__fadd
; 	push	bc
; 	pop	hl
; 	ld	e, a
; 	ld	bc, (ix - 30)
; 	ld	a, iyl
; 	call	__fmul
; 	ld	(ix - 33), bc
; 	ld	iyl, a
; 	ld	a, iyh
; 	ld	bc, 0
; 	push	bc
; 	pop	hl
; 	ld	de, (ix - 3)
; 	or	a, a
; 	sbc	hl, de
; 	ld	de, (ix - 36)
; 	ld	(ix - 47), hl
; 	ld	(ix - 42), bc
; BB28_4:
; 	ld	bc, 0
; 	push	bc
; 	pop	hl
; 	ld	bc, (ix - 33)
; 	push	af
; 	ld	a, iyl
; 	ld	(ix - 44), a
; 	pop	af
; 	ld	(ix - 36), de
; 	ld	(ix - 6), de
; 	ld	(ix - 43), a
; 	ld	(ix - 9), a
; 	ld	a, iyl
; BB28_5:
; 	ld	(ix - 12), hl
; 	ld	(ix - 27), bc
; 	ld	(ix - 30), a
; 	call	__ftol
; 	push	bc
; 	pop	hl
; 	ld	de, 255
; 	push	de
; 	pop	bc
; 	call	__iand
; 	push	hl
; 	pop	iy
; 	ld	a, iyl
; 	ld	l, (ix - 16)
; 	cp	a, l
; 	jr	nc, BB28_8
; 	ld	bc, (ix - 6)
; 	ld	a, (ix - 9)
; 	call	__ftol
; 	push	bc
; 	pop	hl
; 	push	de
; 	pop	bc
; 	call	__iand
; 	push	hl
; 	pop	de
; 	ld	a, e
; 	ld	l, (ix - 16)
; 	cp	a, l
; 	jr	nc, BB28_8
; 	lea	hl, iy
; 	ld	bc, (ix - 39)
; 	call	__imulu
; 	add	hl, de
; 	push	hl
; 	pop	bc
; 	ld	iy, (ix + 6)
; 	add	iy, bc
; 	ld	a, (iy + 2)
; 	ld	hl, (ix - 15)
; 	ld	de, (ix - 12)
; 	add	hl, de
; 	ld	(hl), a
; BB28_8:
; 	ld	bc, (ix - 19)
; 	ld	a, (ix - 20)
; 	ld	hl, (ix - 6)
; 	ld	e, (ix - 9)
; 	call	__fadd
; 	ld	(ix - 6), bc
; 	ld	(ix - 9), a
; 	ld	bc, (ix - 23)
; 	ld	a, (ix - 24)
; 	ld	hl, (ix - 27)
; 	ld	e, (ix - 30)
; 	call	__fadd
; 	ld	iy, (ix - 12)
; 	inc	iy
; 	lea	hl, iy
; 	ld	de, (ix - 3)
; 	or	a, a
; 	sbc	hl, de
; 	add	hl, bc
; 	or	a, a
; 	sbc	hl, bc
; 	lea	hl, iy
; 	jp	nz, BB28_5
; 	ld	hl, (ix - 15)
; 	ld	de, (ix - 47)
; 	add	hl, de
; 	ld	de, (ix - 12)
; 	add	hl, de
; 	ld	de, 241
; 	add	hl, de
; 	ld	(ix - 15), hl
; 	ld	bc, (ix - 19)
; 	ld	a, (ix - 20)
; 	ld	hl, (ix - 33)
; 	ld	e, (ix - 44)
; 	call	__fadd
; 	ld	(ix - 33), bc
; 	ld	iyl, a
; 	ld	bc, (ix - 36)
; 	ld	a, (ix - 43)
; 	ld	hl, (ix - 23)
; 	ld	e, (ix - 24)
; 	call	__fsub
; 	push	bc
; 	pop	de
; 	ld	hl, (ix - 42)
; 	inc	hl
; 	ld	(ix - 42), hl
; 	ld	bc, (ix - 3)
; 	or	a, a
; 	sbc	hl, bc
; 	jp	nz, BB28_4
; BB28_10:
; 	ld	a, c
; 	ld	sp, ix
; 	pop	ix
; 	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_CopyRectangle
gfy_CopyRectangle:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 21
	ld	sp, hl
	sbc	hl, hl
	ld	(ix - 3), hl
	call	gfy_Wait
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, -1900528
	push	hl
	pop	de
	jr	z, BB29_2
	ld	hl, -1900524
BB29_2:
	ld	a, (ix + 21)
	ld	bc, 240
	ld	iy, (hl)
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ex	de, hl
	jr	z, BB29_4
	ld	hl, -1900524
BB29_4:
	ld	hl, (hl)
	ld	(ix - 6), hl
	ld	de, 0
	ld	e, (ix + 15)
	ld	hl, (ix + 12)
	call	__imulu
	add	hl, de
	push	hl
	pop	bc
	lea	hl, iy
	add	hl, bc
	ld	(ix - 15), hl
	ld	e, a
	ld	hl, (ix + 18)
	call	__set_bc_and_mul_hl_by_240
	add	hl, de
	push	hl
	pop	bc
	ld	(ix - 9), iy
	ld	iy, (ix - 6)
	lea	hl, iy
	add	hl, bc
	ld	(ix - 18), hl
	ld	e, (ix + 27)
	ld	hl, 240
	ld	(ix - 12), de
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix - 9)
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nz, BB29_8
	ld	hl, (ix + 24)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB29_11
	ld	(ix - 21), de
BB29_7:
	ld	(ix - 6), hl
	ld	de, (ix - 3)
	ld	iy, (ix - 15)
	add	iy, de
	ld	hl, (ix - 18)
	add	hl, de
	ld	de, (ix - 12)
	push	de
	push	iy
	push	hl
	call	_memmove
	ld	de, (ix - 21)
	ld	hl, (ix - 6)
	ld	iy, 9
	add	iy, sp
	ld	sp, iy
	dec	hl
	ld	iy, (ix - 3)
	add	iy, de
	ld	(ix - 3), iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB29_7
	jr	BB29_11
BB29_8:
	ld	hl, (ix + 24)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB29_11
	ld	(ix - 21), de
BB29_10:
	ld	(ix - 6), hl
	ld	de, (ix - 3)
	ld	iy, (ix - 15)
	add	iy, de
	ld	hl, (ix - 18)
	add	hl, de
	ld	de, (ix - 12)
	push	de
	push	iy
	push	hl
	call	_memcpy
	ld	de, (ix - 21)
	ld	hl, (ix - 6)
	ld	iy, 9
	add	iy, sp
	ld	sp, iy
	dec	hl
	ld	iy, (ix - 3)
	add	iy, de
	ld	(ix - 3), iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB29_10
BB29_11:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 51b05c1c99dbd61fce7daf56414f212f15b2171a)"
;	extern	gfy_internal_Begin
;	extern	__Unwind_SjLj_Register
;	extern	__fadd
;	extern	gfy_FontHeight
;	extern	_memcpy
;	extern	gfy_internal_End
;	extern	__idivu
;	extern	__ixor
;	extern	gfy_Sprite_NoClip
;	extern	gfy_VertLine
;	extern	_sinf
;	extern	_cosf
;	extern	gfy_TextXPos
;	extern	_memmove
;	extern	gfy_Color
;	extern	lcd_Init
;	extern	gfy_PrintChar_Clip
;	extern	__ishru
;	extern	gfy_ClipXMax
;	extern	__fmul
;	extern	gfy_TextYPos
;	extern	gfy_Text_TP_Color
;	extern	__fdiv
;	extern	__imulu
;	extern	gfy_ClipYMax
;	extern	gfy_TextWidthScale
;	extern	gfy_Transparent_Color
;	extern	gfy_GetCharWidth
;	extern	lcd_SendCommand1
;	extern	gfy_Wait
;	extern	gfy_TextData
;	extern	gfy_ClipXMin
;	extern	gfy_TextHeightScale
;	extern	__ishl
;	extern	gfy_Text_FG_Color
;	extern	__ftol
;	extern	__iand
;	extern	gfy_ClipYMin
;	extern	__fsub
;	extern	gfy_Text_BG_Color
;	extern	_memset
;	extern	gfy_SetTextXY
;	extern	lcd_SendCommandWords
;	extern	__ultof
;	extern	gfy_VertLine_NoClip
;	extern	__Unwind_SjLj_Unregister
;	extern	lcd_Cleanup
;	extern	__bshl
;	extern	__land
