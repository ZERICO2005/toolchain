;	section	.text,"ax",@progbits
;	assume	adl = 1
;	section	.text,"ax",@progbits
;	public	gfy_Begin
gfy_Begin:
	call	lcd_Init
	call	gfy_internal_Begin
	ld	hl, 40
	push	hl
	ld	hl, 54
	push	hl
	call	lcd_SendCommand1
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 239
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 554
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 319
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 555
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	jp	lcd_Cleanup
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_End
gfy_End:
	call	lcd_Init
	ld	hl, 8
	push	hl
	ld	hl, 54
	push	hl
	call	lcd_SendCommand1
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 319
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 554
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 239
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 555
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	call	lcd_Cleanup
	jp	gfy_internal_End
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Line_NoClip
gfy_Line_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 19
	ld	sp, hl
	call	gfy_Wait
	ld	a, (ix + 15)
	ld	de, 0
	push	de
	pop	hl
	ld	l, a
	ld	e, (ix + 9)
	ld	(ix - 6), hl
	ld	(ix - 9), de
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 15), de
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	(ix - 3), hl
	ld	hl, (ix + 12)
	ld	bc, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), hl
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	hl, (ix - 3)
	push	hl
	pop	iy
	or	a, a
	sbc	hl, de
	jp	nc, BB2_11
	ld	bc, (ix + 12)
	push	bc
	pop	hl
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	jp	nc, BB2_21
	ld	hl, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 15), hl
	ld	hl, (ix - 9)
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, -8388608
	add	hl, de
	or	a, a
	sbc	hl, de
	ld	hl, 1
	ld	(ix - 3), hl
	jr	nc, BB2_4
	scf
	sbc	hl, hl
	ld	(ix - 3), hl
BB2_4:
	push	bc
	pop	hl
	push	bc
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	c, 1
	add	hl, hl
	ld	(ix - 9), hl
	ex	de, hl
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 18), hl
	ld	iy, (-1900524)
	ld	a, (gfy_Color)
	ld	(ix - 19), a
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB2_39
	ld	hl, (ix + 12)
	call	__set_bc_and_mul_hl_by_240
	push	de
	pop	bc
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 6)
	add	iy, de
	ld	hl, (ix - 9)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix - 12)
	ld	(ix - 6), hl
BB2_6:
	ld	a, (ix - 19)
	ld	(iy), a
	push	bc
	pop	hl
	ld	de, -8388608
	add	hl, de
	inc	de
	or	a, a
	sbc	hl, de
	ccf
	sbc	a, a
	ld	hl, (ix - 18)
	jr	nz, BB2_8
	ld	hl, (ix - 9)
BB2_8:
	bit	0, a
	ld	de, (ix - 3)
	jr	nz, BB2_10
	ld	de, 0
BB2_10:
	add	iy, de
	ld	de, 240
	add	iy, de
	add	hl, bc
	ld	de, 1
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	add	hl, de
	ld	(ix - 6), hl
	jp	nc, BB2_6
	jp	BB2_39
BB2_11:
	ld	hl, -240
	ld	(ix - 3), hl
	ld	l, (ix + 9)
	cp	a, l
	jp	nc, BB2_30
	ld	hl, (ix + 6)
	ld	de, (ix + 12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 9)
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	de, -8388608
	push	bc
	pop	hl
	add	hl, de
	or	a, a
	sbc	hl, de
	jr	c, BB2_14
	ld	hl, 240
	ld	(ix - 3), hl
BB2_14:
	push	bc
	pop	hl
	push	bc
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	c, 1
	add	hl, hl
	ld	(ix - 9), hl
	ex	de, hl
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 12), hl
	ld	iy, (-1900524)
	ld	a, (gfy_Color)
	ld	(ix - 18), a
	ld	a, e
	or	a, a
	jp	z, BB2_39
	ld	hl, (ix + 12)
	call	__set_bc_and_mul_hl_by_240
	push	de
	pop	bc
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 6)
	add	iy, de
	ld	hl, (ix - 9)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	ld	a, (ix + 15)
	sub	a, (ix + 9)
BB2_16:
	ld	(ix - 6), a
	ld	a, (ix - 18)
	ld	(iy), a
	push	de
	pop	hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	ld	hl, (ix - 12)
	jr	nz, BB2_18
	ld	hl, (ix - 9)
BB2_18:
	bit	0, a
	ld	bc, (ix - 3)
	jr	nz, BB2_20
	ld	bc, 0
BB2_20:
	add	iy, bc
	inc	iy
	add	hl, de
	ld	a, (ix - 6)
	add	a, 1
	ex	de, hl
	jp	nc, BB2_16
	jp	BB2_39
BB2_21:
	ld	de, -8388608
	ld	hl, (ix - 15)
	add	hl, de
	or	a, a
	sbc	hl, de
	ld	hl, 1
	ld	(ix - 6), hl
	jr	nc, BB2_23
	scf
	sbc	hl, hl
	ld	(ix - 6), hl
BB2_23:
	ld	c, 1
	lea	hl, iy
	add	hl, hl
	ld	(ix - 15), hl
	lea	hl, iy
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 18), hl
	ld	iy, (-1900524)
	ld	a, (gfy_Color)
	ld	(ix - 19), a
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB2_39
	ld	hl, (ix + 6)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 9)
	add	iy, de
	ld	hl, (ix - 15)
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	hl, (ix + 6)
	ld	de, (ix + 12)
	or	a, a
	sbc	hl, de
	ld	(ix - 3), hl
BB2_25:
	ld	a, (ix - 19)
	ld	(iy), a
	push	bc
	pop	hl
	ld	de, -8388608
	add	hl, de
	inc	de
	or	a, a
	sbc	hl, de
	ccf
	sbc	a, a
	ld	hl, (ix - 18)
	jr	nz, BB2_27
	ld	hl, (ix - 15)
BB2_27:
	bit	0, a
	ld	de, (ix - 6)
	jr	nz, BB2_29
	ld	de, 0
BB2_29:
	add	iy, de
	ld	de, 240
	add	iy, de
	add	hl, bc
	ld	de, 1
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	jp	nc, BB2_25
	jp	BB2_39
BB2_30:
	ld	bc, -8388608
	ld	hl, (ix - 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	c, BB2_32
	ld	hl, 240
	ld	(ix - 3), hl
BB2_32:
	ld	c, 1
	push	de
	pop	hl
	add	hl, hl
	ld	(ix - 6), hl
	ex	de, hl
	ld	iy, (ix - 15)
	lea	de, iy
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 12), hl
	lea	hl, iy
	ld	iy, (-1900524)
	ld	a, (gfy_Color)
	ld	(ix - 18), a
	ld	a, l
	or	a, a
	jp	z, BB2_39
	ld	hl, (ix + 6)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	ld	de, (ix - 9)
	add	iy, de
	ld	hl, (ix - 6)
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	a, (ix + 9)
	sub	a, (ix + 15)
BB2_34:
	ld	(ix - 9), a
	ld	a, (ix - 18)
	ld	(iy), a
	push	de
	pop	hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	ld	hl, (ix - 12)
	jr	nz, BB2_36
	ld	hl, (ix - 6)
BB2_36:
	bit	0, a
	ld	bc, (ix - 3)
	jr	nz, BB2_38
	ld	bc, 0
BB2_38:
	add	iy, bc
	inc	iy
	add	hl, de
	ld	a, (ix - 9)
	add	a, 1
	ex	de, hl
	jp	nc, BB2_34
BB2_39:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftDown
gfy_ShiftDown:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	l, (ix + 6)
	ld	a, l
	or	a, a
	jp	z, BB3_5
	ld	de, 0
	ld	e, l
	ld	(ix - 3), de
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 6), hl
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	lea	de, iy
	ld	e, a
	ld	a, (gfy_ClipYMax)
	ld	iyl, a
	push	de
	pop	hl
	ld	bc, (ix - 3)
	add	hl, bc
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ld	bc, -8388608
	ld	(ix - 9), hl
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	jr	c, BB3_5
	ld	hl, (gfy_ClipXMin)
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 15), iy
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 12), hl
	add	hl, bc
	lea	bc, iy
	ld	iy, (ix - 6)
	or	a, a
	sbc	hl, bc
	jr	nc, BB3_5
	ld	bc, 240
	add	iy, de
	ld	de, (ix - 12)
	push	de
	pop	hl
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 15)
	or	a, a
	sbc	hl, de
BB3_4:
	ld	(ix - 12), hl
	ld	(ix - 6), iy
	lea	hl, iy
	ld	de, (ix - 3)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	iy
	push	hl
	call	_memmove
	ld	iy, (ix - 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	add	iy, de
	ld	hl, (ix - 12)
	dec	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB3_4
BB3_5:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftUp
gfy_ShiftUp:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	l, (ix + 6)
	ld	de, 0
	ld	a, l
	or	a, a
	jp	z, BB4_5
	ld	e, l
	ld	(ix - 3), de
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 6), hl
	ld	a, (gfy_ClipYMin)
	ld	de, 0
	ld	e, a
	ld	a, (gfy_ClipYMax)
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	de
	pop	iy
	ld	bc, (ix - 3)
	add	iy, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	bc, -8388608
	ld	(ix - 9), hl
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	jp	c, BB4_5
	ld	hl, (gfy_ClipXMin)
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 15), iy
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 12), hl
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB4_5
	ld	bc, 240
	ld	iy, (ix - 6)
	add	iy, de
	ld	hl, (ix - 12)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	lea	de, iy
	ld	hl, (ix - 15)
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	or	a, a
	sbc	hl, hl
	ld	bc, (ix - 3)
	sbc	hl, bc
	ld	(ix - 12), hl
BB4_4:
	ld	(ix - 3), iy
	push	de
	pop	bc
	ld	(ix - 6), bc
	push	bc
	pop	hl
	ld	de, (ix - 12)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	bc
	push	hl
	call	_memmove
	ld	iy, (ix - 3)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	hl, (ix - 6)
	add	hl, de
	ex	de, hl
	dec	iy
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB4_4
BB4_5:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftLeft
gfy_ShiftLeft:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB5_4
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	a, (gfy_ClipYMin)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, (gfy_ClipXMin)
	ld	a, (gfy_ClipYMax)
	ld	l, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	(ix - 15), bc
	push	bc
	pop	hl
	ld	bc, (ix + 6)
	add	hl, bc
	ld	iy, (gfy_ClipXMax)
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 6), hl
	add	hl, bc
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB5_4
	ld	bc, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 15)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix + 6)
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 15), de
	add	iy, de
BB5_3:
	ld	(ix - 3), iy
	lea	hl, iy
	ld	de, (ix - 15)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	hl
	push	iy
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	c, BB5_3
BB5_4:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftRight
gfy_ShiftRight:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB6_4
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	a, (gfy_ClipYMin)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, (gfy_ClipXMin)
	ld	a, (gfy_ClipYMax)
	ld	l, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	(ix - 15), bc
	push	bc
	pop	hl
	ld	bc, (ix + 6)
	add	hl, bc
	ld	iy, (gfy_ClipXMax)
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 6), hl
	add	hl, bc
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB6_4
	ld	bc, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 15)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix + 6)
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 15), de
	add	iy, de
BB6_3:
	ld	(ix - 3), iy
	lea	hl, iy
	ld	de, (ix - 15)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	hl
	push	iy
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	c, BB6_3
BB6_4:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Tilemap
; gfy_Tilemap:
; 	push	ix
; 	ld	ix, 0
; 	add	ix, sp
; 	lea	hl, ix - 34
; 	ld	sp, hl
; 	ld	iy, (ix + 6)
; 	ld	hl, (ix + 9)
; 	xor	a, a
; 	ld	de, 0
; 	ld	e, (iy + 7)
; 	push	de
; 	pop	bc
; 	call	__idivu
; 	ld	(ix - 9), hl
; 	or	a, a
; 	sbc	hl, hl
; 	ld	iy, (ix + 6)
; 	ld	l, (iy + 6)
; 	push	hl
; 	pop	iy
; 	ld	hl, (ix + 12)
; 	lea	bc, iy
; 	call	__idivu
; 	ld	(ix - 12), hl
; 	ld	hl, (ix - 9)
; 	ld	(ix - 3), de
; 	push	de
; 	pop	bc
; 	call	__imulu
; 	push	hl
; 	pop	de
; 	ld	hl, (ix + 9)
; 	or	a, a
; 	sbc	hl, de
; 	push	hl
; 	pop	de
; 	ld	hl, (ix - 12)
; 	ld	(ix - 15), iy
; 	lea	bc, iy
; 	call	__imulu
; 	push	hl
; 	pop	bc
; 	ld	hl, (ix + 12)
; 	or	a, a
; 	sbc	hl, bc
; 	ld	(ix - 6), hl
; 	push	de
; 	pop	hl
; 	add	hl, bc
; 	or	a, a
; 	sbc	hl, bc
; 	ld	(ix - 22), a
; 	ld	(ix - 18), de
; 	jr	z, BB7_2
; 	ld	a, 0
; 	jr	BB7_3
; BB7_2:
; 	ld	a, -1
; BB7_3:
; 	ld	de, (ix - 3)
; 	ld	bc, 0
; 	ld	iy, (ix + 6)
; 	ld	hl, (iy + 15)
; 	ld	iy, (ix - 18)
; 	add	iy, de
; 	bit	0, a
; 	jr	nz, BB7_5
; 	lea	bc, iy
; BB7_5:
; 	or	a, a
; 	sbc	hl, bc
; 	ld	(ix - 21), hl
; 	ld	bc, 0
; 	ld	iy, (ix + 6)
; 	ld	c, (iy + 14)
; 	ld	hl, (ix - 6)
; 	push	hl
; 	pop	iy
; 	ld	de, (ix - 15)
; 	add	iy, de
; 	add	hl, bc
; 	or	a, a
; 	sbc	hl, bc
; 	ld	de, 0
; 	jr	z, BB7_7
; 	lea	de, iy
; BB7_7:
; 	push	bc
; 	pop	hl
; 	or	a, a
; 	sbc	hl, de
; 	ld	(ix - 18), hl
; 	ld	iy, (ix + 6)
; 	ld	c, (iy + 9)
; 	bit	0, a
; 	jr	z, BB7_9
; 	ld	de, (ix - 3)
; 	jr	BB7_13
; BB7_9:
; 	ld	hl, (ix + 9)
; 	ld	de, (ix - 3)
; 	or	a, a
; 	sbc	hl, de
; 	jr	nc, BB7_11
; 	ld	hl, (ix - 21)
; 	add	hl, de
; 	ld	(ix - 21), hl
; 	or	a, a
; 	sbc	hl, hl
; 	jr	BB7_12
; BB7_11:
; 	inc	c
; 	ld	hl, (ix - 9)
; 	dec	hl
; BB7_12:
; 	ld	(ix - 9), hl
; BB7_13:
; 	ld	b, (iy + 8)
; 	ld	hl, (ix - 6)
; 	add	hl, bc
; 	or	a, a
; 	sbc	hl, bc
; 	jr	z, BB7_18
; 	ld	hl, (ix + 12)
; 	ld	de, (ix - 15)
; 	or	a, a
; 	sbc	hl, de
; 	jr	nc, BB7_16
; 	ld	hl, (ix - 18)
; 	add	hl, de
; 	ld	(ix - 18), hl
; 	or	a, a
; 	sbc	hl, hl
; 	jr	BB7_17
; BB7_16:
; 	inc	b
; 	ld	hl, (ix - 12)
; 	dec	hl
; BB7_17:
; 	ld	(ix - 12), hl
; 	ld	iy, (ix + 6)
; BB7_18:
; 	ld	a, c
; 	or	a, a
; 	jr	z, BB7_20
; 	ld	a, b
; 	or	a, a
; 	jr	nz, BB7_21
; BB7_20:
; 	ld	sp, ix
; 	pop	ix
; 	ret
; BB7_21:
; 	ld	de, 0
; 	push	de
; 	pop	hl
; 	ld	e, c
; 	ld	(ix - 23), c
; 	ld	(ix - 24), b
; 	push	hl
; 	pop	bc
; 	ld	c, (iy + 13)
; 	ld	l, (iy + 12)
; 	call	__imulu
; 	ld	(ix - 6), hl
; 	push	bc
; 	pop	hl
; 	or	a, a
; 	sbc	hl, de
; 	ld	(ix - 27), hl
; 	ld	hl, (gfy_ClipXMax)
; 	ld	de, (ix - 3)
; 	or	a, a
; 	sbc	hl, de
; 	ld	(ix - 30), hl
; 	ld	a, (gfy_ClipYMax)
; 	or	a, a
; 	sbc	hl, hl
; 	ld	l, a
; 	ld	de, (ix - 15)
; 	sbc	hl, de
; 	ld	(ix - 15), hl
; 	ld	hl, (ix - 12)
; 	call	__imulu
; 	ld	a, (ix - 23)
; 	ld	de, (ix - 9)
; 	add	hl, de
; 	push	hl
; 	pop	bc
; BB7_22:
; 	ld	hl, (ix - 18)
; 	ld	de, (ix - 15)
; 	or	a, a
; 	sbc	hl, de
; 	jp	nc, BB7_31
; 	ld	hl, (ix - 6)
; 	push	bc
; 	pop	de
; 	or	a, a
; 	sbc	hl, de
; 	push	de
; 	pop	hl
; 	jr	c, BB7_25
; 	ld	hl, (ix - 6)
; BB7_25:
; 	ld	c, a
; 	ld	iy, (ix - 21)
; 	ld	(ix - 3), iy
; 	ld	iy, (ix + 6)
; 	ld	(ix - 9), hl
; BB7_26:
; 	or	a, a
; 	sbc	hl, de
; 	jp	z, BB7_20
; 	ld	(ix - 31), c
; 	ld	hl, (iy + 3)
; 	ld	(ix - 34), hl
; 	ld	iy, (iy)
; 	ld	(ix - 12), de
; 	add	iy, de
; 	or	a, a
; 	sbc	hl, hl
; 	ld	l, (iy)
; 	push	hl
; 	pop	bc
; 	add	hl, bc
; 	add	hl, bc
; 	ld	bc, 3
; 	push	hl
; 	pop	de
; 	ld	hl, (ix - 34)
; 	add	hl, de
; 	ld	iy, (hl)
; 	ld	de, (ix - 3)
; 	push	de
; 	pop	hl
; 	ld	bc, (ix - 30)
; 	or	a, a
; 	sbc	hl, bc
; 	ld	(ix - 3), de
; 	jr	nc, BB7_29
; 	ld	hl, (ix - 18)
; 	push	hl
; 	push	de
; 	push	iy
; 	call	gfy_Sprite_NoClip
; 	jr	BB7_30
; BB7_29:
; 	ld	hl, (ix - 18)
; 	push	hl
; 	push	de
; 	push	iy
; 	call	gfy_Sprite
; BB7_30:
; 	ld	hl, 9
; 	add	hl, sp
; 	ld	sp, hl
; 	ld	de, 0
; 	ld	iy, (ix + 6)
; 	ld	e, (iy + 7)
; 	ld	hl, (ix - 3)
; 	add	hl, de
; 	ld	(ix - 3), hl
; 	ld	de, (ix - 12)
; 	inc	de
; 	ld	c, (ix - 31)
; 	dec	c
; 	ld	a, c
; 	or	a, a
; 	ld	b, (ix - 24)
; 	ld	hl, (ix - 9)
; 	jr	nz, BB7_26
; 	jp	BB7_36
; BB7_31:
; 	ld	hl, (ix - 6)
; 	push	bc
; 	pop	de
; 	or	a, a
; 	sbc	hl, de
; 	ld	(ix - 9), de
; 	jr	c, BB7_33
; 	ld	hl, (ix - 6)
; 	ld	(ix - 9), hl
; BB7_33:
; 	ld	c, a
; 	ld	hl, (ix - 21)
; 	ld	(ix - 3), hl
; BB7_34:
; 	ld	hl, (ix - 9)
; 	or	a, a
; 	sbc	hl, de
; 	jp	z, BB7_20
; 	ld	hl, (iy + 3)
; 	ld	(ix - 34), hl
; 	ld	hl, (ix + 6)
; 	ld	iy, (hl)
; 	add	iy, de
; 	or	a, a
; 	sbc	hl, hl
; 	ld	l, (iy)
; 	ld	(ix - 31), c
; 	push	hl
; 	pop	bc
; 	add	hl, bc
; 	add	hl, bc
; 	ld	bc, 3
; 	ld	(ix - 12), de
; 	push	hl
; 	pop	de
; 	ld	hl, (ix - 34)
; 	add	hl, de
; 	ld	hl, (hl)
; 	ld	de, (ix - 18)
; 	push	de
; 	ld	de, (ix - 3)
; 	push	de
; 	push	hl
; 	call	gfy_Sprite
; 	ld	c, (ix - 31)
; 	ld	b, (ix - 24)
; 	ld	iy, (ix + 6)
; 	ld	hl, 9
; 	add	hl, sp
; 	ld	sp, hl
; 	ld	de, 0
; 	ld	e, (iy + 7)
; 	ld	hl, (ix - 3)
; 	add	hl, de
; 	ld	(ix - 3), hl
; 	ld	de, (ix - 12)
; 	inc	de
; 	dec	c
; 	ld	a, c
; 	or	a, a
; 	jr	nz, BB7_34
; BB7_36:
; 	ld	hl, (ix - 27)
; 	add	hl, de
; 	ld	(ix - 3), hl
; 	ld	de, 0
; 	ld	e, (iy + 6)
; 	ld	hl, (ix - 18)
; 	add	hl, de
; 	ld	(ix - 18), hl
; 	ld	a, (ix - 22)
; 	inc	a
; 	ld	(ix - 22), a
; 	cp	a, b
; 	ld	bc, (ix - 3)
; 	ld	a, (ix - 23)
; 	jp	nz, BB7_22
; 	jp	BB7_20
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_TransparentTilemap
; gfy_TransparentTilemap:
; 	push	ix
; 	ld	ix, 0
; 	add	ix, sp
; 	lea	hl, ix - 34
; 	ld	sp, hl
; 	ld	iy, (ix + 6)
; 	ld	hl, (ix + 9)
; 	xor	a, a
; 	ld	de, 0
; 	ld	e, (iy + 7)
; 	push	de
; 	pop	bc
; 	call	__idivu
; 	ld	(ix - 9), hl
; 	or	a, a
; 	sbc	hl, hl
; 	ld	iy, (ix + 6)
; 	ld	l, (iy + 6)
; 	push	hl
; 	pop	iy
; 	ld	hl, (ix + 12)
; 	lea	bc, iy
; 	call	__idivu
; 	ld	(ix - 12), hl
; 	ld	hl, (ix - 9)
; 	ld	(ix - 3), de
; 	push	de
; 	pop	bc
; 	call	__imulu
; 	push	hl
; 	pop	de
; 	ld	hl, (ix + 9)
; 	or	a, a
; 	sbc	hl, de
; 	push	hl
; 	pop	de
; 	ld	hl, (ix - 12)
; 	ld	(ix - 15), iy
; 	lea	bc, iy
; 	call	__imulu
; 	push	hl
; 	pop	bc
; 	ld	hl, (ix + 12)
; 	or	a, a
; 	sbc	hl, bc
; 	ld	(ix - 6), hl
; 	push	de
; 	pop	hl
; 	add	hl, bc
; 	or	a, a
; 	sbc	hl, bc
; 	ld	(ix - 22), a
; 	ld	(ix - 18), de
; 	jr	z, BB8_2
; 	ld	a, 0
; 	jr	BB8_3
; BB8_2:
; 	ld	a, -1
; BB8_3:
; 	ld	de, (ix - 3)
; 	ld	bc, 0
; 	ld	iy, (ix + 6)
; 	ld	hl, (iy + 15)
; 	ld	iy, (ix - 18)
; 	add	iy, de
; 	bit	0, a
; 	jr	nz, BB8_5
; 	lea	bc, iy
; BB8_5:
; 	or	a, a
; 	sbc	hl, bc
; 	ld	(ix - 21), hl
; 	ld	bc, 0
; 	ld	iy, (ix + 6)
; 	ld	c, (iy + 14)
; 	ld	hl, (ix - 6)
; 	push	hl
; 	pop	iy
; 	ld	de, (ix - 15)
; 	add	iy, de
; 	add	hl, bc
; 	or	a, a
; 	sbc	hl, bc
; 	ld	de, 0
; 	jr	z, BB8_7
; 	lea	de, iy
; BB8_7:
; 	push	bc
; 	pop	hl
; 	or	a, a
; 	sbc	hl, de
; 	ld	(ix - 18), hl
; 	ld	iy, (ix + 6)
; 	ld	c, (iy + 9)
; 	bit	0, a
; 	jr	z, BB8_9
; 	ld	de, (ix - 3)
; 	jr	BB8_13
; BB8_9:
; 	ld	hl, (ix + 9)
; 	ld	de, (ix - 3)
; 	or	a, a
; 	sbc	hl, de
; 	jr	nc, BB8_11
; 	ld	hl, (ix - 21)
; 	add	hl, de
; 	ld	(ix - 21), hl
; 	or	a, a
; 	sbc	hl, hl
; 	jr	BB8_12
; BB8_11:
; 	inc	c
; 	ld	hl, (ix - 9)
; 	dec	hl
; BB8_12:
; 	ld	(ix - 9), hl
; BB8_13:
; 	ld	b, (iy + 8)
; 	ld	hl, (ix - 6)
; 	add	hl, bc
; 	or	a, a
; 	sbc	hl, bc
; 	jr	z, BB8_18
; 	ld	hl, (ix + 12)
; 	ld	de, (ix - 15)
; 	or	a, a
; 	sbc	hl, de
; 	jr	nc, BB8_16
; 	ld	hl, (ix - 18)
; 	add	hl, de
; 	ld	(ix - 18), hl
; 	or	a, a
; 	sbc	hl, hl
; 	jr	BB8_17
; BB8_16:
; 	inc	b
; 	ld	hl, (ix - 12)
; 	dec	hl
; BB8_17:
; 	ld	(ix - 12), hl
; 	ld	iy, (ix + 6)
; BB8_18:
; 	ld	a, c
; 	or	a, a
; 	jr	z, BB8_20
; 	ld	a, b
; 	or	a, a
; 	jr	nz, BB8_21
; BB8_20:
; 	ld	sp, ix
; 	pop	ix
; 	ret
; BB8_21:
; 	ld	de, 0
; 	push	de
; 	pop	hl
; 	ld	e, c
; 	ld	(ix - 23), c
; 	ld	(ix - 24), b
; 	push	hl
; 	pop	bc
; 	ld	c, (iy + 13)
; 	ld	l, (iy + 12)
; 	call	__imulu
; 	ld	(ix - 6), hl
; 	push	bc
; 	pop	hl
; 	or	a, a
; 	sbc	hl, de
; 	ld	(ix - 27), hl
; 	ld	hl, (gfy_ClipXMax)
; 	ld	de, (ix - 3)
; 	or	a, a
; 	sbc	hl, de
; 	ld	(ix - 30), hl
; 	ld	a, (gfy_ClipYMax)
; 	or	a, a
; 	sbc	hl, hl
; 	ld	l, a
; 	ld	de, (ix - 15)
; 	sbc	hl, de
; 	ld	(ix - 15), hl
; 	ld	hl, (ix - 12)
; 	call	__imulu
; 	ld	a, (ix - 23)
; 	ld	de, (ix - 9)
; 	add	hl, de
; 	push	hl
; 	pop	bc
; BB8_22:
; 	ld	hl, (ix - 18)
; 	ld	de, (ix - 15)
; 	or	a, a
; 	sbc	hl, de
; 	jp	nc, BB8_31
; 	ld	hl, (ix - 6)
; 	push	bc
; 	pop	de
; 	or	a, a
; 	sbc	hl, de
; 	push	de
; 	pop	hl
; 	jr	c, BB8_25
; 	ld	hl, (ix - 6)
; BB8_25:
; 	ld	c, a
; 	ld	iy, (ix - 21)
; 	ld	(ix - 3), iy
; 	ld	iy, (ix + 6)
; 	ld	(ix - 9), hl
; BB8_26:
; 	or	a, a
; 	sbc	hl, de
; 	jp	z, BB8_20
; 	ld	(ix - 31), c
; 	ld	hl, (iy + 3)
; 	ld	(ix - 34), hl
; 	ld	iy, (iy)
; 	ld	(ix - 12), de
; 	add	iy, de
; 	or	a, a
; 	sbc	hl, hl
; 	ld	l, (iy)
; 	push	hl
; 	pop	bc
; 	add	hl, bc
; 	add	hl, bc
; 	ld	bc, 3
; 	push	hl
; 	pop	de
; 	ld	hl, (ix - 34)
; 	add	hl, de
; 	ld	iy, (hl)
; 	ld	de, (ix - 3)
; 	push	de
; 	pop	hl
; 	ld	bc, (ix - 30)
; 	or	a, a
; 	sbc	hl, bc
; 	ld	(ix - 3), de
; 	jr	nc, BB8_29
; 	ld	hl, (ix - 18)
; 	push	hl
; 	push	de
; 	push	iy
; 	call	gfy_TransparentSprite_NoClip
; 	jr	BB8_30
; BB8_29:
; 	ld	hl, (ix - 18)
; 	push	hl
; 	push	de
; 	push	iy
; 	call	gfy_TransparentSprite
; BB8_30:
; 	ld	hl, 9
; 	add	hl, sp
; 	ld	sp, hl
; 	ld	de, 0
; 	ld	iy, (ix + 6)
; 	ld	e, (iy + 7)
; 	ld	hl, (ix - 3)
; 	add	hl, de
; 	ld	(ix - 3), hl
; 	ld	de, (ix - 12)
; 	inc	de
; 	ld	c, (ix - 31)
; 	dec	c
; 	ld	a, c
; 	or	a, a
; 	ld	b, (ix - 24)
; 	ld	hl, (ix - 9)
; 	jr	nz, BB8_26
; 	jp	BB8_36
; BB8_31:
; 	ld	hl, (ix - 6)
; 	push	bc
; 	pop	de
; 	or	a, a
; 	sbc	hl, de
; 	ld	(ix - 9), de
; 	jr	c, BB8_33
; 	ld	hl, (ix - 6)
; 	ld	(ix - 9), hl
; BB8_33:
; 	ld	c, a
; 	ld	hl, (ix - 21)
; 	ld	(ix - 3), hl
; BB8_34:
; 	ld	hl, (ix - 9)
; 	or	a, a
; 	sbc	hl, de
; 	jp	z, BB8_20
; 	ld	hl, (iy + 3)
; 	ld	(ix - 34), hl
; 	ld	hl, (ix + 6)
; 	ld	iy, (hl)
; 	add	iy, de
; 	or	a, a
; 	sbc	hl, hl
; 	ld	l, (iy)
; 	ld	(ix - 31), c
; 	push	hl
; 	pop	bc
; 	add	hl, bc
; 	add	hl, bc
; 	ld	bc, 3
; 	ld	(ix - 12), de
; 	push	hl
; 	pop	de
; 	ld	hl, (ix - 34)
; 	add	hl, de
; 	ld	hl, (hl)
; 	ld	de, (ix - 18)
; 	push	de
; 	ld	de, (ix - 3)
; 	push	de
; 	push	hl
; 	call	gfy_TransparentSprite
; 	ld	c, (ix - 31)
; 	ld	b, (ix - 24)
; 	ld	iy, (ix + 6)
; 	ld	hl, 9
; 	add	hl, sp
; 	ld	sp, hl
; 	ld	de, 0
; 	ld	e, (iy + 7)
; 	ld	hl, (ix - 3)
; 	add	hl, de
; 	ld	(ix - 3), hl
; 	ld	de, (ix - 12)
; 	inc	de
; 	dec	c
; 	ld	a, c
; 	or	a, a
; 	jr	nz, BB8_34
; BB8_36:
; 	ld	hl, (ix - 27)
; 	add	hl, de
; 	ld	(ix - 3), hl
; 	ld	de, 0
; 	ld	e, (iy + 6)
; 	ld	hl, (ix - 18)
; 	add	hl, de
; 	ld	(ix - 18), hl
; 	ld	a, (ix - 22)
; 	inc	a
; 	ld	(ix - 22), a
; 	cp	a, b
; 	ld	bc, (ix - 3)
; 	ld	a, (ix - 23)
; 	jp	nz, BB8_22
; 	jp	BB8_20
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_GetSprite
; gfy_GetSprite:
; 	push	ix
; 	ld	ix, 0
; 	add	ix, sp
; 	lea	hl, ix - 7
; 	ld	sp, hl
; 	ld	hl, (ix + 6)
; 	xor	a, a
; 	ld	(ix - 4), a
; 	ld	bc, (-1900524)
; 	ld	a, (hl)
; 	or	a, a
; 	jr	z, BB9_3
; 	ld	hl, (ix + 12)
	
; 	push	bc
; 	pop	iy
; 	push	hl
; 	pop	bc
; 	add	iy, bc
; 	ld	hl, (ix + 9)
; 	call	__set_bc_and_mul_hl_by_240
; 	push	hl
; 	pop	de
; 	add	iy, de
; 	ld	(ix - 3), iy
; 	ld	iy, (ix + 6)
; 	lea	hl, iy + 2
; 	ld	de, 0
; 	ld	e, (iy + 1)
; BB9_2:
; 	push	de
; 	ld	de, (ix - 3)
; 	push	de
; 	ld	(ix - 7), hl
; 	push	hl
; 	call	_memcpy
; 	ld	iy, (ix + 6)
; 	ld	hl, 9
; 	add	hl, sp
; 	ld	sp, hl
; 	ld	de, 240
; 	ld	hl, (ix - 3)
; 	add	hl, de
; 	ld	(ix - 3), hl
; 	ld	de, 0
; 	ld	e, (iy + 1)
; 	ld	hl, (ix - 7)
; 	add	hl, de
; 	ld	a, (ix - 4)
; 	inc	a
; 	ld	c, (iy)
; 	ld	(ix - 4), a
; 	cp	a, c
; 	jr	c, BB9_2
; BB9_3:
; 	ld	hl, (ix + 6)
; 	ld	sp, ix
; 	pop	ix
; 	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ScaledSprite_NoClip
gfy_ScaledSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 25
	ld	sp, hl
	ld	l, (ix + 15)
	ld	iy, 0
	ld	a, l
	or	a, a
	jp	z, BB10_17
	ld	c, (ix + 18)
	ld	a, c
	or	a, a
	jp	z, BB10_17
	lea	de, iy
	ld	e, l
	ld	(ix - 6), de
	lea	hl, iy
	ld	l, c
	ld	(ix - 9), hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	hl, (ix + 9)
	call	__set_bc_and_mul_hl_by_240
	ld	(ix - 19), hl
	ld	hl, (ix - 6)
	call	__imulu
	ld	(ix - 6), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	or	a, a
	sbc	hl, hl
	ld	(ix - 15), a
	ld	l, a
	ld	bc, (ix - 9)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	ld	iy, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), hl
	ld	l, (iy)
	ld	a, l
	or	a, a
	jr	nz, BB10_5
	ld	a, (ix + 15)
	cp	a, 1
	jp	z, BB10_17
	ld	hl, (-1900524)
	jp	BB10_17
BB10_5:
	ld	de, 0
	ld	e, (ix + 12)
	ld	(ix - 25), de
	ld	iy, (ix - 3)
	add	iy, de
	ld	de, (ix - 19)
	add	iy, de
	lea	bc, iy
	ld	iy, (ix + 6)
	lea	de, iy + 2
	ld	(ix - 6), de
	ld	a, (ix + 18)
	dec	a
	ld	iy, 0
	ld	iyl, a
	ld	(ix - 22), iy
	push	af
	ld	a, (ix - 15)
	ld	iyl, a
	pop	af
	ld	iyh, iyl
	ld	d, 0
	ld	a, d
BB10_6:
	ld	(ix - 15), a
	ld	a, iyl
	or	a, a
	ld	iyl, d
	ld	a, d
	jr	z, BB10_9
BB10_7:
	ld	(ix - 16), a
	ld	hl, (ix - 6)
	ld	a, (hl)
	ld	hl, (ix - 9)
	push	hl
	ld	l, a
	push	hl
	ld	(ix - 3), bc
	push	bc
	call	_memset
	ld	a, (ix - 16)
	ld	iy, (ix + 6)
	ld	d, 0
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	bc, (ix - 22)
	ld	hl, (ix - 3)
	add	hl, bc
	inc	hl
	push	hl
	pop	bc
	inc	a
	ld	l, (iy + 1)
	ex	de, hl
	ld	iyh, e
	ex	de, hl
	cp	a, l
	jr	c, BB10_7
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	iyl, iyh
BB10_9:
	ld	e, l
	push	bc
	pop	hl
	ld	bc, (ix - 12)
	add	hl, bc
	push	hl
	pop	bc
	ld	l, e
	ld	a, (ix - 15)
	inc	a
	cp	a, l
	jr	c, BB10_6
	ld	a, (ix + 15)
	cp	a, 1
	jp	z, BB10_17
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, iyh
	ex	de, hl
	ld	bc, (ix - 9)
	call	__imulu
	ld	bc, (ix - 25)
	ld	(ix - 9), hl
	ld	a, e
	ld	e, (ix + 15)
	ld	iyl, a
	or	a, a
	jr	z, BB10_17
	ld	hl, (ix - 3)
	add	hl, bc
	ld	bc, (ix - 19)
	add	hl, bc
	ld	a, e
	dec	a
	ld	(ix - 16), a
	push	hl
	pop	bc
BB10_13:
	ld	(ix - 3), bc
	ld	bc, 240
	add	hl, bc
	ld	a, e
	cp	a, 2
	ld	a, (ix - 16)
	ld	(ix - 6), a
	push	hl
	pop	bc
	jr	c, BB10_16
BB10_14:
	ld	(ix - 12), d
	ld	hl, (ix - 9)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 15), bc
	push	bc
	call	_memcpy
	ld	iy, (ix + 6)
	ld	d, (ix - 12)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	e, (ix + 15)
	ld	bc, 240
	ld	hl, (ix - 15)
	add	hl, bc
	push	hl
	pop	bc
	ld	a, (ix - 6)
	dec	a
	ld	(ix - 6), a
	or	a, a
	jr	nz, BB10_14
	ld	a, (iy)
	ld	iyl, a
BB10_16:
	inc	d
	ld	a, d
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	cp	a, l
	push	bc
	pop	hl
	jr	c, BB10_13
BB10_17:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ScaledTransparentSprite_NoClip
gfy_ScaledTransparentSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 19
	ld	sp, hl
	ld	a, (ix + 15)
	or	a, a
	jp	z, BB11_13
	ld	e, (ix + 18)
	ld	a, e
	or	a, a
	jp	z, BB11_13
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	(ix - 7), hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	or	a, a
	sbc	hl, hl
	ld	(ix - 4), a
	ld	l, a
	ld	bc, (ix - 7)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, 240
	push	hl
	pop	de
	or	a, a
	sbc	hl, bc
	ld	c, (ix + 18)
	ld	(ix - 14), hl
	ld	hl, (ix + 6)
	ld	a, (hl)
	or	a, a
	jp	z, BB11_13
	ld	hl, (ix + 9)
	ld	a, c
	ld	bc, 0
	ld	c, (ix + 12)
	ld	iy, (ix - 3)
	add	iy, bc
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	lea	iy, iy + 2
	dec	a
	or	a, a
	sbc	hl, hl
	ld	l, a
	inc	hl
	ld	(ix - 19), hl
	xor	a, a
BB11_4:
	ld	(ix - 15), a
	ld	l, (ix - 4)
	ld	c, 0
BB11_5:
	ld	a, l
	or	a, a
	ld	(ix - 8), c
	jr	nz, BB11_7
	xor	a, a
	ld	l, a
	jr	BB11_11
BB11_7:
	ld	a, (gfy_Transparent_Color)
	ld	d, a
	ld	e, 0
BB11_8:
	ld	a, (iy)
	cp	a, d
	ld	bc, (ix - 7)
	lea	hl, iy
	jr	z, BB11_10
	ld	(ix - 11), hl
	ld	hl, (ix - 7)
	push	hl
	ld	l, a
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 16), e
	call	_memset
	ld	e, (ix - 16)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 11)
	ld	a, (gfy_Transparent_Color)
	ld	d, a
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	(ix - 4), a
	ld	bc, (ix - 19)
BB11_10:
	inc	hl
	push	hl
	pop	iy
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	inc	e
	ld	a, e
	ld	l, (ix - 4)
	cp	a, l
	jr	c, BB11_8
BB11_11:
	ld	(ix - 11), l
	ld	bc, 0
	ld	c, l
	ld	hl, (ix - 3)
	ld	de, (ix - 14)
	add	hl, de
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	sbc	hl, bc
	push	hl
	pop	bc
	add	iy, bc
	ld	c, (ix - 8)
	inc	c
	ld	a, c
	ld	l, (ix + 15)
	cp	a, l
	ld	l, (ix - 11)
	jp	nz, BB11_5
	ld	bc, 0
	ld	c, (ix - 4)
	add	iy, bc
	ld	a, (ix - 15)
	inc	a
	ld	hl, (ix + 6)
	ld	l, (hl)
	cp	a, l
	jp	c, BB11_4
BB11_13:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_FloodFill
gfy_FloodFill:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 41
	ld	sp, hl
	ld	bc, (ix + 6)
	ld	iy, (gfy_ClipXMin)
	ld	de, -8388608
	ld	(ix - 6), iy
	add	iy, de
	push	bc
	pop	hl
	add	hl, de
	push	hl
	pop	de
	ld	(ix - 3), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	c, BB12_39
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 9), iy
	ld	bc, -8388608
	add	iy, bc
	ex	de, hl
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB12_39
	ld	c, (ix + 9)
	ld	a, (gfy_ClipYMin)
	ld	l, a
	ld	a, c
	ld	(ix - 13), l
	cp	a, l
	jp	c, BB12_39
	ld	a, (gfy_ClipYMax)
	ld	l, a
	ld	a, c
	ld	(ix - 17), l
	cp	a, l
	jp	nc, BB12_39
	ld	a, c
	ld	bc, 240
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, a
	ld	iy, (-1900524)
	ld	hl, (ix + 6)
	call	__imulu
	add	hl, de
	push	hl
	pop	bc
	ld	(ix - 20), iy
	lea	hl, iy
	add	hl, bc
	ld	c, a
	ld	a, (hl)
	ld	(ix - 21), a
	ld	l, (ix + 12)
	cp	a, l
	jp	z, BB12_39
	ld	a, c
	ld	bc, 3072
	ld	hl, 0
	add	hl, sp
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	sp, iy
	ld	hl, (ix + 6)
	ld	(iy), l
	ld	(iy + 1), h
	ld	(ix - 28), iy
	ld	(iy + 2), a
	ld	l, (ix - 17)
	dec	l
	ld	(ix - 17), l
	ld	iy, (ix - 6)
	lea	hl, iy
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	hl, (ix - 20)
	add	hl, bc
	ld	(ix - 34), hl
	ld	bc, 1
	dec	iy
	ld	(ix - 6), iy
	ld	hl, (ix - 9)
	dec	hl
	ld	(ix - 9), hl
BB12_6:
	dec	bc
	ld	(ix - 24), bc
	push	bc
	pop	hl
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (iy)
	ld	a, (iy + 2)
	ld	bc, 0
	push	bc
	pop	iy
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	push	bc
	pop	de
	ld	(ix - 25), a
	ld	e, a
	lea	hl, iy
	call	__set_bc_and_mul_hl_by_240
	ld	(ix - 31), de
	add	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 20)
	add	hl, bc
	ld	(ix - 16), hl
	lea	hl, iy
	ld	de, -8388608
	add	hl, de
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	c, BB12_11
	ld	hl, (ix - 34)
	ld	de, (ix - 31)
	add	hl, de
	ld	de, -240
	add	hl, de
	ld	(ix - 31), hl
	ld	hl, (ix - 16)
BB12_8:
	ld	(ix - 16), hl
	ld	a, (hl)
	ld	l, (ix - 21)
	cp	a, l
	ld	bc, -8388608
	jr	nz, BB12_12
	dec	iy
	ld	de, -240
	ld	hl, (ix - 16)
	add	hl, de
	ex	de, hl
	lea	hl, iy
	inc	hl
	add	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	ex	de, hl
	jr	c, BB12_8
	ld	hl, (ix - 31)
	ld	(ix - 16), hl
	ld	iy, (ix - 6)
BB12_11:
	ld	bc, -8388608
BB12_12:
	ld	de, (ix - 9)
	lea	hl, iy
	inc	hl
	add	hl, bc
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	jp	nc, BB12_37
	ld	a, (ix - 25)
	ld	l, a
	dec	l
	ld	(ix - 37), l
	inc	a
	ld	(ix - 38), a
	ex	de, hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 31), hl
	inc.sis	de
	ld	bc, 241
	ld	iy, (ix - 16)
	add	iy, bc
	xor	a, a
	ld	(ix - 35), a
	ld	(ix - 36), a
	ld	bc, (ix - 24)
BB12_14:
	ld	a, (iy - 1)
	ld	l, (ix - 21)
	cp	a, l
	jp	nz, BB12_38
	ld	(ix - 41), de
	ld	(ix - 16), iy
	push	bc
	pop	hl
	ld	de, 1022
	or	a, a
	sbc	hl, de
	jp	nc, BB12_38
	ld	a, (ix + 12)
	ld	iy, (ix - 16)
	ld	(iy - 1), a
	ld	a, (ix - 13)
	ld	l, (ix - 25)
	cp	a, l
	ld	(ix - 24), bc
	jr	nc, BB12_20
	ld	l, (iy - 2)
	ld	a, (ix - 35)
	and	a, 1
	ld	c, a
	bit	0, c
	jr	nz, BB12_21
	ld	a, l
	ld	h, (ix - 21)
	cp	a, h
	jr	nz, BB12_21
	ld	hl, (ix - 24)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (ix - 41)
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (ix - 37)
	ld	(iy + 2), a
	ld	de, (ix - 9)
	ld	hl, (ix - 24)
	inc	hl
	ld	(ix - 24), hl
	ld	a, 1
	jr	BB12_25
BB12_20:
	ld	bc, 240
	ld	de, (ix - 9)
	jr	BB12_27
BB12_21:
	ld	a, c
	xor	a, 1
	ld	c, a
	ld	a, l
	ld	l, (ix - 21)
	cp	a, l
	ld	l, -1
	jr	z, BB12_23
	ld	l, 0
BB12_23:
	ld	a, c
	or	a, l
	bit	0, a
	ld	de, (ix - 9)
	jr	nz, BB12_26
	xor	a, a
BB12_25:
	ld	(ix - 35), a
BB12_26:
	ld	bc, 240
BB12_27:
	ld	a, (ix - 25)
	ld	l, (ix - 17)
	cp	a, l
	jr	nc, BB12_36
	ld	hl, (ix - 16)
	ld	l, (hl)
	ld	a, (ix - 36)
	and	a, 1
	ld	c, a
	bit	0, c
	jr	nz, BB12_31
	ld	a, l
	ld	h, (ix - 21)
	cp	a, h
	jr	nz, BB12_31
	ld	de, (ix - 24)
	push	de
	pop	hl
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (ix - 41)
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (ix - 38)
	ld	(iy + 2), a
	inc	de
	ld	(ix - 24), de
	ld	a, 1
	jr	BB12_34
BB12_31:
	ld	a, c
	xor	a, 1
	ld	c, a
	ld	a, l
	ld	l, (ix - 21)
	cp	a, l
	ld	l, -1
	jr	z, BB12_33
	ld	l, 0
BB12_33:
	ld	a, c
	or	a, l
	bit	0, a
	ld	a, 0
	jr	nz, BB12_35
BB12_34:
	ld	(ix - 36), a
BB12_35:
	ld	bc, 240
BB12_36:
	ld	hl, (ix - 31)
	dec	hl
	ld	de, (ix - 41)
	inc.sis	de
	ld	iy, (ix - 16)
	add	iy, bc
	ld	(ix - 31), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, (ix - 24)
	jp	nz, BB12_14
	jr	BB12_38
BB12_37:
	ld	bc, (ix - 24)
BB12_38:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, (ix - 9)
	jp	nz, BB12_6
BB12_39:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_RLETSprite
gfy_RLETSprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 24
	ld	sp, hl
	ld	hl, (ix + 9)
	ld	iy, (gfy_ClipXMax)
	ld	de, -8388608
	add	iy, de
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB13_40
	ld	hl, (ix + 12)
	ld	a, (gfy_ClipYMax)
	ld	de, 0
	lea	bc, iy
	push	de
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	add	hl, de
	ld	(ix - 3), hl
	ld	(ix - 6), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB13_40
	ld	hl, (ix + 6)
	ld	e, (hl)
	ld	a, e
	or	a, a
	jp	z, BB13_40
	ld	iy, (ix + 6)
	ld	d, (iy + 1)
	ld	a, d
	or	a, a
	jp	z, BB13_40
	ld	(ix - 12), bc
	ld	iy, (gfy_ClipXMin)
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 9)
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB13_8
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	l, e
	ld	(ix - 15), hl
	push	bc
	pop	hl
	ld	l, d
	ld	(ix - 9), hl
	ld	a, (gfy_ClipYMin)
	ld	c, a
	ld	(ix - 18), bc
	ld	de, (ix + 9)
	ld	hl, (ix - 15)
	add	hl, de
	push	hl
	pop	bc
	ld	de, (ix + 12)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, -8388608
	ld	hl, (ix - 18)
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, de
	jr	c, BB13_8
	ld	de, -8388608
	push	bc
	pop	iy
	add	iy, de
	ld	hl, (ix - 12)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	c, BB13_8
	ld	de, -8388608
	ld	iy, (ix - 9)
	add	iy, de
	ld	hl, (ix - 6)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB13_39
BB13_8:
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	de, 0
	ld	(ix - 12), a
	ld	e, a
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 21), hl
	ld	a, (iy)
	ld	(ix - 15), a
	or	a, a
	ld	hl, (ix + 9)
	jp	z, BB13_40
	call	__set_bc_and_mul_hl_by_240
	ld	bc, (ix + 9)
	ld	de, (ix + 12)
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	lea	hl, iy + 2
	ld	(ix - 18), hl
	ld	a, (ix - 12)
	ld	iy, 0
BB13_10:
	ld	(ix - 6), iy
	add	iy, bc
	ld	de, (gfy_ClipXMin)
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 9), hl
	ld	hl, -8388608
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	ex	de, hl
	add	iy, bc
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jr	c, BB13_14
	ld	hl, (ix - 9)
	ld	bc, -8388608
	add	hl, bc
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB13_14
	ld	iyl, a
	or	a, a
	jr	nz, BB13_20
	xor	a, a
	ld	de, 0
	jp	BB13_37
BB13_14:
	ld	bc, -8388608
	ld	hl, (ix - 9)
	add	hl, bc
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ld	hl, (ix - 6)
	jp	nc, BB13_40
	ld	c, a
	ld	de, 0
	or	a, a
	jr	nz, BB13_17
	ld	a, c
	jp	BB13_33
BB13_17:
	push	de
	pop	hl
	ld	l, c
	ld	(ix - 9), hl
	ld	iy, 0
	ld	a, c
BB13_18:
	push	de
	pop	bc
	ld	hl, (ix - 18)
	ld	c, (hl)
	add	iy, bc
	push	de
	pop	bc
	lea	hl, iy
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	jp	nc, BB13_32
	push	bc
	pop	de
	ld	hl, (ix - 18)
	ld	(ix - 24), iy
	push	hl
	pop	iy
	ld	e, (iy + 1)
	add	hl, de
	push	hl
	pop	iy
	lea	iy, iy + 2
	ld	(ix - 18), iy
	ld	iy, (ix - 24)
	add	iy, de
	lea	hl, iy
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	push	bc
	pop	de
	jr	c, BB13_18
	jp	BB13_33
BB13_20:
	ld	hl, (ix - 18)
	ld	a, (hl)
	ld	de, 0
	push	de
	pop	bc
	ld	c, a
	ld	(ix - 9), bc
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	cp	a, iyl
	jp	nc, BB13_34
	ld	de, (ix - 9)
	ld	(ix - 15), de
	ld	hl, (ix - 18)
	ld	(ix - 9), hl
BB13_22:
	ld	de, (ix - 9)
	push	de
	pop	iy
	lea	hl, iy + 2
	ld	c, (iy + 1)
	ld	a, c
	or	a, a
	jr	nz, BB13_24
	ld	(ix - 9), hl
	ld	a, (ix - 12)
	jr	BB13_30
BB13_24:
	ld	a, (gfy_ClipYMin)
	ld	(ix - 18), a
	ld	(ix - 9), hl
	ld	de, (ix - 15)
BB13_25:
	ld	(ix - 12), c
	ld	hl, (ix + 12)
	ld	(ix - 15), de
	add	hl, de
	push	hl
	pop	de
	ld	bc, 0
	ld	c, (ix - 18)
	or	a, a
	sbc	hl, bc
	jr	c, BB13_28
	ld	a, (gfy_ClipYMax)
	ld	bc, 0
	ld	c, a
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jr	nc, BB13_28
	ld	hl, (ix - 9)
	ld	a, (hl)
	ld	hl, (ix - 3)
	ld	(hl), a
	ld	a, (gfy_ClipYMin)
	ld	(ix - 18), a
BB13_28:
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 9), hl
	ld	de, (ix - 15)
	inc	de
	ld	hl, (ix - 3)
	inc	hl
	ld	(ix - 3), hl
	ld	c, (ix - 12)
	dec	c
	ld	a, c
	or	a, a
	jr	nz, BB13_25
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	(ix - 15), de
BB13_30:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	hl, (ix - 15)
	sbc	hl, bc
	ld	(ix - 12), a
	jr	nc, BB13_35
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 18), hl
	ld	de, 0
	ld	hl, (ix - 9)
	ld	e, (hl)
	ld	hl, (ix - 15)
	add	hl, de
	ld	iy, (ix - 3)
	add	iy, de
	ld	(ix - 3), iy
	ld	(ix - 15), hl
	or	a, a
	sbc	hl, bc
	ld	iyl, a
	ld	de, 0
	jr	nc, BB13_36
	jp	BB13_22
BB13_32:
	ld	hl, (ix - 18)
	inc	hl
	ld	(ix - 18), hl
	push	bc
	pop	de
BB13_33:
	ld	bc, 240
	jr	BB13_38
BB13_34:
	ld	hl, (ix - 18)
	inc	hl
	ld	(ix - 18), hl
	jr	BB13_36
BB13_35:
	ld	iyl, a
	ld	hl, (ix - 9)
	ld	(ix - 18), hl
	ld	de, 0
BB13_36:
	ld	hl, (ix + 6)
	ld	a, (hl)
	ld	(ix - 15), a
	ld	a, iyl
BB13_37:
	ld	bc, (ix - 21)
BB13_38:
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	ld	iy, (ix - 6)
	inc	iy
	ld	e, (ix - 15)
	lea	hl, iy
	or	a, a
	sbc	hl, de
	ld	bc, (ix + 9)
	jp	c, BB13_10
	jr	BB13_40
BB13_39:
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	gfy_RLETSprite_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
BB13_40:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_CopyRectangle
gfy_CopyRectangle:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 12
	ld	sp, hl
	call	gfy_Wait
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, -1900528
	push	hl
	pop	de
	jr	z, BB14_2
	ld	hl, -1900524
BB14_2:
	ld	a, (ix + 21)
	ld	bc, 240
	ld	iy, (hl)
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ex	de, hl
	jr	z, BB14_4
	ld	hl, -1900524
BB14_4:
	ld	hl, (hl)
	ld	(ix - 3), hl
	ld	de, 0
	ld	e, (ix + 15)
	ld	hl, (ix + 12)
	call	__imulu
	add	hl, de
	push	de
	pop	bc
	ex	de, hl
	add	iy, de
	push	bc
	pop	de
	ld	e, a
	ld	hl, (ix + 18)
	call	__set_bc_and_mul_hl_by_240
	push	de
	pop	bc
	add	hl, bc
	ex	de, hl
	ld	hl, (ix - 3)
	add	hl, de
	ex	de, hl
	ld	c, (ix + 27)
	ld	(ix - 6), bc
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jr	nz, BB14_7
	ld	hl, (ix + 24)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	jr	nz, BB14_8
BB14_6:
	ld	sp, ix
	pop	ix
	ret
BB14_7:
	ex	de, hl
	jr	BB14_10
BB14_8:
	ld	hl, 240
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	lea	hl, iy
BB14_9:
	ld	(ix - 9), bc
	ld	de, -240
	add	hl, de
	ld	(ix - 3), hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_memmove
	ld	bc, (ix - 9)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	dec	bc
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, (ix - 3)
	push	hl
	pop	iy
	jr	nz, BB14_9
BB14_10:
	ex	de, hl
	ld	bc, (ix + 24)
BB14_11:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB14_6
	ld	(ix - 12), iy
	ld	(ix - 9), bc
	ld	hl, (ix - 6)
	push	hl
	push	iy
	ld	(ix - 3), de
	push	de
	call	_memcpy
	ld	iy, (ix - 12)
	ld	bc, (ix - 9)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 240
	ex	de, hl
	add	iy, de
	ld	hl, (ix - 3)
	add	hl, de
	ex	de, hl
	dec	bc
	jr	BB14_11
;	section	.text,"ax",@progbits

;	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 51b05c1c99dbd61fce7daf56414f212f15b2171a)"
;	extern	gfy_internal_Begin
;	extern	__Unwind_SjLj_Register
;	extern	gfy_Transparent_Color
;	extern	lcd_SendCommand1
;	extern	gfy_TransparentSprite
;	extern	gfy_Wait
;	extern	gfy_ClipXMin
;	extern	_memcpy
;	extern	__ishl
;	extern	gfy_internal_End
;	extern	__idivu
;	extern	lcd_SendSizedCommandWords
;	extern	gfy_Sprite_NoClip
;	extern	__ixor
;	extern	gfy_ClipYMin
;	extern	gfy_TransparentSprite_NoClip
;	extern	_memset
;	extern	_memmove
;	extern	gfy_Color
;	extern	lcd_Init
;	extern	gfy_ClipXMax
;	extern	__Unwind_SjLj_Unregister
;	extern	gfy_RLETSprite_NoClip
;	extern	lcd_Cleanup
;	extern	gfy_Sprite
;	extern	__imulu
;	extern	gfy_ClipYMax
