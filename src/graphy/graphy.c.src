;	section	.text,"ax",@progbits
;	assume	adl = 1
;	section	.text,"ax",@progbits
;	public	gfy_Begin
gfy_Begin:
	call	lcd_Init
	call	gfy_internal_Begin
	ld	hl, 40
	push	hl
	ld	hl, 54
	push	hl
	call	lcd_SendCommand1
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 239
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 554
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 319
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 555
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	jp	lcd_Cleanup
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_End
gfy_End:
	call	lcd_Init
	ld	hl, 8
	push	hl
	ld	hl, 54
	push	hl
	call	lcd_SendCommand1
	ld	hl, 6
	add	hl, sp
	ld	sp, hl
	ld	hl, 319
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 554
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, 239
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 555
	push	hl
	call	lcd_SendSizedCommandWords
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	call	lcd_Cleanup
	jp	gfy_internal_End
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_PrintChar
; gfy_PrintChar:
; 	push	ix
; 	ld	ix, 0
; 	add	ix, sp
; 	lea	hl, ix - 26
; 	ld	sp, hl
; 	ld	a, (gfy_TextWidthScale)
; 	ld	e, a
; 	ld	a, (gfy_TextHeightScale)
; 	ld	l, a
; 	ld	a, e
; 	or	a, a
; 	jp	z, BB2_43
; 	ld	a, l
; 	or	a, a
; 	jp	z, BB2_43
; 	ld	a, -128
; 	ld	(ix - 4), a
; 	call	gfy_Wait
; 	ld	l, (ix + 6)
; 	push	hl
; 	call	gfy_GetCharWidth
; 	pop	de
; 	ld	a, (gfy_TextWidthScale)
; 	ld	d, a
; 	ld	bc, 0
; 	ld	c, d
; 	ld	(ix - 17), bc
; 	call	__idivu
; 	ld	e, l
; 	ld	(ix - 7), de
; 	ld	bc, 255
; 	inc.s	hl
; 	dec	hl
; 	ld	h, b
; 	ld	(ix - 14), hl
; 	ld	a, (gfy_TextHeightScale)
; 	ld	(ix - 11), a
; 	ld	b, 3
; 	add	a, a
; 	add	a, a
; 	add	a, a
; 	ld	(ix - 3), a
; 	ld	a, (gfy_PrintChar_Clip)
; 	ld	hl, (gfy_TextXPos)
; 	ld	(ix - 10), hl
; 	cp	a, 2
; 	jp	z, BB2_26
; 	ld	hl, (ix - 10)
; 	ld	iy, (gfy_ClipXMin)
; 	ld	bc, -8388608
; 	add	iy, bc
; 	add	hl, bc
; 	lea	bc, iy
; 	or	a, a
; 	sbc	hl, bc
; 	jp	nc, BB2_26
; 	ld	hl, (gfy_TextYPos)
; 	ld	a, (gfy_ClipYMin)
; 	ld	iy, 0
; 	ld	iyl, a
; 	ld	bc, -8388608
; 	add	iy, bc
; 	ld	(ix - 20), hl
; 	add	hl, bc
; 	lea	bc, iy
; 	or	a, a
; 	sbc	hl, bc
; 	jp	nc, BB2_26
; 	ld	hl, (ix - 7)
; 	mlt	hl
; 	ld	bc, 0
; 	ld	c, l
; 	ld	iy, (ix - 10)
; 	add	iy, bc
; 	ld	hl, (gfy_ClipXMax)
; 	ld	de, -8388608
; 	add	iy, de
; 	add	hl, de
; 	lea	bc, iy
; 	or	a, a
; 	sbc	hl, bc
; 	jp	nc, BB2_26
; 	or	a, a
; 	sbc	hl, hl
; 	push	hl
; 	pop	bc
; 	ld	c, (ix - 3)
; 	ld	iy, (ix - 20)
; 	add	iy, bc
; 	ld	a, (gfy_ClipYMax)
; 	ld	l, a
; 	ld	de, -8388608
; 	add	iy, de
; 	add	hl, de
; 	lea	bc, iy
; 	or	a, a
; 	sbc	hl, bc
; 	jp	nc, BB2_26
; 	ld	hl, (-1900524)
; 	ld	(ix - 25), hl
; 	ld	de, (ix - 14)
; 	push	de
; 	pop	hl
; 	ld	bc, (ix - 17)
; 	call	__imulu
; 	push	de
; 	pop	bc
; 	push	hl
; 	pop	de
; 	ld	hl, (ix - 10)
; 	add	hl, de
; 	ld	(gfy_TextXPos), hl
; 	ld	a, c
; 	or	a, a
; 	jp	z, BB2_43
; 	ld	iy, (gfy_TextData)
; 	ld	hl, (ix - 10)
; 	call	__set_bc_and_mul_hl_by_240
; 	push	hl
; 	pop	de
; 	ld	hl, (ix - 20)
; 	add	hl, de
; 	ld	(ix - 20), hl
; 	or	a, a
; 	sbc	hl, hl
; 	ld	l, (ix + 6)
; 	ld	c, 3
; 	add	hl, hl
; 	add	hl, hl
; 	add	hl, hl
; 	push	hl
; 	pop	de
; 	add	iy, de
; 	ld	de, (ix - 7)
; 	ld	a, (ix - 11)
; 	ld	(ix - 22), a
; 	ld	a, d
; 	or	a, a
; 	sbc	hl, hl
; 	ld	(ix - 10), hl
; BB2_9:
; 	or	a, a
; 	jr	nz, BB2_11
; 	xor	a, a
; 	jp	BB2_25
; BB2_11:
; 	ld	a, (gfy_FontHeight)
; 	ld	c, a
; 	ld	(ix - 17), c
; 	ld	l, 0
; BB2_12:
; 	ld	(ix - 21), l
; 	ld	(ix - 7), de
; 	ld	a, c
; 	or	a, a
; 	ld	e, 0
; 	ld	c, e
; 	ld	hl, (ix - 20)
; 	ld	(ix - 3), hl
; 	jp	z, BB2_24
; BB2_13:
; 	ld	a, (iy)
; 	and	a, (ix - 4)
; 	ld	c, a
; 	ld	a, (gfy_Text_BG_Color)
; 	ld	h, a
; 	ld	a, (gfy_Text_FG_Color)
; 	ld	l, a
; 	ld	a, c
; 	or	a, a
; 	jr	z, BB2_15
; 	ld	h, l
; BB2_15:
; 	ld	a, (gfy_Text_TP_Color)
; 	ld	l, a
; 	ld	a, h
; 	cp	a, l
; 	jr	nz, BB2_17
; 	ld	bc, 0
; 	ld	a, (ix - 11)
; 	ld	c, a
; 	ld	hl, (ix - 3)
; 	add	hl, bc
; 	ld	(ix - 3), hl
; 	ld	l, a
; 	jr	BB2_22
; BB2_17:
; 	ld	(ix - 26), h
; 	ld	a, (ix - 22)
; 	or	a, a
; 	ld	a, 0
; 	ld	l, a
; 	ld	bc, (ix - 3)
; 	jr	z, BB2_22
; BB2_18:
; 	ld	(ix - 3), a
; 	ld	(ix - 7), e
; 	push	bc
; 	pop	hl
; 	ld	de, 76800
; 	or	a, a
; 	sbc	hl, de
; 	jr	nc, BB2_20
; 	ld	hl, (ix - 25)
; 	add	hl, bc
; 	ld	a, (ix - 26)
; 	ld	(hl), a
; 	ld	a, (gfy_TextHeightScale)
; 	ld	(ix - 11), a
; BB2_20:
; 	inc	bc
; 	ld	a, (ix - 3)
; 	inc	a
; 	ld	l, (ix - 11)
; 	cp	a, l
; 	ld	e, (ix - 7)
; 	jr	c, BB2_18
; 	ld	a, (gfy_FontHeight)
; 	ld	(ix - 17), a
; 	ld	l, (ix - 11)
; 	ld	(ix - 3), bc
; BB2_22:
; 	ld	(ix - 22), l
; 	inc	iy
; 	inc	e
; 	ld	a, e
; 	ld	l, (ix - 17)
; 	cp	a, l
; 	jp	c, BB2_13
; 	ld	a, (gfy_TextWidthScale)
; 	ld	h, a
; 	ld	(ix - 7), hl
; 	ld	c, (ix - 17)
; BB2_24:
; 	ld	de, 0
; 	ld	e, c
; 	ld	a, c
; 	ld	bc, 240
; 	ld	hl, (ix - 20)
; 	add	hl, bc
; 	ld	c, a
; 	ld	(ix - 20), hl
; 	or	a, a
; 	sbc	hl, hl
; 	sbc	hl, de
; 	push	hl
; 	pop	de
; 	add	iy, de
; 	ld	l, (ix - 21)
; 	inc	l
; 	ld	a, l
; 	ld	de, (ix - 7)
; 	cp	a, d
; 	ld	a, d
; 	jp	c, BB2_12
; BB2_25:
; 	ld	l, (ix - 4)
; 	srl	l
; 	ld	(ix - 4), l
; 	ld	hl, (ix - 10)
; 	inc	hl
; 	ld	(ix - 10), hl
; 	ld	bc, (ix - 14)
; 	or	a, a
; 	sbc	hl, bc
; 	jp	z, BB2_43
; 	jp	BB2_9
; BB2_26:
; 	ld	hl, (-1900524)
; 	ld	(ix - 3), hl
; 	ld	hl, (gfy_TextYPos)
; 	ld	(ix - 20), hl
; 	ld	hl, (ix - 14)
; 	ld	bc, (ix - 17)
; 	call	__imulu
; 	push	hl
; 	pop	de
; 	ld	hl, (ix - 10)
; 	add	hl, de
; 	ld	(gfy_TextXPos), hl
; 	ld	hl, (ix - 7)
; 	ld	a, l
; 	or	a, a
; 	jp	z, BB2_43
; 	ld	iy, (gfy_TextData)
; 	ld	hl, (ix - 10)
; 	call	__set_bc_and_mul_hl_by_240
; 	ld	de, (ix - 20)
; 	add	hl, de
; 	ex	de, hl
; 	ld	hl, (ix - 3)
; 	add	hl, de
; 	ld	(ix - 3), hl
; 	or	a, a
; 	sbc	hl, hl
; 	ld	l, (ix + 6)
; 	ld	c, 3
; 	add	hl, hl
; 	add	hl, hl
; 	add	hl, hl
; 	push	hl
; 	pop	de
; 	add	iy, de
; 	ld	de, (ix - 7)
; 	ld	(ix - 20), d
; 	ld	l, d
; 	ld	c, b
; BB2_28:
; 	ld	a, l
; 	or	a, a
; 	jr	nz, BB2_30
; 	ld	l, b
; 	jp	BB2_42
; BB2_30:
; 	ld	a, (gfy_FontHeight)
; 	ld	h, a
; 	ld	(ix - 14), h
; 	ld	a, b
; 	ld	(ix - 21), c
; BB2_31:
; 	ld	(ix - 17), a
; 	ld	a, h
; 	or	a, a
; 	ld	a, b
; 	ld	l, b
; 	ld	de, (ix - 3)
; 	ld	(ix - 10), de
; 	jr	z, BB2_41
; BB2_32:
; 	ld	a, (iy)
; 	and	a, (ix - 4)
; 	ld	b, a
; 	ld	a, (gfy_Text_BG_Color)
; 	ld	h, a
; 	ld	a, (gfy_Text_FG_Color)
; 	ld	d, a
; 	ld	a, b
; 	or	a, a
; 	jr	z, BB2_34
; 	ld	h, d
; BB2_34:
; 	ld	a, (gfy_Text_TP_Color)
; 	ld	d, a
; 	ld	a, h
; 	cp	a, d
; 	jr	nz, BB2_36
; 	ld	bc, 0
; 	ld	c, (ix - 11)
; 	lea	de, iy
; 	ld	iy, (ix - 10)
; 	add	iy, bc
; 	ld	(ix - 10), iy
; 	push	de
; 	pop	iy
; 	jr	BB2_39
; BB2_36:
; 	ld	a, (ix - 11)
; 	or	a, a
; 	ld	a, 0
; 	ld	d, a
; 	ld	(ix - 11), a
; 	jr	z, BB2_39
; BB2_37:
; 	lea	bc, iy
; 	ld	iy, (ix - 10)
; 	ld	(iy), h
; 	inc	iy
; 	ld	(ix - 10), iy
; 	push	bc
; 	pop	iy
; 	inc	d
; 	ld	a, (gfy_TextHeightScale)
; 	ld	e, a
; 	ld	a, d
; 	ld	(ix - 11), e
; 	cp	a, e
; 	jr	c, BB2_37
; 	ld	a, (gfy_FontHeight)
; 	ld	(ix - 14), a
; BB2_39:
; 	inc	iy
; 	inc	l
; 	ld	a, l
; 	ld	e, (ix - 14)
; 	cp	a, e
; 	jr	c, BB2_32
; 	ld	a, (gfy_TextWidthScale)
; 	ld	(ix - 20), a
; 	ld	a, (ix - 14)
; BB2_41:
; 	ld	bc, 0
; 	ld	c, a
; 	ld	de, 240
; 	ld	hl, (ix - 3)
; 	add	hl, de
; 	ld	(ix - 3), hl
; 	or	a, a
; 	sbc	hl, hl
; 	sbc	hl, bc
; 	push	hl
; 	pop	bc
; 	ld	h, a
; 	add	iy, bc
; 	ld	a, (ix - 17)
; 	inc	a
; 	ld	l, (ix - 20)
; 	cp	a, l
; 	ld	b, d
; 	ld	de, (ix - 7)
; 	ld	c, (ix - 21)
; 	jp	c, BB2_31
; BB2_42:
; 	ld	a, (ix - 4)
; 	srl	a
; 	ld	(ix - 4), a
; 	inc	c
; 	ld	a, c
; 	cp	a, e
; 	jp	nz, BB2_28
; BB2_43:
; 	ld	sp, ix
; 	pop	ix
; 	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_PrintString
; gfy_PrintString:
; 	push	ix
; 	ld	ix, 0
; 	add	ix, sp
; 	push	hl
; 	ld	iy, (ix + 6)
; 	ld	l, (iy)
; 	ld	a, l
; 	or	a, a
; 	jp	z, BB3_3
; 	inc	iy
; BB3_2:
; 	ld	(ix - 3), iy
; 	push	hl
; 	call	gfy_PrintChar
; 	ld	iy, (ix - 3)
; 	pop	hl
; 	ld	a, (iy)
; 	ld	l, a
; 	inc	iy
; 	or	a, a
; 	jr	nz, BB3_2
; BB3_3:
; 	ld	sp, ix
; 	pop	ix
; 	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_PrintStringXY
; gfy_PrintStringXY:
; 	push	ix
; 	ld	ix, 0
; 	add	ix, sp
; 	push	hl
; 	ld	hl, (ix + 9)
; 	ld	de, (ix + 12)
; 	push	de
; 	push	hl
; 	call	gfy_SetTextXY
; 	ld	iy, (ix + 6)
; 	ld	hl, 6
; 	add	hl, sp
; 	ld	sp, hl
; 	ld	l, (iy)
; 	ld	a, l
; 	or	a, a
; 	jp	z, BB4_3
; 	inc	iy
; BB4_2:
; 	ld	(ix - 3), iy
; 	push	hl
; 	call	gfy_PrintChar
; 	ld	iy, (ix - 3)
; 	pop	hl
; 	ld	a, (iy)
; 	ld	l, a
; 	inc	iy
; 	or	a, a
; 	jr	nz, BB4_2
; BB4_3:
; 	ld	sp, ix
; 	pop	ix
; 	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_FillCircle
gfy_FillCircle:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	bc, (ix + 12)
	ld	de, 0
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	push	bc
	pop	hl
	call	__set_bc_and_mul_hl_by_minus2
	ld	bc, 2
	add	hl, bc
	ld	(ix - 6), hl
	ld	(ix - 3), de
BB5_1:
	ld	hl, (ix + 6)
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	lea	hl, iy
	ld	bc, (ix + 9)
	add	hl, bc
	ld	(ix - 12), hl
	ld	(ix - 9), iy
	lea	hl, iy
	call	__set_bc_and_mul_hl_by_minus2
	inc	hl
	ld	(ix - 15), hl
	push	hl
	ld	hl, (ix - 12)
	push	hl
	push	de
	call	gfy_VertLine
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 3)
	ld	de, (ix + 6)
	add	hl, de
	ld	de, (ix - 15)
	push	de
	ld	de, (ix - 12)
	push	de
	push	hl
	call	gfy_VertLine
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	iy, (ix - 6)
	ld	de, -8388608
	add	iy, de
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	add	hl, de
	ld	(ix - 12), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	sbc	a, a
	push	bc
	pop	iy
	inc	iy
	lea	hl, iy
	ld	c, 1
	add	hl, hl
	bit	0, a
	jr	nz, BB5_3
	ld	(ix - 3), iy
BB5_3:
	bit	0, a
	ld	iy, 0
	jr	nz, BB5_5
	inc	hl
	push	hl
	pop	iy
BB5_5:
	ld	de, (ix - 6)
	add	iy, de
	ld	(ix - 6), iy
	ld	hl, (ix - 9)
	ld	bc, -8388608
	add	hl, bc
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	e, a
	add	iy, bc
	ld	hl, (ix - 3)
	add	hl, bc
	lea	bc, iy
	ld	iy, (ix - 9)
	or	a, a
	sbc	hl, bc
	sbc	a, a
	ld	l, a
	ld	a, e
	or	a, l
	lea	de, iy
	inc	de
	push	de
	pop	hl
	ld	c, 1
	add	hl, hl
	bit	0, a
	jr	nz, BB5_7
	lea	de, iy
BB5_7:
	bit	0, a
	jr	nz, BB5_9
	or	a, a
	sbc	hl, hl
	jr	BB5_10
BB5_9:
	inc	hl
BB5_10:
	ld	bc, -8388608
	push	bc
	pop	iy
	ld	bc, (ix - 6)
	add	hl, bc
	ld	(ix - 6), hl
	push	de
	pop	hl
	lea	bc, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	de
	pop	iy
	jp	c, BB5_1
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Line_NoClip
gfy_Line_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 21
	ld	sp, hl
	ld	a, (ix + 15)
	ld	hl, 1
	ld	(ix - 3), hl
	ld	de, 0
	push	de
	pop	hl
	ld	l, a
	ld	e, (ix + 9)
	ld	(ix - 6), hl
	ld	(ix - 15), de
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 9), de
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	(ix - 12), hl
	ld	hl, (ix + 12)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	ld	(ix - 21), hl
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, de
	jp	nc, BB6_11
	ld	hl, (-1900524)
	ld	(ix - 18), hl
	ld	iy, (ix + 12)
	lea	hl, iy
	ld	bc, (ix + 6)
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	jp	nc, BB6_20
	push	bc
	pop	hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	hl, (ix - 15)
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, -8388608
	add	hl, de
	or	a, a
	sbc	hl, de
	jr	nc, BB6_4
	scf
	sbc	hl, hl
	ld	(ix - 3), hl
BB6_4:
	push	bc
	pop	hl
	push	bc
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	de
	ld	c, 1
	add	hl, hl
	ld	(ix - 12), hl
	ex	de, hl
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 15), hl
	ld	iy, (ix + 6)
	ld	hl, -8388608
	ex	de, hl
	add	iy, de
	ld	bc, (ix + 12)
	push	bc
	pop	hl
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	iy, (ix - 18)
	jp	nc, BB6_38
	ld	hl, (ix - 12)
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	bc
	pop	hl
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
BB6_6:
	ld	a, (gfy_Color)
	ld	(ix - 18), iy
	ld	bc, (ix - 6)
	add	iy, bc
	ld	(iy), a
	push	de
	pop	hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 15)
	jr	nz, BB6_8
	ld	hl, (ix - 12)
BB6_8:
	bit	0, a
	ld	iy, (ix - 3)
	jr	nz, BB6_10
	ld	iy, 0
BB6_10:
	ld	bc, (ix - 6)
	add	iy, bc
	add	hl, de
	ld	(ix - 21), hl
	ld	hl, (ix - 9)
	dec	hl
	ld	de, 240
	lea	bc, iy
	ld	iy, (ix - 18)
	add	iy, de
	ld	(ix - 9), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 6), bc
	ld	de, (ix - 21)
	jp	nz, BB6_6
	jp	BB6_38
BB6_11:
	ld	iy, (-1900524)
	ld	l, (ix + 9)
	cp	a, l
	jp	nc, BB6_29
	ld	(ix - 12), iy
	ld	hl, (ix + 6)
	ld	de, (ix + 12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 15)
	ld	de, (ix - 6)
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	de, -8388608
	push	bc
	pop	hl
	add	hl, de
	or	a, a
	sbc	hl, de
	jr	nc, BB6_14
	scf
	sbc	hl, hl
	ld	(ix - 3), hl
BB6_14:
	push	bc
	pop	hl
	push	bc
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	push	hl
	pop	iy
	ld	c, 1
	add	hl, hl
	ld	(ix - 18), hl
	lea	hl, iy
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 21), hl
	ld	hl, (ix - 18)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, (ix - 6)
	ld	iy, (ix - 12)
	add	iy, de
	ld	de, (ix + 12)
	ex	de, hl
BB6_15:
	ld	a, (gfy_Color)
	ld	(ix - 15), hl
	push	bc
	pop	de
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	(ix - 12), iy
	lea	hl, iy
	add	hl, bc
	ld	(hl), a
	ld	(ix - 6), de
	ex	de, hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 21)
	jr	nz, BB6_17
	ld	hl, (ix - 18)
BB6_17:
	bit	0, a
	ld	iy, (ix - 3)
	jr	nz, BB6_19
	ld	iy, 0
BB6_19:
	ld	de, (ix - 15)
	add	iy, de
	ld	de, (ix - 6)
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 9)
	dec	hl
	ld	bc, (ix - 12)
	inc	bc
	ld	(ix - 9), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	lea	hl, iy
	push	bc
	pop	iy
	push	de
	pop	bc
	jp	nz, BB6_15
	jp	BB6_38
BB6_20:
	ld	de, -8388608
	ld	hl, (ix - 9)
	add	hl, de
	or	a, a
	sbc	hl, de
	jr	nc, BB6_22
	scf
	sbc	hl, hl
	ld	(ix - 3), hl
BB6_22:
	ld	c, 1
	ld	de, (ix - 12)
	push	de
	pop	hl
	call	__ishl
	ld	(ix - 9), hl
	ex	de, hl
	ld	de, (ix - 21)
	or	a, a
	sbc	hl, de
	call	__ishl
	ld	(ix - 12), hl
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 6)
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	iy, (ix - 18)
	jp	nc, BB6_38
	ld	hl, (ix - 9)
	or	a, a
	sbc	hl, de
	ld	(ix - 6), hl
	ld	hl, (ix + 6)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	ld	bc, (ix - 6)
BB6_24:
	ld	(ix - 21), de
	ld	a, (gfy_Color)
	ld	(ix - 18), iy
	ld	de, (ix - 15)
	add	iy, de
	ld	(iy), a
	ld	(ix - 6), bc
	push	bc
	pop	hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 12)
	jr	nz, BB6_26
	ld	hl, (ix - 9)
BB6_26:
	bit	0, a
	ld	iy, (ix - 3)
	jr	nz, BB6_28
	ld	iy, 0
BB6_28:
	add	iy, de
	ld	(ix - 15), iy
	ld	de, (ix - 6)
	add	hl, de
	ld	de, (ix - 21)
	dec	de
	ld	bc, 240
	ld	iy, (ix - 18)
	add	iy, bc
	push	hl
	pop	bc
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	nz, BB6_24
	jp	BB6_38
BB6_29:
	ld	bc, -8388608
	ld	hl, (ix - 21)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nc, BB6_31
	scf
	sbc	hl, hl
	ld	(ix - 3), hl
BB6_31:
	ld	a, 1
	push	de
	pop	hl
	ld	c, a
	call	__ishl
	ld	(ix - 6), hl
	ex	de, hl
	ld	bc, (ix - 9)
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	ld	c, a
	call	__ishl
	ld	(ix - 18), hl
	ld	a, (ix + 9)
	ld	l, (ix + 15)
	cp	a, l
	jp	nc, BB6_38
	ld	hl, (ix - 6)
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, (ix - 15)
	add	iy, de
	ld	de, (ix + 6)
	ex	de, hl
	ld	de, (ix - 9)
BB6_33:
	ld	(ix - 9), de
	ld	a, (gfy_Color)
	ld	(ix - 21), hl
	push	bc
	pop	de
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	(ix - 12), iy
	add	iy, bc
	ld	(iy), a
	ld	(ix - 15), de
	ex	de, hl
	ld	bc, -8388608
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	ccf
	sbc	a, a
	bit	0, a
	ld	hl, (ix - 18)
	jr	nz, BB6_35
	ld	hl, (ix - 6)
BB6_35:
	bit	0, a
	ld	iy, (ix - 3)
	jr	nz, BB6_37
	ld	iy, 0
BB6_37:
	ld	de, (ix - 21)
	add	iy, de
	ld	de, (ix - 15)
	add	hl, de
	ld	(ix - 15), hl
	ld	de, (ix - 9)
	dec	de
	ld	bc, (ix - 12)
	inc	bc
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	lea	hl, iy
	push	bc
	pop	iy
	ld	bc, (ix - 15)
	jp	nz, BB6_33
BB6_38:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_FillCircle_NoClip
gfy_FillCircle_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	de, (ix + 12)
	ld	iy, 0
	ld	bc, -2
	lea	hl, iy
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix + 12)
	call	__imulu
	ld	bc, 2
	add	hl, bc
	ld	(ix - 6), hl
	ld	(ix - 3), iy
	push	de
	pop	bc
BB7_1:
	ld	hl, (ix + 6)
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	a, c
	add	a, (ix + 9)
	ld	l, a
	ld	(ix - 12), hl
	ld	(ix - 9), bc
	push	bc
	pop	hl
	call	__set_bc_and_mul_hl_by_minus2
	inc	hl
	ld	(ix - 15), hl
	push	hl
	ld	hl, (ix - 12)
	push	hl
	push	de
	call	gfy_VertLine_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 3)
	ld	de, (ix + 6)
	add	hl, de
	ld	de, (ix - 15)
	push	de
	ld	de, (ix - 12)
	push	de
	push	hl
	call	gfy_VertLine_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	iy, (ix - 6)
	ld	de, -8388608
	add	iy, de
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	add	hl, de
	ld	(ix - 12), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	sbc	a, a
	push	bc
	pop	iy
	inc	iy
	lea	hl, iy
	ld	c, 1
	add	hl, hl
	bit	0, a
	jr	nz, BB7_3
	ld	(ix - 3), iy
BB7_3:
	bit	0, a
	ld	iy, 0
	jr	nz, BB7_5
	inc	hl
	push	hl
	pop	iy
BB7_5:
	ld	de, (ix - 6)
	add	iy, de
	ld	(ix - 6), iy
	ld	hl, (ix - 9)
	ld	bc, -8388608
	add	hl, bc
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	sbc	a, a
	ld	e, a
	add	iy, bc
	ld	hl, (ix - 3)
	add	hl, bc
	lea	bc, iy
	ld	iy, (ix - 9)
	or	a, a
	sbc	hl, bc
	sbc	a, a
	ld	l, a
	ld	a, e
	or	a, l
	lea	de, iy
	inc	de
	push	de
	pop	hl
	ld	c, 1
	add	hl, hl
	bit	0, a
	jr	nz, BB7_7
	lea	de, iy
BB7_7:
	bit	0, a
	jr	nz, BB7_9
	or	a, a
	sbc	hl, hl
	jr	BB7_10
BB7_9:
	inc	hl
BB7_10:
	ld	bc, -8388608
	push	bc
	pop	iy
	ld	bc, (ix - 6)
	add	hl, bc
	ld	(ix - 6), hl
	push	de
	pop	hl
	lea	bc, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	de
	pop	bc
	jp	c, BB7_1
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftDown
gfy_ShiftDown:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	l, (ix + 6)
	ld	a, l
	or	a, a
	jp	z, BB8_5
	ld	de, 0
	ld	e, l
	ld	(ix - 3), de
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 6), hl
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	lea	de, iy
	ld	e, a
	ld	a, (gfy_ClipYMax)
	ld	iyl, a
	push	de
	pop	hl
	ld	bc, (ix - 3)
	add	hl, bc
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ld	bc, -8388608
	ld	(ix - 9), hl
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	jr	c, BB8_5
	ld	hl, (gfy_ClipXMin)
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 15), iy
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 12), hl
	add	hl, bc
	lea	bc, iy
	ld	iy, (ix - 6)
	or	a, a
	sbc	hl, bc
	jr	nc, BB8_5
	ld	bc, 240
	add	iy, de
	ld	de, (ix - 12)
	push	de
	pop	hl
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix - 15)
	or	a, a
	sbc	hl, de
BB8_4:
	ld	(ix - 12), hl
	ld	(ix - 6), iy
	lea	hl, iy
	ld	de, (ix - 3)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	iy
	push	hl
	call	_memmove
	ld	iy, (ix - 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	add	iy, de
	ld	hl, (ix - 12)
	dec	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB8_4
BB8_5:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftUp
gfy_ShiftUp:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	l, (ix + 6)
	ld	de, 0
	ld	a, l
	or	a, a
	jp	z, BB9_5
	ld	e, l
	ld	(ix - 3), de
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 6), hl
	ld	a, (gfy_ClipYMin)
	ld	de, 0
	ld	e, a
	ld	a, (gfy_ClipYMax)
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	de
	pop	iy
	ld	bc, (ix - 3)
	add	iy, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	bc, -8388608
	ld	(ix - 9), hl
	add	hl, bc
	inc	bc
	or	a, a
	sbc	hl, bc
	jp	c, BB9_5
	ld	hl, (gfy_ClipXMin)
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 15), iy
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 12), hl
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB9_5
	ld	bc, 240
	ld	iy, (ix - 6)
	add	iy, de
	ld	hl, (ix - 12)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	lea	de, iy
	ld	hl, (ix - 15)
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	or	a, a
	sbc	hl, hl
	ld	bc, (ix - 3)
	sbc	hl, bc
	ld	(ix - 12), hl
BB9_4:
	ld	(ix - 3), iy
	push	de
	pop	bc
	ld	(ix - 6), bc
	push	bc
	pop	hl
	ld	de, (ix - 12)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	bc
	push	hl
	call	_memmove
	ld	iy, (ix - 3)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	hl, (ix - 6)
	add	hl, de
	ex	de, hl
	dec	iy
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB9_4
BB9_5:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftLeft
gfy_ShiftLeft:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB10_4
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	a, (gfy_ClipYMin)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, (gfy_ClipXMin)
	ld	a, (gfy_ClipYMax)
	ld	l, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	(ix - 15), bc
	push	bc
	pop	hl
	ld	bc, (ix + 6)
	add	hl, bc
	ld	iy, (gfy_ClipXMax)
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 6), hl
	add	hl, bc
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB10_4
	ld	bc, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 15)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix + 6)
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 15), de
	add	iy, de
BB10_3:
	ld	(ix - 3), iy
	lea	hl, iy
	ld	de, (ix - 15)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	hl
	push	iy
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	c, BB10_3
BB10_4:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ShiftRight
gfy_ShiftRight:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 15
	ld	sp, hl
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jp	z, BB11_4
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	a, (gfy_ClipYMin)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, (gfy_ClipXMin)
	ld	a, (gfy_ClipYMax)
	ld	l, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	(ix - 15), bc
	push	bc
	pop	hl
	ld	bc, (ix + 6)
	add	hl, bc
	ld	iy, (gfy_ClipXMax)
	ld	bc, -8388608
	add	iy, bc
	ld	(ix - 6), hl
	add	hl, bc
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB11_4
	ld	bc, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 15)
	ld	de, (ix + 6)
	or	a, a
	sbc	hl, de
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix + 6)
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 15), de
	add	iy, de
BB11_3:
	ld	(ix - 3), iy
	lea	hl, iy
	ld	de, (ix - 15)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	hl
	push	iy
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	iy, (ix - 3)
	add	iy, de
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	c, BB11_3
BB11_4:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Tilemap
gfy_Tilemap:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 36
	ld	sp, hl
	ld	hl, (ix + 9)
	xor	a, a
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	c, (iy + 7)
	ld	(ix - 3), bc
	call	__idivu
	ld	(ix - 9), hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 6)
	ld	hl, (ix + 12)
	push	de
	pop	bc
	call	__idivu
	ld	(ix - 12), hl
	ld	hl, (ix - 9)
	ld	bc, (ix - 3)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	hl, (ix - 12)
	ld	(ix - 15), de
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, de
	ld	(ix - 6), hl
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 22), a
	ld	(ix - 18), iy
	jr	z, BB12_2
	ld	a, 0
	jr	BB12_3
BB12_2:
	ld	a, -1
BB12_3:
	ld	de, 0
	push	de
	pop	bc
	ld	de, (ix - 3)
	ld	iy, (ix + 6)
	ld	hl, (iy + 15)
	ld	iy, (ix - 18)
	add	iy, de
	bit	0, a
	jr	nz, BB12_5
	lea	bc, iy
BB12_5:
	or	a, a
	sbc	hl, bc
	ld	(ix - 21), hl
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	c, (iy + 14)
	ld	hl, (ix - 6)
	push	hl
	pop	iy
	ld	de, (ix - 15)
	add	iy, de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, 0
	jr	z, BB12_7
	lea	de, iy
BB12_7:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	(ix - 18), hl
	ld	iy, (ix + 6)
	ld	e, (iy + 9)
	bit	0, a
	jr	nz, BB12_12
	ld	hl, (ix + 9)
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	nc, BB12_10
	ld	hl, (ix - 21)
	add	hl, bc
	ld	(ix - 21), hl
	or	a, a
	sbc	hl, hl
	jr	BB12_11
BB12_10:
	inc	e
	ld	hl, (ix - 9)
	dec	hl
BB12_11:
	ld	(ix - 9), hl
BB12_12:
	ld	d, (iy + 8)
	ld	hl, (ix - 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB12_17
	ld	hl, (ix + 12)
	ld	bc, (ix - 15)
	or	a, a
	sbc	hl, bc
	jr	nc, BB12_15
	ld	hl, (ix - 18)
	add	hl, bc
	ld	(ix - 18), hl
	or	a, a
	sbc	hl, hl
	jr	BB12_16
BB12_15:
	inc	d
	ld	hl, (ix - 12)
	dec	hl
BB12_16:
	ld	(ix - 12), hl
BB12_17:
	ld	a, e
	or	a, a
	jr	z, BB12_19
	ld	a, d
	or	a, a
	jr	nz, BB12_20
BB12_19:
	ld	sp, ix
	pop	ix
	ret
BB12_20:
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	(ix - 15), hl
	ld	(ix - 6), e
	ld	(ix - 23), d
	call	gfy_Wait
	ld	iy, (ix + 6)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, (iy + 13)
	ld	l, (iy + 12)
	call	__imulu
	ld	(ix - 3), hl
	push	bc
	pop	hl
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	ld	(ix - 29), hl
	ld	hl, (gfy_ClipXMax)
	ld	de, 0
	ld	e, (iy + 7)
	or	a, a
	sbc	hl, de
	ld	(ix - 32), hl
	ld	a, (gfy_ClipYMax)
	ld	de, 0
	push	de
	pop	hl
	ld	l, a
	ld	e, (iy + 6)
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	hl, (ix - 12)
	call	__imulu
	ld	a, (ix - 6)
	ld	de, (ix - 9)
	add	hl, de
	push	hl
	pop	bc
BB12_21:
	ld	hl, (ix - 18)
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	jp	nc, BB12_30
	ld	hl, (ix - 3)
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	push	de
	pop	hl
	jr	c, BB12_24
	ld	hl, (ix - 3)
BB12_24:
	ld	c, a
	ld	iy, (ix - 21)
	ld	(ix - 9), iy
	ld	iy, (ix + 6)
	ld	(ix - 12), hl
BB12_25:
	or	a, a
	sbc	hl, de
	jp	z, BB12_19
	ld	(ix - 33), c
	ld	hl, (iy + 3)
	ld	(ix - 36), hl
	ld	iy, (iy)
	ld	(ix - 26), de
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 36)
	add	hl, de
	ld	iy, (hl)
	ld	de, (ix - 9)
	push	de
	pop	hl
	ld	bc, (ix - 32)
	or	a, a
	sbc	hl, bc
	ld	(ix - 9), de
	jr	nc, BB12_28
	ld	hl, (ix - 18)
	push	hl
	push	de
	push	iy
	call	gfy_Sprite_NoClip
	jr	BB12_29
BB12_28:
	ld	hl, (ix - 18)
	push	hl
	push	de
	push	iy
	call	gfy_Sprite
BB12_29:
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, (ix - 26)
	inc	de
	ld	c, (ix - 33)
	dec	c
	ld	a, c
	or	a, a
	ld	b, (ix - 23)
	ld	hl, (ix - 12)
	jr	nz, BB12_25
	jp	BB12_35
BB12_30:
	ld	hl, (ix - 3)
	push	bc
	pop	de
	or	a, a
	sbc	hl, de
	ld	(ix - 12), de
	jr	c, BB12_32
	ld	hl, (ix - 3)
	ld	(ix - 12), hl
BB12_32:
	ld	c, a
	ld	hl, (ix - 21)
	ld	(ix - 9), hl
BB12_33:
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, de
	jp	z, BB12_19
	ld	hl, (iy + 3)
	ld	(ix - 36), hl
	ld	hl, (ix + 6)
	ld	iy, (hl)
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	ld	(ix - 33), c
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	ld	(ix - 26), de
	push	hl
	pop	de
	ld	hl, (ix - 36)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 18)
	push	de
	ld	de, (ix - 9)
	push	de
	push	hl
	call	gfy_Sprite
	ld	c, (ix - 33)
	ld	b, (ix - 23)
	ld	iy, (ix + 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	e, (iy + 7)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, (ix - 26)
	inc	de
	dec	c
	ld	a, c
	or	a, a
	jr	nz, BB12_33
BB12_35:
	ld	hl, (ix - 29)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, 0
	ld	e, (iy + 6)
	ld	hl, (ix - 18)
	add	hl, de
	ld	(ix - 18), hl
	ld	a, (ix - 22)
	inc	a
	ld	(ix - 22), a
	cp	a, b
	ld	bc, (ix - 9)
	ld	a, (ix - 6)
	jp	nz, BB12_21
	jp	BB12_19
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Sprite
gfy_Sprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 31
	ld	sp, hl
	ld	hl, (ix + 9)
	ld	iy, (gfy_ClipXMax)
	ld	de, -8388608
	add	iy, de
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB13_21
	ld	hl, (ix + 12)
	ld	a, (gfy_ClipYMax)
	ld	de, 0
	lea	bc, iy
	push	de
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	add	hl, de
	ld	(ix - 3), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB13_21
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	a, l
	or	a, a
	jp	z, BB13_21
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	(ix - 6), a
	or	a, a
	jp	z, BB13_21
	ld	de, 0
	ld	a, l
	ex	de, hl
	ld	l, a
	ld	de, (ix + 9)
	add	hl, de
	ld	(ix - 9), bc
	ld	iy, (gfy_ClipXMin)
	ld	de, -8388608
	add	iy, de
	ld	(ix - 19), hl
	add	hl, de
	ld	(ix - 16), a
	ld	(ix - 12), hl
	ld	(ix - 15), iy
	lea	de, iy
	ld	bc, (ix - 9)
	or	a, a
	sbc	hl, de
	jp	c, BB13_21
	ld	iy, 0
	lea	hl, iy
	ld	l, (ix - 6)
	ld	(ix - 31), hl
	ld	de, (ix + 12)
	add	hl, de
	ld	(ix - 22), hl
	ld	a, (gfy_ClipYMin)
	ld	iyl, a
	ld	hl, -8388608
	push	hl
	pop	de
	add	iy, de
	ld	hl, (ix - 22)
	add	hl, de
	ld	(ix - 25), hl
	ld	(ix - 28), iy
	lea	de, iy
	push	bc
	pop	iy
	or	a, a
	sbc	hl, de
	jp	c, BB13_21
	ld	hl, (ix + 9)
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 15)
	or	a, a
	sbc	hl, de
	jr	c, BB13_10
	ld	hl, (ix + 12)
	ld	de, -8388608
	add	hl, de
	ld	de, (ix - 28)
	or	a, a
	sbc	hl, de
	jr	c, BB13_10
	lea	hl, iy
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	c, BB13_10
	ld	hl, (ix - 3)
	ld	de, (ix - 25)
	or	a, a
	sbc	hl, de
	jp	nc, BB13_22
BB13_10:
	call	gfy_Wait
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 15), hl
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, de
	ld	(ix - 28), hl
	ld	a, (gfy_ClipYMin)
	ld	iy, 0
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix + 12)
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	ld	(ix - 3), hl
	jr	nc, BB13_12
	ld	hl, (ix + 12)
	sub	a, l
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix - 3), hl
BB13_12:
	ld	iy, (gfy_ClipXMax)
	ld	hl, (ix - 19)
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	ld	(ix - 9), hl
	add	iy, de
	lea	hl, iy
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	jr	c, BB13_14
	or	a, a
	sbc	hl, hl
	ld	(ix - 9), hl
BB13_14:
	ld	bc, 255
	ld	a, (gfy_ClipYMax)
	ld	iy, 0
	ld	iyl, a
	lea	hl, iy
	add	hl, de
	ld	de, (ix - 25)
	or	a, a
	sbc	hl, de
	ld	hl, 0
	jr	nc, BB13_16
	ld	hl, (ix - 22)
	ld	a, l
	sub	a, iyl
	or	a, a
	sbc	hl, hl
	ld	l, a
BB13_16:
	ld	(ix - 19), hl
	ld	hl, (ix - 28)
	call	__iand
	push	hl
	pop	de
	ld	bc, -8388608
	ld	iy, (ix - 15)
	add	iy, bc
	ld	hl, (ix + 9)
	add	hl, bc
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB13_18
	ld	de, 0
BB13_18:
	ld	hl, (ix - 9)
	ld	a, l
	ld	(ix - 12), de
	add	a, e
	ld	l, a
	ld	c, (ix - 16)
	ld	a, c
	sub	a, l
	ld	(ix - 9), a
	ld	de, (-1900524)
	ld	a, c
	cp	a, l
	jp	z, BB13_21
	ld	hl, (ix - 3)
	ld	bc, (ix + 12)
	add	hl, bc
	push	hl
	pop	bc
	push	de
	pop	iy
	add	iy, bc
	ld	hl, (ix - 12)
	ld	de, (ix + 9)
	add	hl, de
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	lea	de, iy
	ld	iy, (ix + 6)
	ld	bc, (ix - 3)
	add	iy, bc
	ld	hl, (ix - 12)
	ld	bc, (ix - 31)
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	lea	iy, iy + 2
	ld	hl, (ix - 19)
	ld	a, l
	ld	hl, (ix - 3)
	add	a, l
	ld	l, a
	ld	a, (ix - 6)
	sub	a, l
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix - 12), hl
BB13_20:
	ld	(ix - 3), iy
	ld	hl, (ix - 12)
	push	hl
	push	iy
	ld	(ix - 6), de
	push	de
	call	_memcpy
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 1)
	ld	iy, (ix - 3)
	add	iy, de
	ld	de, 240
	ld	hl, (ix - 6)
	add	hl, de
	ex	de, hl
	ld	a, (ix - 9)
	dec	a
	ld	(ix - 9), a
	or	a, a
	jr	nz, BB13_20
BB13_21:
	ld	sp, ix
	pop	ix
	ret
BB13_22:
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	gfy_Sprite_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	jr	BB13_21
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_Tilemap_NoClip
gfy_Tilemap_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 23
	ld	sp, hl
	call	gfy_Wait
	ld	de, 0
	push	de
	pop	bc
	ld	iy, (ix + 6)
	ld	c, (iy + 7)
	push	de
	pop	hl
	ld	l, (iy + 13)
	ld	a, (iy + 9)
	ld	(ix - 9), a
	ld	e, a
	ld	(ix - 22), hl
	or	a, a
	sbc	hl, de
	ld	(ix - 12), hl
	ld	hl, (iy + 15)
	ld	(ix - 3), hl
	ld	hl, (ix + 9)
	call	__idivu
	ld	(ix - 18), hl
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	e, (iy + 8)
	ld	a, e
	or	a, a
	jp	z, BB14_6
	ld	iy, (ix + 6)
	ld	a, (iy + 14)
	ld	(ix - 3), a
	ld	a, (iy + 6)
	ld	(ix - 23), e
	ld	bc, 0
	ld	(ix - 19), a
	ld	c, a
	ld	hl, (ix + 12)
	call	__idivu
	ld	d, l
	ld	e, c
	mlt	de
	ld	bc, (ix + 12)
	ld	a, c
	sub	a, e
	ld	c, a
	ld	a, (ix - 3)
	sub	a, c
	ld	e, a
	ld	(ix - 6), de
	ld	bc, (ix - 22)
	call	__imulu
	ld	b, (ix - 23)
	ld	c, 0
	ld	de, (ix - 18)
	add	hl, de
	ld	e, c
	ld	(ix - 3), hl
BB14_2:
	ld	(ix - 18), e
	ld	a, (ix - 9)
	or	a, a
	ld	e, c
	ld	a, c
	ld	hl, (ix - 15)
	jr	z, BB14_5
BB14_3:
	ld	(ix - 9), hl
	ld	(ix - 19), a
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix - 22), hl
	ld	hl, (ix + 6)
	ld	iy, (hl)
	ld	de, (ix - 3)
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 22)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 6)
	push	de
	ld	de, (ix - 9)
	push	de
	push	hl
	call	gfy_Sprite_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 9)
	ld	a, (ix - 19)
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	add	hl, de
	ld	de, (ix - 3)
	inc	de
	ld	(ix - 3), de
	inc	a
	ld	iy, (ix + 6)
	ld	e, (iy + 9)
	cp	a, e
	jr	c, BB14_3
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	a, (iy + 6)
	ld	(ix - 19), a
	ld	b, (iy + 8)
BB14_5:
	ld	(ix - 9), e
	ld	hl, (ix - 12)
	ld	de, (ix - 3)
	add	hl, de
	ld	a, (ix - 19)
	ld	de, (ix - 6)
	add	a, e
	ld	e, a
	ld	(ix - 6), de
	ld	e, (ix - 18)
	inc	e
	ld	a, e
	cp	a, b
	ld	(ix - 3), hl
	ld	a, 0
	ld	c, a
	jp	c, BB14_2
BB14_6:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_TransparentTilemap
gfy_TransparentTilemap:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 36
	ld	sp, hl
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	xor	a, a
	ld	(ix - 20), a
	ld	de, 0
	ld	e, (iy + 7)
	push	de
	pop	bc
	call	__idivu
	ld	(ix - 12), hl
	or	a, a
	sbc	hl, hl
	ld	iy, (ix + 6)
	ld	l, (iy + 6)
	push	hl
	pop	iy
	ld	hl, (ix + 12)
	lea	bc, iy
	call	__idivu
	ld	(ix - 15), hl
	ld	hl, (ix - 12)
	ld	(ix - 9), de
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix - 15)
	ld	(ix - 3), iy
	lea	bc, iy
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, bc
	ld	(ix - 18), hl
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 6), de
	jr	z, BB15_2
	ld	a, 0
	jr	BB15_3
BB15_2:
	ld	a, -1
BB15_3:
	ld	de, (ix - 9)
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	hl, (iy + 15)
	ld	iy, (ix - 6)
	add	iy, de
	bit	0, a
	push	bc
	pop	de
	jr	nz, BB15_5
	lea	de, iy
BB15_5:
	or	a, a
	sbc	hl, de
	ld	(ix - 23), hl
	ld	bc, 0
	ld	iy, (ix + 6)
	ld	c, (iy + 14)
	ld	hl, (ix - 18)
	push	hl
	pop	iy
	ld	de, (ix - 3)
	add	iy, de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, 0
	jr	z, BB15_7
	lea	de, iy
BB15_7:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	iy, (ix + 6)
	ld	l, (iy + 9)
	ld	(ix - 6), l
	bit	0, a
	jr	nz, BB15_12
	ld	hl, (ix + 9)
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	jr	nc, BB15_10
	ld	hl, (ix - 23)
	add	hl, de
	ld	(ix - 23), hl
	or	a, a
	sbc	hl, hl
	jr	BB15_11
BB15_10:
	ld	a, (ix - 6)
	inc	a
	ld	(ix - 6), a
	ld	hl, (ix - 12)
	dec	hl
BB15_11:
	ld	(ix - 12), hl
BB15_12:
	ld	de, (ix - 3)
	ld	iy, (ix + 6)
	ld	a, (iy + 8)
	ld	(ix - 19), a
	ld	hl, (ix - 18)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB15_14
	ld	(ix - 18), bc
	jr	BB15_18
BB15_14:
	ld	hl, (ix + 12)
	or	a, a
	sbc	hl, de
	jr	nc, BB15_16
	push	bc
	pop	hl
	add	hl, de
	ld	(ix - 18), hl
	or	a, a
	sbc	hl, hl
	jr	BB15_17
BB15_16:
	ld	(ix - 18), bc
	ld	a, (ix - 19)
	inc	a
	ld	(ix - 19), a
	ld	hl, (ix - 15)
	dec	hl
BB15_17:
	ld	(ix - 15), hl
BB15_18:
	ld	iy, 0
	lea	de, iy
	push	de
	pop	bc
	ld	iy, (ix + 6)
	ld	c, (iy + 13)
	ex	de, hl
	ld	l, (iy + 12)
	call	__imulu
	ld	(ix - 26), hl
	ld	de, 0
	ld	e, (ix - 6)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	(ix - 29), hl
	ld	hl, (gfy_ClipXMax)
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	a, (gfy_ClipYMax)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, (ix - 3)
	sbc	hl, de
	push	hl
	pop	de
	ld	a, (ix - 19)
	or	a, a
	jp	z, BB15_37
	ld	hl, (ix - 15)
	call	__imulu
	ld	bc, (ix - 12)
	add	hl, bc
	push	hl
	pop	bc
	ld	(ix - 3), de
BB15_20:
	ld	hl, (ix - 18)
	or	a, a
	sbc	hl, de
	jp	nc, BB15_30
	ld	a, (ix - 6)
	or	a, a
	jp	z, BB15_36
	ld	hl, (ix - 26)
	or	a, a
	sbc	hl, bc
	push	bc
	pop	hl
	jr	c, BB15_24
	ld	hl, (ix - 26)
BB15_24:
	ld	(ix - 15), hl
	ld	l, (ix - 6)
	ld	de, (ix - 23)
	ld	(ix - 12), de
	ld	de, (ix - 15)
BB15_25:
	ld	(ix - 33), l
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jp	z, BB15_37
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix - 36), hl
	ld	iy, (iy)
	ld	(ix - 32), bc
	add	iy, bc
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 36)
	add	hl, de
	ld	iy, (hl)
	ld	de, (ix - 12)
	push	de
	pop	hl
	ld	bc, (ix - 9)
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), de
	jr	nc, BB15_28
	ld	hl, (ix - 18)
	push	hl
	push	de
	push	iy
	call	gfy_TransparentSprite_NoClip
	jr	BB15_29
BB15_28:
	ld	hl, (ix - 18)
	push	hl
	push	de
	push	iy
	call	gfy_TransparentSprite
BB15_29:
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	ld	hl, (ix - 12)
	add	hl, de
	ld	(ix - 12), hl
	ld	bc, (ix - 32)
	inc	bc
	ld	l, (ix - 33)
	dec	l
	ld	a, l
	or	a, a
	ld	de, (ix - 15)
	jr	nz, BB15_25
	jp	BB15_36
BB15_30:
	ld	a, (ix - 6)
	or	a, a
	jp	z, BB15_36
	ld	hl, (ix - 26)
	or	a, a
	sbc	hl, bc
	ld	(ix - 15), bc
	jr	c, BB15_33
	ld	hl, (ix - 26)
	ld	(ix - 15), hl
BB15_33:
	ld	l, (ix - 6)
	ld	de, (ix - 23)
	ld	(ix - 12), de
BB15_34:
	ld	(ix - 33), l
	ld	hl, (ix - 15)
	or	a, a
	sbc	hl, bc
	jp	z, BB15_37
	ld	iy, (ix + 6)
	ld	hl, (iy + 3)
	ld	(ix - 36), hl
	ld	hl, (ix + 6)
	ld	iy, (hl)
	add	iy, bc
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	ld	(ix - 32), bc
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 36)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 18)
	push	de
	ld	de, (ix - 12)
	push	de
	push	hl
	call	gfy_TransparentSprite
	ld	bc, (ix - 32)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	ld	hl, (ix - 12)
	add	hl, de
	ld	(ix - 12), hl
	inc	bc
	ld	l, (ix - 33)
	dec	l
	ld	a, l
	or	a, a
	jr	nz, BB15_34
BB15_36:
	ld	iy, (ix - 29)
	lea	hl, iy
	add	hl, bc
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 6)
	ld	iy, (ix - 18)
	add	iy, de
	ld	(ix - 18), iy
	ld	a, (ix - 20)
	inc	a
	ld	(ix - 20), a
	ld	e, (ix - 19)
	cp	a, e
	ld	de, (ix - 3)
	push	hl
	pop	bc
	jp	nz, BB15_20
BB15_37:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_TransparentSprite
gfy_TransparentSprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 34
	ld	sp, hl
	ld	hl, (ix + 9)
	ld	iy, (gfy_ClipXMax)
	ld	de, -8388608
	add	iy, de
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB16_25
	ld	hl, (ix + 12)
	ld	a, (gfy_ClipYMax)
	ld	de, 0
	lea	bc, iy
	push	de
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	add	hl, de
	ld	(ix - 3), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB16_25
	ld	hl, (ix + 6)
	ld	e, (hl)
	ld	a, e
	or	a, a
	jp	z, BB16_25
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	(ix - 4), a
	or	a, a
	jp	z, BB16_25
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	a, e
	ld	de, (ix + 9)
	add	hl, de
	ld	(ix - 7), bc
	ld	iy, (gfy_ClipXMin)
	ld	de, -8388608
	add	iy, de
	ld	(ix - 19), hl
	add	hl, de
	ld	(ix - 16), a
	ld	(ix - 10), hl
	ld	(ix - 13), iy
	lea	de, iy
	ld	iy, (ix - 7)
	or	a, a
	sbc	hl, de
	jp	c, BB16_25
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	l, (ix - 4)
	ld	(ix - 28), hl
	ld	de, (ix + 12)
	add	hl, de
	ld	a, (gfy_ClipYMin)
	push	bc
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	ld	(ix - 31), hl
	add	hl, de
	ld	(ix - 22), hl
	ld	(ix - 25), iy
	lea	de, iy
	ld	iy, (ix - 7)
	or	a, a
	sbc	hl, de
	jp	c, BB16_25
	ld	hl, (ix + 9)
	ld	bc, -8388608
	add	hl, bc
	ld	de, (ix - 13)
	or	a, a
	sbc	hl, de
	push	bc
	pop	de
	jr	c, BB16_10
	ld	hl, (ix + 12)
	add	hl, de
	ld	de, (ix - 25)
	or	a, a
	sbc	hl, de
	jr	c, BB16_10
	lea	hl, iy
	ld	de, (ix - 10)
	or	a, a
	sbc	hl, de
	jr	c, BB16_10
	ld	hl, (ix - 3)
	ld	de, (ix - 22)
	or	a, a
	sbc	hl, de
	jp	nc, BB16_26
BB16_10:
	call	gfy_Wait
	ld	bc, 0
	ld	hl, (gfy_ClipXMin)
	ld	(ix - 25), hl
	ld	de, (ix + 9)
	or	a, a
	sbc	hl, de
	ld	(ix - 34), hl
	ld	a, (gfy_ClipYMin)
	push	bc
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix + 12)
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	hl, 0
	jr	nc, BB16_12
	ld	hl, (ix + 12)
	sub	a, l
	or	a, a
	sbc	hl, hl
	ld	l, a
BB16_12:
	ld	(ix - 13), hl
	ld	iy, (gfy_ClipXMax)
	ld	hl, (ix - 19)
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 7), hl
	ld	de, -8388608
	add	iy, de
	lea	hl, iy
	ld	de, (ix - 10)
	or	a, a
	sbc	hl, de
	jr	c, BB16_14
	or	a, a
	sbc	hl, hl
	ld	(ix - 7), hl
BB16_14:
	ld	a, (gfy_ClipYMax)
	ld	e, a
	push	bc
	pop	hl
	ld	l, e
	ld	bc, -8388608
	add	hl, bc
	ld	bc, (ix - 22)
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	jr	nc, BB16_16
	ld	hl, (ix - 31)
	ld	a, l
	sub	a, e
	or	a, a
	sbc	hl, hl
	ld	l, a
BB16_16:
	ld	(ix - 3), hl
	ld	hl, (ix - 34)
	ld	bc, 255
	inc.s	hl
	dec	hl
	ld	h, b
	ld	(ix - 10), hl
	ld	hl, -8388608
	ex	de, hl
	ld	iy, (ix - 25)
	add	iy, de
	ld	hl, (ix + 9)
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB16_18
	or	a, a
	sbc	hl, hl
	ld	(ix - 10), hl
BB16_18:
	ld	hl, (ix - 7)
	ld	a, l
	ld	hl, (ix - 10)
	add	a, l
	ld	c, a
	ld	b, (ix - 16)
	ld	a, b
	sub	a, c
	ld	(ix - 19), a
	ld	iy, (ix - 3)
	ld	de, (ix - 13)
	add	iy, de
	ld	a, (ix - 4)
	sub	a, iyl
	ld	de, 0
	ld	e, a
	ld	hl, (-1900524)
	ld	(ix - 7), hl
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 22), hl
	ld	a, b
	cp	a, c
	lea	hl, iy
	jp	z, BB16_25
	ld	(ix - 3), hl
	ld	hl, (ix - 13)
	ld	bc, (ix + 12)
	add	hl, bc
	ld	(ix - 16), de
	push	hl
	pop	bc
	ld	iy, (ix - 7)
	add	iy, bc
	ld	hl, (ix - 10)
	ld	de, (ix + 9)
	add	hl, de
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 7), iy
	ld	iy, (ix + 6)
	ld	de, (ix - 13)
	add	iy, de
	ld	hl, (ix - 10)
	ld	bc, (ix - 28)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	lea	iy, iy + 2
	ld	hl, (ix - 3)
	ld	bc, 255
	inc.s	hl
	dec	hl
	ld	h, b
	ld	d, b
	ld	a, d
	ld	(ix - 13), hl
	ld	hl, (ix - 3)
BB16_20:
	ld	(ix - 10), a
	ld	bc, (ix - 7)
	ld	a, (ix - 4)
	cp	a, l
	ld	hl, (ix - 16)
	ld	e, l
	jr	z, BB16_24
BB16_21:
	ld	d, (iy)
	ld	a, (gfy_Transparent_Color)
	ld	h, a
	ld	a, d
	cp	a, h
	jr	nz, BB16_23
	push	bc
	pop	hl
	ld	d, (hl)
BB16_23:
	push	bc
	pop	hl
	ld	(hl), d
	inc	iy
	inc	hl
	push	hl
	pop	bc
	dec	e
	ld	a, e
	or	a, a
	jr	nz, BB16_21
BB16_24:
	ld	de, (ix - 13)
	add	iy, de
	push	bc
	pop	hl
	ld	bc, (ix - 22)
	add	hl, bc
	ld	(ix - 7), hl
	ld	a, (ix - 10)
	inc	a
	ld	l, (ix - 19)
	cp	a, l
	ld	hl, (ix - 3)
	jr	nz, BB16_20
BB16_25:
	ld	sp, ix
	pop	ix
	ret
BB16_26:
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	gfy_TransparentSprite_NoClip
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	jr	BB16_25
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_TransparentTilemap_NoClip
gfy_TransparentTilemap_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 22
	ld	sp, hl
	ld	iy, (ix + 6)
	ld	de, 0
	push	de
	pop	bc
	ld	c, (iy + 7)
	push	de
	pop	hl
	ld	l, (iy + 13)
	ld	a, (iy + 9)
	ld	(ix - 6), a
	ld	e, a
	ld	(ix - 16), hl
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	iy, (iy + 15)
	ld	hl, (ix + 9)
	call	__idivu
	ld	(ix - 19), hl
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	lea	hl, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 12), hl
	ld	iy, (ix + 6)
	ld	e, (iy + 8)
	ld	a, e
	or	a, a
	jp	z, BB17_6
	ld	iy, (ix + 6)
	ld	a, (iy + 14)
	ld	(ix - 3), a
	ld	a, (iy + 6)
	ld	(ix - 22), e
	ld	bc, 0
	ld	(ix - 13), a
	ld	c, a
	ld	hl, (ix + 12)
	call	__idivu
	ld	d, l
	ld	e, c
	mlt	de
	ld	bc, (ix + 12)
	ld	a, c
	sub	a, e
	ld	c, a
	ld	a, (ix - 3)
	sub	a, c
	ld	e, a
	ld	(ix - 3), de
	ld	bc, (ix - 16)
	call	__imulu
	push	af
	ld	a, (ix - 22)
	ld	iyh, a
	pop	af
	ld	de, (ix - 19)
	add	hl, de
	ld	b, 0
	ex	de, hl
BB17_2:
	ld	a, (ix - 6)
	or	a, a
	ld	a, 0
	ld	c, a
	ld	hl, (ix - 12)
	jr	z, BB17_5
BB17_3:
	ld	(ix - 6), hl
	ld	(ix - 13), a
	ld	(ix - 16), b
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 3)
	ld	(ix - 22), hl
	ld	iy, (iy)
	ld	(ix - 19), de
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	de
	ld	hl, (ix - 22)
	add	hl, de
	ld	hl, (hl)
	ld	de, (ix - 3)
	push	de
	ld	de, (ix - 6)
	push	de
	push	hl
	call	gfy_TransparentSprite_NoClip
	ld	b, (ix - 16)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 6)
	ld	a, (ix - 13)
	ld	de, 0
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	add	hl, de
	ld	de, (ix - 19)
	inc	de
	inc	a
	ld	c, (iy + 9)
	cp	a, c
	jr	c, BB17_3
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	a, (iy + 6)
	ld	(ix - 13), a
	ld	a, (iy + 8)
	ld	iyh, a
BB17_5:
	ld	(ix - 6), c
	ld	hl, (ix - 9)
	add	hl, de
	ld	a, (ix - 13)
	ld	de, (ix - 3)
	add	a, e
	ld	e, a
	ld	(ix - 3), de
	inc	b
	ld	a, b
	ld	e, iyh
	cp	a, e
	ex	de, hl
	jp	c, BB17_2
BB17_6:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_GetSprite
gfy_GetSprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 7
	ld	sp, hl
	ld	hl, (ix + 6)
	xor	a, a
	ld	(ix - 4), a
	ld	bc, (-1900524)
	ld	a, (hl)
	or	a, a
	jr	z, BB18_3
	ld	hl, (ix + 12)
	
	push	bc
	pop	iy
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 9)
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	add	iy, de
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	lea	hl, iy + 2
	ld	de, 0
	ld	e, (iy + 1)
BB18_2:
	push	de
	ld	de, (ix - 3)
	push	de
	ld	(ix - 7), hl
	push	hl
	call	_memcpy
	ld	iy, (ix + 6)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, 240
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	ld	de, 0
	ld	e, (iy + 1)
	ld	hl, (ix - 7)
	add	hl, de
	ld	a, (ix - 4)
	inc	a
	ld	c, (iy)
	ld	(ix - 4), a
	cp	a, c
	jr	c, BB18_2
BB18_3:
	ld	hl, (ix + 6)
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ScaledSprite_NoClip
gfy_ScaledSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 25
	ld	sp, hl
	ld	l, (ix + 15)
	ld	iy, 0
	ld	a, l
	or	a, a
	jp	z, BB19_17
	ld	c, (ix + 18)
	ld	a, c
	or	a, a
	jp	z, BB19_17
	lea	de, iy
	ld	e, l
	ld	(ix - 6), de
	lea	hl, iy
	ld	l, c
	ld	(ix - 9), hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	hl, (ix + 9)
	call	__set_bc_and_mul_hl_by_240
	ld	(ix - 19), hl
	ld	hl, (ix - 6)
	call	__imulu
	ld	(ix - 6), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	or	a, a
	sbc	hl, hl
	ld	(ix - 15), a
	ld	l, a
	ld	bc, (ix - 9)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	ld	iy, (ix + 6)
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), hl
	ld	l, (iy)
	ld	a, l
	or	a, a
	jr	nz, BB19_5
	ld	a, (ix + 15)
	cp	a, 1
	jp	z, BB19_17
	ld	hl, (-1900524)
	jp	BB19_17
BB19_5:
	ld	de, 0
	ld	e, (ix + 12)
	ld	(ix - 25), de
	ld	iy, (ix - 3)
	add	iy, de
	ld	de, (ix - 19)
	add	iy, de
	lea	bc, iy
	ld	iy, (ix + 6)
	lea	de, iy + 2
	ld	(ix - 6), de
	ld	a, (ix + 18)
	dec	a
	ld	iy, 0
	ld	iyl, a
	ld	(ix - 22), iy
	push	af
	ld	a, (ix - 15)
	ld	iyl, a
	pop	af
	ld	iyh, iyl
	ld	d, 0
	ld	a, d
BB19_6:
	ld	(ix - 15), a
	ld	a, iyl
	or	a, a
	ld	iyl, d
	ld	a, d
	jr	z, BB19_9
BB19_7:
	ld	(ix - 16), a
	ld	hl, (ix - 6)
	ld	a, (hl)
	ld	hl, (ix - 9)
	push	hl
	ld	l, a
	push	hl
	ld	(ix - 3), bc
	push	bc
	call	_memset
	ld	a, (ix - 16)
	ld	iy, (ix + 6)
	ld	d, 0
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	bc, (ix - 22)
	ld	hl, (ix - 3)
	add	hl, bc
	inc	hl
	push	hl
	pop	bc
	inc	a
	ld	l, (iy + 1)
	ex	de, hl
	ld	iyh, e
	ex	de, hl
	cp	a, l
	jr	c, BB19_7
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	iyl, iyh
BB19_9:
	ld	e, l
	push	bc
	pop	hl
	ld	bc, (ix - 12)
	add	hl, bc
	push	hl
	pop	bc
	ld	l, e
	ld	a, (ix - 15)
	inc	a
	cp	a, l
	jr	c, BB19_6
	ld	a, (ix + 15)
	cp	a, 1
	jp	z, BB19_17
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, iyh
	ex	de, hl
	ld	bc, (ix - 9)
	call	__imulu
	ld	bc, (ix - 25)
	ld	(ix - 9), hl
	ld	a, e
	ld	e, (ix + 15)
	ld	iyl, a
	or	a, a
	jr	z, BB19_17
	ld	hl, (ix - 3)
	add	hl, bc
	ld	bc, (ix - 19)
	add	hl, bc
	ld	a, e
	dec	a
	ld	(ix - 16), a
	push	hl
	pop	bc
BB19_13:
	ld	(ix - 3), bc
	ld	bc, 240
	add	hl, bc
	ld	a, e
	cp	a, 2
	ld	a, (ix - 16)
	ld	(ix - 6), a
	push	hl
	pop	bc
	jr	c, BB19_16
BB19_14:
	ld	(ix - 12), d
	ld	hl, (ix - 9)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 15), bc
	push	bc
	call	_memcpy
	ld	iy, (ix + 6)
	ld	d, (ix - 12)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	e, (ix + 15)
	ld	bc, 240
	ld	hl, (ix - 15)
	add	hl, bc
	push	hl
	pop	bc
	ld	a, (ix - 6)
	dec	a
	ld	(ix - 6), a
	or	a, a
	jr	nz, BB19_14
	ld	a, (iy)
	ld	iyl, a
BB19_16:
	inc	d
	ld	a, d
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	cp	a, l
	push	bc
	pop	hl
	jr	c, BB19_13
BB19_17:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_ScaledTransparentSprite_NoClip
gfy_ScaledTransparentSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 19
	ld	sp, hl
	ld	a, (ix + 15)
	or	a, a
	jp	z, BB20_13
	ld	e, (ix + 18)
	ld	a, e
	or	a, a
	jp	z, BB20_13
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	(ix - 7), hl
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	or	a, a
	sbc	hl, hl
	ld	(ix - 4), a
	ld	l, a
	ld	bc, (ix - 7)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, 240
	push	hl
	pop	de
	or	a, a
	sbc	hl, bc
	ld	c, (ix + 18)
	ld	(ix - 14), hl
	ld	hl, (ix + 6)
	ld	a, (hl)
	or	a, a
	jp	z, BB20_13
	ld	hl, (ix + 9)
	ld	a, c
	ld	bc, 0
	ld	c, (ix + 12)
	ld	iy, (ix - 3)
	add	iy, bc
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 3), iy
	ld	iy, (ix + 6)
	lea	iy, iy + 2
	dec	a
	or	a, a
	sbc	hl, hl
	ld	l, a
	inc	hl
	ld	(ix - 19), hl
	xor	a, a
BB20_4:
	ld	(ix - 15), a
	ld	l, (ix - 4)
	ld	c, 0
BB20_5:
	ld	a, l
	or	a, a
	ld	(ix - 8), c
	jr	nz, BB20_7
	xor	a, a
	ld	l, a
	jr	BB20_11
BB20_7:
	ld	a, (gfy_Transparent_Color)
	ld	d, a
	ld	e, 0
BB20_8:
	ld	a, (iy)
	cp	a, d
	ld	bc, (ix - 7)
	lea	hl, iy
	jr	z, BB20_10
	ld	(ix - 11), hl
	ld	hl, (ix - 7)
	push	hl
	ld	l, a
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	(ix - 16), e
	call	_memset
	ld	e, (ix - 16)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix - 11)
	ld	a, (gfy_Transparent_Color)
	ld	d, a
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	(ix - 4), a
	ld	bc, (ix - 19)
BB20_10:
	inc	hl
	push	hl
	pop	iy
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	inc	e
	ld	a, e
	ld	l, (ix - 4)
	cp	a, l
	jr	c, BB20_8
BB20_11:
	ld	(ix - 11), l
	ld	bc, 0
	ld	c, l
	ld	hl, (ix - 3)
	ld	de, (ix - 14)
	add	hl, de
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, hl
	sbc	hl, bc
	push	hl
	pop	bc
	add	iy, bc
	ld	c, (ix - 8)
	inc	c
	ld	a, c
	ld	l, (ix + 15)
	cp	a, l
	ld	l, (ix - 11)
	jp	nz, BB20_5
	ld	bc, 0
	ld	c, (ix - 4)
	add	iy, bc
	ld	a, (ix - 15)
	inc	a
	ld	hl, (ix + 6)
	ld	l, (hl)
	cp	a, l
	jp	c, BB20_4
BB20_13:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_FloodFill
gfy_FloodFill:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 41
	ld	sp, hl
	ld	bc, (ix + 6)
	ld	iy, (gfy_ClipXMin)
	ld	de, -8388608
	ld	(ix - 6), iy
	add	iy, de
	push	bc
	pop	hl
	add	hl, de
	push	hl
	pop	de
	ld	(ix - 3), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	c, BB21_39
	ld	iy, (gfy_ClipXMax)
	ld	(ix - 9), iy
	ld	bc, -8388608
	add	iy, bc
	ex	de, hl
	ld	(ix - 12), iy
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB21_39
	ld	c, (ix + 9)
	ld	a, (gfy_ClipYMin)
	ld	l, a
	ld	a, c
	ld	(ix - 13), l
	cp	a, l
	jp	c, BB21_39
	ld	a, (gfy_ClipYMax)
	ld	l, a
	ld	a, c
	ld	(ix - 17), l
	cp	a, l
	jp	nc, BB21_39
	ld	a, c
	ld	bc, 240
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, a
	ld	iy, (-1900524)
	ld	hl, (ix + 6)
	call	__imulu
	add	hl, de
	push	hl
	pop	bc
	ld	(ix - 20), iy
	lea	hl, iy
	add	hl, bc
	ld	c, a
	ld	a, (hl)
	ld	(ix - 21), a
	ld	l, (ix + 12)
	cp	a, l
	jp	z, BB21_39
	ld	a, c
	ld	bc, 3072
	ld	hl, 0
	add	hl, sp
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	sp, iy
	ld	hl, (ix + 6)
	ld	(iy), l
	ld	(iy + 1), h
	ld	(ix - 28), iy
	ld	(iy + 2), a
	ld	l, (ix - 17)
	dec	l
	ld	(ix - 17), l
	ld	iy, (ix - 6)
	lea	hl, iy
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	bc
	ld	hl, (ix - 20)
	add	hl, bc
	ld	(ix - 34), hl
	ld	bc, 1
	dec	iy
	ld	(ix - 6), iy
	ld	hl, (ix - 9)
	dec	hl
	ld	(ix - 9), hl
BB21_6:
	dec	bc
	ld	(ix - 24), bc
	push	bc
	pop	hl
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (iy)
	ld	a, (iy + 2)
	ld	bc, 0
	push	bc
	pop	iy
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	push	bc
	pop	de
	ld	(ix - 25), a
	ld	e, a
	lea	hl, iy
	call	__set_bc_and_mul_hl_by_240
	ld	(ix - 31), de
	add	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 20)
	add	hl, bc
	ld	(ix - 16), hl
	lea	hl, iy
	ld	de, -8388608
	add	hl, de
	ld	bc, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	c, BB21_11
	ld	hl, (ix - 34)
	ld	de, (ix - 31)
	add	hl, de
	ld	de, -240
	add	hl, de
	ld	(ix - 31), hl
	ld	hl, (ix - 16)
BB21_8:
	ld	(ix - 16), hl
	ld	a, (hl)
	ld	l, (ix - 21)
	cp	a, l
	ld	bc, -8388608
	jr	nz, BB21_12
	dec	iy
	ld	de, -240
	ld	hl, (ix - 16)
	add	hl, de
	ex	de, hl
	lea	hl, iy
	inc	hl
	add	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	ex	de, hl
	jr	c, BB21_8
	ld	hl, (ix - 31)
	ld	(ix - 16), hl
	ld	iy, (ix - 6)
BB21_11:
	ld	bc, -8388608
BB21_12:
	ld	de, (ix - 9)
	lea	hl, iy
	inc	hl
	add	hl, bc
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	jp	nc, BB21_37
	ld	a, (ix - 25)
	ld	l, a
	dec	l
	ld	(ix - 37), l
	inc	a
	ld	(ix - 38), a
	ex	de, hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	ld	(ix - 31), hl
	inc.sis	de
	ld	bc, 241
	ld	iy, (ix - 16)
	add	iy, bc
	xor	a, a
	ld	(ix - 35), a
	ld	(ix - 36), a
	ld	bc, (ix - 24)
BB21_14:
	ld	a, (iy - 1)
	ld	l, (ix - 21)
	cp	a, l
	jp	nz, BB21_38
	ld	(ix - 41), de
	ld	(ix - 16), iy
	push	bc
	pop	hl
	ld	de, 1022
	or	a, a
	sbc	hl, de
	jp	nc, BB21_38
	ld	a, (ix + 12)
	ld	iy, (ix - 16)
	ld	(iy - 1), a
	ld	a, (ix - 13)
	ld	l, (ix - 25)
	cp	a, l
	ld	(ix - 24), bc
	jr	nc, BB21_20
	ld	l, (iy - 2)
	ld	a, (ix - 35)
	and	a, 1
	ld	c, a
	bit	0, c
	jr	nz, BB21_21
	ld	a, l
	ld	h, (ix - 21)
	cp	a, h
	jr	nz, BB21_21
	ld	hl, (ix - 24)
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (ix - 41)
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (ix - 37)
	ld	(iy + 2), a
	ld	de, (ix - 9)
	ld	hl, (ix - 24)
	inc	hl
	ld	(ix - 24), hl
	ld	a, 1
	jr	BB21_25
BB21_20:
	ld	bc, 240
	ld	de, (ix - 9)
	jr	BB21_27
BB21_21:
	ld	a, c
	xor	a, 1
	ld	c, a
	ld	a, l
	ld	l, (ix - 21)
	cp	a, l
	ld	l, -1
	jr	z, BB21_23
	ld	l, 0
BB21_23:
	ld	a, c
	or	a, l
	bit	0, a
	ld	de, (ix - 9)
	jr	nz, BB21_26
	xor	a, a
BB21_25:
	ld	(ix - 35), a
BB21_26:
	ld	bc, 240
BB21_27:
	ld	a, (ix - 25)
	ld	l, (ix - 17)
	cp	a, l
	jr	nc, BB21_36
	ld	hl, (ix - 16)
	ld	l, (hl)
	ld	a, (ix - 36)
	and	a, 1
	ld	c, a
	bit	0, c
	jr	nz, BB21_31
	ld	a, l
	ld	h, (ix - 21)
	cp	a, h
	jr	nz, BB21_31
	ld	de, (ix - 24)
	push	de
	pop	hl
	push	hl
	pop	bc
	add	hl, bc
	add	hl, bc
	ld	bc, 3
	push	hl
	pop	bc
	ld	iy, (ix - 28)
	add	iy, bc
	ld	hl, (ix - 41)
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (ix - 38)
	ld	(iy + 2), a
	inc	de
	ld	(ix - 24), de
	ld	a, 1
	jr	BB21_34
BB21_31:
	ld	a, c
	xor	a, 1
	ld	c, a
	ld	a, l
	ld	l, (ix - 21)
	cp	a, l
	ld	l, -1
	jr	z, BB21_33
	ld	l, 0
BB21_33:
	ld	a, c
	or	a, l
	bit	0, a
	ld	a, 0
	jr	nz, BB21_35
BB21_34:
	ld	(ix - 36), a
BB21_35:
	ld	bc, 240
BB21_36:
	ld	hl, (ix - 31)
	dec	hl
	ld	de, (ix - 41)
	inc.sis	de
	ld	iy, (ix - 16)
	add	iy, bc
	ld	(ix - 31), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, (ix - 24)
	jp	nz, BB21_14
	jr	BB21_38
BB21_37:
	ld	bc, (ix - 24)
BB21_38:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, (ix - 9)
	jp	nz, BB21_6
BB21_39:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_RLETSprite
gfy_RLETSprite:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 27
	ld	sp, hl
	ld	hl, (ix + 9)
	ld	iy, (gfy_ClipXMax)
	ld	de, -8388608
	add	iy, de
	add	hl, de
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB22_40
	ld	a, (gfy_ClipYMax)
	or	a, a
	sbc	hl, hl
	lea	bc, iy
	push	hl
	pop	iy
	ld	iyl, a
	ld	de, -8388608
	add	iy, de
	ld	hl, (ix + 12)
	add	hl, de
	ld	(ix - 3), hl
	ld	(ix - 6), iy
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB22_40
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	a, l
	or	a, a
	jp	z, BB22_40
	ld	iy, (ix + 6)
	ld	e, (iy + 1)
	ld	a, e
	or	a, a
	jp	z, BB22_40
	ld	(ix - 9), e
	ld	a, l
	ld	(ix - 12), bc
	ld	iy, (gfy_ClipXMin)
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 9)
	ld	de, -8388608
	add	hl, de
	lea	bc, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB22_8
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	l, a
	ld	(ix - 15), hl
	push	bc
	pop	hl
	ld	l, (ix - 9)
	ld	(ix - 9), hl
	ld	a, (gfy_ClipYMin)
	ld	c, a
	ld	(ix - 18), bc
	ld	de, (ix + 9)
	ld	hl, (ix - 15)
	add	hl, de
	push	hl
	pop	bc
	ld	de, (ix + 12)
	ld	hl, (ix - 9)
	add	hl, de
	ld	(ix - 9), hl
	ld	de, -8388608
	ld	hl, (ix - 18)
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, de
	jr	c, BB22_8
	ld	de, -8388608
	push	bc
	pop	iy
	add	iy, de
	ld	hl, (ix - 12)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jr	c, BB22_8
	ld	de, -8388608
	ld	iy, (ix - 9)
	add	iy, de
	ld	hl, (ix - 6)
	lea	de, iy
	or	a, a
	sbc	hl, de
	jp	nc, BB22_41
BB22_8:
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	de, 0
	ld	(ix - 6), a
	ld	e, a
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 18), hl
	ld	a, (iy)
	ld	(ix - 12), a
	or	a, a
	ld	hl, (ix + 9)
	jp	z, BB22_40
	call	__set_bc_and_mul_hl_by_240
	ld	bc, (ix + 9)
	ld	de, (ix + 12)
	add	hl, de
	ex	de, hl
	ld	hl, (ix - 3)
	add	hl, de
	ld	(ix - 3), hl
	lea	hl, iy + 2
	ld	(ix - 21), hl
	ld	a, (ix - 6)
	ld	iy, 0
BB22_10:
	ld	(ix - 15), iy
	add	iy, bc
	ld	bc, (gfy_ClipXMin)
	ld	hl, (gfy_ClipXMax)
	ld	(ix - 9), hl
	ld	de, -8388608
	push	bc
	pop	hl
	add	hl, de
	push	hl
	pop	bc
	add	iy, de
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jr	c, BB22_14
	ld	hl, (ix - 9)
	add	hl, de
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jr	nc, BB22_14
	ld	e, a
	or	a, a
	jr	nz, BB22_20
	xor	a, a
	sbc	hl, hl
	ld	iy, (ix - 3)
	jp	BB22_38
BB22_14:
	ld	hl, (ix - 9)
	add	hl, de
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	jp	nc, BB22_40
	ld	e, a
	or	a, a
	sbc	hl, hl
	or	a, a
	jr	nz, BB22_17
	ld	a, e
	jp	BB22_34
BB22_17:
	push	hl
	pop	bc
	ld	c, e
	ld	(ix - 9), bc
	ld	iy, 0
	ld	a, e
BB22_18:
	push	hl
	pop	bc
	ld	hl, (ix - 21)
	push	hl
	pop	de
	ld	c, (hl)
	add	iy, bc
	lea	hl, iy
	ld	bc, (ix - 9)
	or	a, a
	sbc	hl, bc
	jp	nc, BB22_33
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix - 27), bc
	ex	de, hl
	ld	de, (ix - 27)
	ld	(ix - 24), iy
	push	hl
	pop	iy
	ld	e, (iy + 1)
	add	hl, de
	push	hl
	pop	iy
	lea	iy, iy + 2
	ld	(ix - 21), iy
	ld	iy, (ix - 24)
	add	iy, de
	lea	hl, iy
	ld	de, (ix - 9)
	or	a, a
	sbc	hl, de
	push	bc
	pop	hl
	jr	c, BB22_18
	jp	BB22_34
BB22_20:
	ld	hl, (ix - 21)
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	iy, (ix - 3)
	add	iy, bc
	cp	a, e
	jp	nc, BB22_35
	ld	(ix - 12), bc
	ld	hl, (ix - 21)
	ld	(ix - 9), hl
	ld	e, (ix - 6)
BB22_22:
	ld	(ix - 3), iy
	ld	bc, (ix - 9)
	push	bc
	pop	iy
	lea	hl, iy + 2
	ld	c, (iy + 1)
	ld	a, c
	or	a, a
	jr	nz, BB22_24
	ld	(ix - 9), hl
	or	a, a
	sbc	hl, hl
	ld	a, e
	ld	iy, (ix - 3)
	jr	BB22_31
BB22_24:
	ld	a, (gfy_ClipYMin)
	ld	(ix - 21), a
	ld	(ix - 9), hl
	ld	hl, (ix - 12)
	ld	(ix - 6), hl
	ld	iy, (ix - 3)
BB22_25:
	ld	(ix - 12), c
	ld	hl, (ix + 12)
	ld	de, (ix - 6)
	add	hl, de
	ld	(ix - 3), hl
	ld	bc, 0
	ld	c, (ix - 21)
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	jr	nc, BB22_27
	ld	c, (ix - 12)
	jr	BB22_29
BB22_27:
	ld	a, (gfy_ClipYMax)
	ld	bc, 0
	ld	c, a
	ld	hl, (ix - 3)
	or	a, a
	sbc	hl, bc
	ld	c, (ix - 12)
	jr	nc, BB22_29
	ld	hl, (ix - 9)
	ld	a, (hl)
	ld	(iy), a
	ld	a, (gfy_ClipYMin)
	ld	(ix - 21), a
BB22_29:
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 9), hl
	inc	de
	ld	(ix - 6), de
	inc	iy
	dec	c
	ld	a, c
	or	a, a
	ld	hl, 0
	jr	nz, BB22_25
	lea	de, iy
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	push	de
	pop	iy
	ld	de, (ix - 6)
	ld	(ix - 12), de
BB22_31:
	push	hl
	pop	bc
	ld	c, a
	ex	de, hl
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, bc
	jr	nc, BB22_36
	ld	hl, (ix - 9)
	inc	hl
	ld	(ix - 21), hl
	ld	(ix - 3), de
	ld	de, (ix - 3)
	ld	hl, (ix - 9)
	ld	e, (hl)
	ld	(ix - 3), de
	ld	hl, (ix - 12)
	ld	de, (ix - 3)
	add	hl, de
	ld	de, (ix - 3)
	add	iy, de
	ld	(ix - 12), hl
	or	a, a
	sbc	hl, bc
	ld	c, a
	ld	hl, 0
	ld	e, a
	jr	nc, BB22_37
	jp	BB22_22
BB22_33:
	inc	de
	ld	(ix - 21), de
	or	a, a
	sbc	hl, hl
BB22_34:
	ld	bc, 240
	ex	de, hl
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	ex	de, hl
	jr	BB22_39
BB22_35:
	ld	c, e
	ld	de, (ix - 21)
	inc	de
	ld	(ix - 21), de
	ld	e, (ix - 6)
	jr	BB22_37
BB22_36:
	ld	c, a
	ld	hl, (ix - 9)
	ld	(ix - 21), hl
	ex	de, hl
	ld	e, a
BB22_37:
	ld	(ix - 6), e
	ex	de, hl
	ld	hl, (ix + 6)
	ld	a, (hl)
	ex	de, hl
	ld	(ix - 12), a
	ld	a, c
BB22_38:
	ld	bc, (ix - 18)
	add	iy, bc
	ld	(ix - 3), iy
BB22_39:
	ld	iy, (ix - 15)
	inc	iy
	push	hl
	pop	bc
	ld	c, (ix - 12)
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ld	bc, (ix + 9)
	jp	c, BB22_10
BB22_40:
	ld	sp, ix
	pop	ix
	ret
BB22_41:
	call	gfy_Wait
	ld	hl, (-1900524)
	ld	(ix - 3), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	de, 0
	ld	(ix - 12), a
	ld	e, a
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	a, (iy)
	ld	(ix - 9), a
	or	a, a
	ld	hl, (ix + 9)
	jr	z, BB22_40
	call	__set_bc_and_mul_hl_by_240
	push	hl
	pop	de
	ld	hl, (ix + 12)
	ld	bc, 255
	inc.s	hl
	dec	hl
	ld	h, b
	add	hl, de
	push	hl
	pop	bc
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	ld	c, 0
	ld	a, c
	ld	iy, (ix + 6)
	lea	bc, iy + 2
	ld	iyl, a
	ld	(ix - 6), bc
	ld	d, (ix - 12)
	ld	e, iyl
BB22_43:
	ld	a, d
	or	a, a
	jr	nz, BB22_45
	ld	d, iyl
	jp	BB22_58
BB22_45:
	ld	iy, (ix - 6)
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	cp	a, d
	jp	nc, BB22_56
	ld	(ix - 21), e
	ld	(ix - 9), bc
	ld	(ix - 6), iy
BB22_47:
	ld	iy, (ix - 6)
	lea	hl, iy + 2
	ld	(ix - 18), hl
	ld	d, (iy + 1)
	ld	bc, 0
	ld	c, d
	ld	hl, (ix - 9)
	add	hl, bc
	ld	(ix - 9), hl
	ld	a, d
	or	a, a
	jr	nz, BB22_49
	ld	hl, (ix - 18)
	ld	(ix - 6), hl
	ld	d, (ix - 12)
	ld	e, (ix - 21)
	jr	BB22_52
BB22_49:
	ld	e, (ix - 21)
	ld	hl, (ix - 18)
BB22_50:
	ld	a, (hl)
	inc	hl
	ld	iy, (ix - 3)
	ld	(iy), a
	inc	iy
	ld	(ix - 3), iy
	dec	d
	ld	a, d
	or	a, a
	jr	nz, BB22_50
	ld	(ix - 6), hl
	ld	iy, (ix + 6)
	ld	d, (iy + 1)
BB22_52:
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, d
	ld	iy, (ix - 9)
	lea	hl, iy
	sbc	hl, bc
	ld	(ix - 12), d
	jr	nc, BB22_55
	or	a, a
	sbc	hl, hl
	ld	(ix - 18), hl
	ld	hl, (ix - 18)
	ld	iy, (ix - 6)
	ld	l, (iy)
	ld	(ix - 18), hl
	ld	de, (ix - 18)
	ld	hl, (ix - 9)
	add	hl, de
	push	hl
	pop	iy
	ld	hl, (ix - 3)
	ld	de, (ix - 18)
	add	hl, de
	ld	(ix - 3), hl
	lea	hl, iy
	ld	(ix - 9), hl
	or	a, a
	sbc	hl, bc
	jp	c, BB22_47
	ld	hl, (ix - 6)
	inc	hl
	ld	(ix - 6), hl
	ld	d, (ix - 12)
	ld	e, (ix - 21)
BB22_55:
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	(ix - 9), l
	jr	BB22_57
BB22_56:
	inc	iy
	ld	(ix - 6), iy
BB22_57:
	ld	c, 0
	ld	iyl, c
BB22_58:
	ld	bc, (ix - 15)
	ld	hl, (ix - 3)
	add	hl, bc
	ld	(ix - 3), hl
	inc	e
	ld	a, e
	ld	l, (ix - 9)
	cp	a, l
	jp	c, BB22_43
	jp	BB22_40
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_RLETSprite_NoClip
gfy_RLETSprite_NoClip:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 20
	ld	sp, hl
	call	gfy_Wait
	ld	bc, (-1900524)
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	de, 0
	ld	(ix - 7), a
	ld	e, a
	ld	hl, 240
	or	a, a
	sbc	hl, de
	ld	(ix - 6), hl
	ld	hl, (ix + 6)
	ld	d, (hl)
	ld	a, d
	or	a, a
	jp	z, BB23_17
	push	bc
	pop	iy
	ld	hl, (ix + 9)
	ld	a, (ix + 12)
	call	__set_bc_and_mul_hl_by_240
	ld	bc, 0
	ld	c, a
	add	hl, bc
	push	hl
	pop	bc
	lea	hl, iy
	add	hl, bc
	ld	iy, (ix + 6)
	lea	bc, iy + 2
	ld	(ix - 13), bc
	push	af
	ld	a, (ix - 7)
	ld	iyl, a
	pop	af
	ld	e, 0
BB23_2:
	ld	a, iyl
	or	a, a
	jr	nz, BB23_4
	ld	iyl, 0
	jp	BB23_16
BB23_4:
	ld	d, iyl
	ld	iy, (ix - 13)
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	add	hl, bc
	ld	(ix - 3), hl
	ld	(ix - 16), d
	cp	a, d
	jp	nc, BB23_13
	ld	(ix - 10), bc
BB23_6:
	lea	hl, iy + 2
	ld	(ix - 13), hl
	ld	d, (iy + 1)
	ld	bc, 0
	ld	c, d
	ld	iy, (ix - 10)
	add	iy, bc
	ld	(ix - 10), iy
	ld	a, d
	or	a, a
	jr	nz, BB23_8
	ld	hl, (ix - 13)
	ld	(ix - 19), hl
	ld	a, (ix - 7)
	jr	BB23_11
BB23_8:
	ld	hl, (ix - 13)
BB23_9:
	ld	a, (hl)
	inc	hl
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	ld	(iy), a
	inc	bc
	ld	(ix - 3), bc
	dec	d
	ld	a, d
	or	a, a
	jr	nz, BB23_9
	ld	(ix - 19), hl
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
BB23_11:
	ld	iy, 0
	lea	bc, iy
	ld	c, a
	ld	hl, (ix - 10)
	or	a, a
	sbc	hl, bc
	ld	(ix - 7), a
	jr	nc, BB23_14
	ld	hl, (ix - 19)
	inc	hl
	ld	(ix - 13), hl
	ld	(ix - 16), iy
	ld	iy, (ix - 19)
	ld	hl, (ix - 16)
	ld	l, (iy)
	ld	(ix - 16), hl
	ld	(ix - 20), e
	ld	de, (ix - 16)
	ld	hl, (ix - 10)
	add	hl, de
	ld	(ix - 10), hl
	ld	hl, (ix - 3)
	ld	de, (ix - 16)
	add	hl, de
	ld	e, (ix - 20)
	ld	(ix - 3), hl
	ld	hl, (ix - 10)
	or	a, a
	sbc	hl, bc
	ld	(ix - 16), a
	jr	nc, BB23_15
	jp	BB23_6
BB23_13:
	inc	iy
	ld	(ix - 13), iy
	jr	BB23_15
BB23_14:
	ld	(ix - 16), a
	ld	hl, (ix - 19)
	ld	(ix - 13), hl
BB23_15:
	ld	hl, (ix + 6)
	ld	d, (hl)
	ld	hl, (ix - 3)
	push	af
	ld	a, (ix - 16)
	ld	iyl, a
	pop	af
BB23_16:
	ld	bc, (ix - 6)
	add	hl, bc
	inc	e
	ld	a, e
	cp	a, d
	jp	c, BB23_2
BB23_17:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	section	.text,"ax",@progbits
;	public	gfy_CopyRectangle
gfy_CopyRectangle:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix - 18
	ld	sp, hl
	sbc	hl, hl
	ld	(ix - 3), hl
	call	gfy_Wait
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, -1900528
	push	hl
	pop	de
	jr	z, BB24_2
	ld	hl, -1900524
BB24_2:
	ld	a, (ix + 21)
	ld	bc, 240
	ld	iy, (hl)
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ex	de, hl
	jr	z, BB24_4
	ld	hl, -1900524
BB24_4:
	ld	hl, (hl)
	ld	(ix - 6), hl
	ld	de, 0
	ld	e, (ix + 15)
	ld	hl, (ix + 12)
	call	__imulu
	push	de
	pop	bc
	add	hl, bc
	ex	de, hl
	add	iy, de
	ld	c, a
	push	bc
	pop	de
	ld	hl, (ix + 18)
	call	__set_bc_and_mul_hl_by_240
	push	de
	pop	bc
	add	hl, bc
	ex	de, hl
	ld	hl, (ix - 6)
	add	hl, de
	ex	de, hl
	ld	c, (ix + 27)
	ld	hl, 240
	ld	(ix - 9), bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), hl
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jr	nz, BB24_8
	ld	hl, (ix + 24)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	jp	z, BB24_12
	ld	hl, (ix - 12)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	lea	hl, iy
BB24_7:
	ld	(ix - 15), bc
	ld	de, (ix - 9)
	add	hl, de
	ld	bc, -240
	add	hl, bc
	ld	(ix - 6), hl
	push	de
	push	hl
	push	hl
	call	_memmove
	ld	bc, (ix - 15)
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	dec	bc
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, (ix - 6)
	push	hl
	pop	iy
	jr	nz, BB24_7
	jr	BB24_9
BB24_8:
	ex	de, hl
BB24_9:
	ld	(ix - 6), hl
	ld	hl, (ix + 24)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB24_12
	ld	(ix - 15), iy
BB24_11:
	ld	(ix - 18), hl
	ld	de, (ix - 3)
	ld	iy, (ix - 15)
	add	iy, de
	ld	hl, (ix - 6)
	add	hl, de
	ld	de, (ix - 9)
	push	de
	push	iy
	push	hl
	call	_memcpy
	ld	hl, (ix - 18)
	ld	iy, 9
	add	iy, sp
	ld	sp, iy
	ld	bc, (ix - 15)
	dec	hl
	ld	de, (ix - 12)
	ld	iy, (ix - 3)
	add	iy, de
	ld	(ix - 3), iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB24_11
BB24_12:
	ld	sp, ix
	pop	ix
	ret
;	section	.text,"ax",@progbits

;	ident	"clang version 15.0.0 (https://github.com/CE-Programming/llvm-project 51b05c1c99dbd61fce7daf56414f212f15b2171a)"
;	extern	gfy_internal_Begin
;	extern	gfy_TextWidthScale
;	extern	gfy_Transparent_Color
;	extern	__Unwind_SjLj_Register
;	extern	gfy_GetCharWidth
;	extern	lcd_SendCommand1
;	extern	gfy_FontHeight
;	extern	gfy_Wait
;	extern	gfy_TextData
;	extern	gfy_ClipXMin
;	extern	gfy_TextHeightScale
;	extern	__ishl
;	extern	gfy_Text_FG_Color
;	extern	_memcpy
;	extern	gfy_internal_End
;	extern	__idivu
;	extern	lcd_SendSizedCommandWords
;	extern	__iand
;	extern	__ixor
;	extern	gfy_Sprite_NoClip
;	extern	gfy_VertLine
;	extern	gfy_ClipYMin
;	extern	gfy_Text_BG_Color
;	extern	gfy_TransparentSprite_NoClip
;	extern	_memset
;	extern	gfy_TextXPos
;	extern	gfy_SetTextXY
;	extern	_memmove
;	extern	gfy_Color
;	extern	lcd_Init
;	extern	gfy_PrintChar_Clip
;	extern	gfy_ClipXMax
;	extern	gfy_VertLine_NoClip
;	extern	gfy_TextYPos
;	extern	gfy_Text_TP_Color
;	extern	__Unwind_SjLj_Unregister
;	extern	lcd_Cleanup
;	extern	__imulu
;	extern	__bshl
;	extern	gfy_ClipYMax
