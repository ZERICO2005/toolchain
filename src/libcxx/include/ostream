// -*- C++ -*-
#ifndef _EZCXX_OSTREAM
#define _EZCXX_OSTREAM

#include <ios>
#include <iterator>
#include <cstdio>
#include <memory>
#include <streambuf>
#include <string_view>
#include <ti/sprintf.h>

#pragma clang system_header

namespace std {

    
//------------------------------------------------------------------------------
// ostreambuf_iterator
//------------------------------------------------------------------------------

template <class _CharT, class _Traits>
class _EZCXX_TEMPLATE_VIS ostreambuf_iterator {
public:
    typedef output_iterator_tag iterator_category;
    typedef void value_type;
    typedef void difference_type;
    typedef void pointer;
    typedef void reference;
    typedef _CharT char_type;
    typedef _Traits traits_type;
    typedef basic_streambuf<_CharT, _Traits> streambuf_type;
    typedef basic_ostream<_CharT, _Traits> ostream_type;

private:
    streambuf_type* __sbuf_;

public:
    _EZCXX_HIDE_FROM_ABI ostreambuf_iterator(ostream_type& __s) noexcept : __sbuf_(__s.rdbuf()) {}
    _EZCXX_HIDE_FROM_ABI ostreambuf_iterator(streambuf_type* __s) noexcept : __sbuf_(__s) {}
    _EZCXX_HIDE_FROM_ABI ostreambuf_iterator& operator=(_CharT __c) {
        if (__sbuf_ && traits_type::eq_int_type(__sbuf_->sputc(__c), traits_type::eof()))
            __sbuf_ = nullptr;
        return *this;
    }
    _EZCXX_HIDE_FROM_ABI ostreambuf_iterator& operator*() { return *this; }
    _EZCXX_HIDE_FROM_ABI ostreambuf_iterator& operator++() { return *this; }
    _EZCXX_HIDE_FROM_ABI ostreambuf_iterator& operator++(int) { return *this; }
    _EZCXX_HIDE_FROM_ABI bool failed() const noexcept { return __sbuf_ == nullptr; }

    template <class _Ch, class _Tr>
    friend _EZCXX_HIDE_FROM_ABI ostreambuf_iterator<_Ch, _Tr> __pad_and_output(
        ostreambuf_iterator<_Ch, _Tr> __s, const _Ch* __ob, const _Ch* __op, const _Ch* __oe, ios_base& __iob, _Ch __fl
    );
};
    
//------------------------------------------------------------------------------
// basic ostream declaration
//------------------------------------------------------------------------------

    template <class _CharT, class _Traits>
    class _EZCXX_TEMPLATE_VIS basic_ostream : virtual public basic_ios<_CharT, _Traits> {
    public:
        // types (inherited from basic_ios (27.5.4)):
        typedef _CharT char_type;
        typedef _Traits traits_type;
        typedef typename traits_type::int_type int_type;
        typedef typename traits_type::pos_type pos_type;
        typedef typename traits_type::off_type off_type;
    
        // 27.7.2.2 Constructor/destructor:
        inline _EZCXX_HIDE_FROM_ABI explicit basic_ostream(basic_streambuf<char_type, traits_type>* __sb) {
            this->init(__sb);
        }
        ~basic_ostream() override;
    
        basic_ostream(const basic_ostream& __rhs)            = delete;
        basic_ostream& operator=(const basic_ostream& __rhs) = delete;
    
    protected:
        inline _EZCXX_HIDE_FROM_ABI basic_ostream(basic_ostream&& __rhs);
    
        // 27.7.2.3 Assign/swap
        inline _EZCXX_HIDE_FROM_ABI basic_ostream& operator=(basic_ostream&& __rhs);
    
        inline _EZCXX_HIDE_FROM_ABI void swap(basic_ostream& __rhs) {
            basic_ios<char_type, traits_type>::swap(__rhs);
        }
    
    public:
        // 27.7.2.4 Prefix/suffix:
        class _EZCXX_TEMPLATE_VIS sentry;
    
        // 27.7.2.6 Formatted output:
        inline _EZCXX_HIDE_FROM_ABI basic_ostream& operator<<(basic_ostream& (*__pf)(basic_ostream&)) {
            return __pf(*this);
        }
    
        inline _EZCXX_HIDE_FROM_ABI basic_ostream&
        operator<<(basic_ios<char_type, traits_type>& (*__pf)(basic_ios<char_type, traits_type>&)) {
            __pf(*this);
            return *this;
        }
    
        inline _EZCXX_HIDE_FROM_ABI basic_ostream& operator<<(ios_base& (*__pf)(ios_base&)) {
            __pf(*this);
            return *this;
        }
    
        basic_ostream& operator<<(bool __n);
        basic_ostream& operator<<(short __n);
        basic_ostream& operator<<(unsigned short __n);
        basic_ostream& operator<<(int __n);
        basic_ostream& operator<<(unsigned int __n);
        basic_ostream& operator<<(long __n);
        basic_ostream& operator<<(unsigned long __n);
        basic_ostream& operator<<(long long __n);
        basic_ostream& operator<<(unsigned long long __n);
        basic_ostream& operator<<(float __f);
        basic_ostream& operator<<(double __f);
        basic_ostream& operator<<(long double __f);
        basic_ostream& operator<<(const void* __p);
    
        basic_ostream& operator<<(basic_streambuf<char_type, traits_type>* __sb);
    
        // LWG 2221 - nullptr. This is not backported to older standards modes.
        // See https://reviews.llvm.org/D127033 for more info on the rationale.
        _EZCXX_HIDE_FROM_ABI basic_ostream& operator<<(nullptr_t) { return *this << "nullptr"; }
    
        // 27.7.2.7 Unformatted output:
        basic_ostream& put(char_type __c);
        basic_ostream& write(const char_type* __s, streamsize __n);
        basic_ostream& flush();
    
        // 27.7.2.5 seeks:
        inline _EZCXX_HIDE_FROM_ABI pos_type tellp();
        inline _EZCXX_HIDE_FROM_ABI basic_ostream& seekp(pos_type __pos);
        inline _EZCXX_HIDE_FROM_ABI basic_ostream& seekp(off_type __off, ios_base::seekdir __dir);
    
    protected:
        _EZCXX_HIDE_FROM_ABI basic_ostream() {} // extension, intentially does not initialize
    };
    
//------------------------------------------------------------------------------
// put_character_sequence
//------------------------------------------------------------------------------

template <class _CharT, class _Traits>
_EZCXX_HIDE_FROM_ABI basic_ostream<_CharT, _Traits>&
__put_character_sequence(basic_ostream<_CharT, _Traits>& __os, const _CharT* __str, size_t __len) {
    typename basic_ostream<_CharT, _Traits>::sentry __s(__os);
    if (__s) {
        typedef ostreambuf_iterator<_CharT, _Traits> _Ip;
        if (__pad_and_output(
                _Ip(__os),
                __str,
                (__os.flags() & ios_base::adjustfield) == ios_base::left ? __str + __len : __str,
                __str + __len,
                __os,
                __os.fill())
                .failed())
        __os.setstate(ios_base::badbit | ios_base::failbit);
    }
    return __os;
}

//------------------------------------------------------------------------------
// basic ostream
//------------------------------------------------------------------------------

    template <class _CharT, class _Traits>
    class _EZCXX_TEMPLATE_VIS basic_ostream<_CharT, _Traits>::sentry {
        bool __ok_;
        basic_ostream<_CharT, _Traits>& __os_;
    
    public:
        explicit sentry(basic_ostream<_CharT, _Traits>& __os);
        ~sentry();
        sentry(const sentry&)            = delete;
        sentry& operator=(const sentry&) = delete;
    
        _EZCXX_HIDE_FROM_ABI explicit operator bool() const { return __ok_; }
    };
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>::sentry::sentry(basic_ostream<_CharT, _Traits>& __os) : __ok_(false), __os_(__os) {
        if (__os.good()) {
            if (__os.tie())
                __os.tie()->flush();
            __ok_ = true;
        }
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>::sentry::~sentry() {
        if (__os_.rdbuf() && __os_.good() && (__os_.flags() & ios_base::unitbuf)
            #if 0
                && uncaught_exceptions() == 0
            #endif
        ) {
            if (__os_.rdbuf()->pubsync() == -1)
                __os_.setstate(ios_base::badbit);
        }
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>::basic_ostream(basic_ostream&& __rhs) {
        this->move(__rhs);
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator=(basic_ostream&& __rhs) {
        swap(__rhs);
        return *this;
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>::~basic_ostream() {}
    
#if 0
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::operator<<(basic_streambuf<char_type, traits_type>* __sb) {
            sentry __s(*this);
            if (__s) {
                if (__sb) {
                        typedef istreambuf_iterator<_CharT, _Traits> _Ip;
                        typedef ostreambuf_iterator<_CharT, _Traits> _Op;
                        _Ip __i(__sb);
                        _Ip __eof;
                        _Op __o(*this);
                        size_t __c = 0;
                        for (; __i != __eof; ++__i, ++__o, ++__c) {
                            *__o = *__i;
                            if (__o.failed())
                                break;
                        }
                        if (__c == 0)
                            this->setstate(ios_base::failbit);
                } else
                    this->setstate(ios_base::badbit);
            }
        return *this;
    }
#endif

#if 0
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(bool __n) {
        return __put_num(__n);
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(short __n) {
        return __put_num_integer_promote(__n);
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned short __n) {
        return __put_num_integer_promote(__n);
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(int __n) {
        return __put_num_integer_promote(__n);
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned int __n) {
        return __put_num_integer_promote(__n);
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(long __n) {
        return __put_num(__n);
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned long __n) {
        return __put_num(__n);
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(long long __n) {
        return __put_num(__n);
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned long long __n) {
        return __put_num(__n);
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(float __n) {
        return *this << static_cast<double>(__n);
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(double __n) {
        return __put_num(__n);
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(long double __n) {
        return __put_num(__n);
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(const void* __n) {
        return __put_num(__n);
    }
#else
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(bool __n) {
        this->put(__n ? '1' : '0');
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(short __n) {
        char __output[sizeof("-32768")];
        int __len = boot_sprintf(__output, "%d", __n);
        this->write(__output, __len);
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned short __n) {
        char __output[sizeof("65535")];
        int __len = boot_sprintf(__output, "%u", __n);
        this->write(__output, __len);
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(int __n) {
        char __output[sizeof("-8388608")];
        int __len = boot_sprintf(__output, "%d", __n);
        this->write(__output, __len);
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned int __n) {
        char __output[sizeof("16777215")];
        int __len = boot_sprintf(__output, "%u", __n);
        this->write(__output, __len);
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(long __n) {
        char __output[sizeof("-2147483648")];
        int __len = sprintf(__output, "%ld", __n);
        this->write(__output, __len);
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned long __n) {
        char __output[sizeof("4294967295")];
        int __len = sprintf(__output, "%lu", __n);
        this->write(__output, __len);
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(long long __n) {
        char __output[sizeof("-9223372036854775808")];
        int __len = sprintf(__output, "%lld", __n);
        this->write(__output, __len);
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned long long __n) {
        char __output[sizeof("18446744073709551615")];
        int __len = sprintf(__output, "%llu", __n);
        this->write(__output, __len);
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(float __n) {
        char __output[64];
        int __len = snprintf(__output, sizeof(__output), "%g", __n);
        this->write(__output, __len);
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(double __n) {
        char __output[64];
        int __len = snprintf(__output, sizeof(__output), "%lg", __n);
        this->write(__output, __len);
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(long double __n) {
        char __output[64];
        int __len = snprintf(__output, sizeof(__output), "%Lg", __n);
        this->write(__output, __len);
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(const void* __n) {
        char __output[sizeof("0x123456")];
        int __len = boot_sprintf(__output, "%p", __n);
        this->write(__output, __len);
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(eastl::string& __str) {
        this->write(__str.c_str(), __str.size());
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(std::string& __str) {
        this->write(__str.c_str(), __str.size());
        return *this;
    }

    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(std::basic_string<char>& __str) {
        this->write(__str.c_str(), __str.size());
        return *this;
    }
#endif

    template <class _CharT, class _Traits>
    _EZCXX_HIDE_FROM_ABI basic_ostream<_CharT, _Traits>& operator<<(basic_ostream<_CharT, _Traits>& __os, _CharT __c) {
        return std::__put_character_sequence(__os, std::addressof(__c), 1);
    }
    
    template <class _CharT, class _Traits>
    _EZCXX_HIDE_FROM_ABI basic_ostream<_CharT, _Traits>& operator<<(basic_ostream<_CharT, _Traits>& __os, char __cn) {
            typename basic_ostream<_CharT, _Traits>::sentry __s(__os);
            if (__s) {
                _CharT __c = __os.widen(__cn);
                typedef ostreambuf_iterator<_CharT, _Traits> _Ip;
                if (__pad_and_output(
                                _Ip(__os),
                                std::addressof(__c),
                                std::addressof(__c) + (((__os.flags() & ios_base::adjustfield) == ios_base::left) ? 1 : 0),
                                std::addressof(__c) + 1,
                                __os,
                                __os.fill())
                                .failed())
                    __os.setstate(ios_base::badbit | ios_base::failbit);
            }
        return __os;
    }
    
    template <class _Traits>
    _EZCXX_HIDE_FROM_ABI basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& __os, char __c) {
        return std::__put_character_sequence(__os, &__c, 1);
    }
    
    template <class _Traits>
    _EZCXX_HIDE_FROM_ABI basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& __os, signed char __c) {
        return std::__put_character_sequence(__os, (char*)&__c, 1);
    }
    
    template <class _Traits>
    _EZCXX_HIDE_FROM_ABI basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& __os, unsigned char __c) {
        return std::__put_character_sequence(__os, (char*)&__c, 1);
    }
    
    template <class _CharT, class _Traits>
    _EZCXX_HIDE_FROM_ABI basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const _CharT* __str) {
        return std::__put_character_sequence(__os, __str, _Traits::length(__str));
    }
    
    template <class _CharT, class _Traits>
    _EZCXX_HIDE_FROM_ABI basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const char* __strn) {
            typename basic_ostream<_CharT, _Traits>::sentry __s(__os);
            if (__s) {
                typedef ostreambuf_iterator<_CharT, _Traits> _Ip;
                size_t __len   = char_traits<char>::length(__strn);
                const int __bs = 100;
                _CharT __wbb[__bs];
                _CharT* __wb = __wbb;
                unique_ptr<_CharT, void (*)(void*)> __h(0, free);
                if (__len > __bs) {
                    __wb = (_CharT*)malloc(__len * sizeof(_CharT));
                    if (__wb == 0)
                        std::__throw_bad_alloc();
                    __h.reset(__wb);
                }
                for (_CharT* __p = __wb; *__strn != '\0'; ++__strn, ++__p)
                    *__p = __os.widen(*__strn);
                if (__pad_and_output(
                                _Ip(__os),
                                __wb,
                                (__os.flags() & ios_base::adjustfield) == ios_base::left ? __wb + __len : __wb,
                                __wb + __len,
                                __os,
                                __os.fill())
                                .failed())
                    __os.setstate(ios_base::badbit | ios_base::failbit);
            }
        return __os;
    }
    
    template <class _Traits>
    _EZCXX_HIDE_FROM_ABI basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& __os, const char* __str) {
        return std::__put_character_sequence(__os, __str, _Traits::length(__str));
    }
    
    template <class _Traits>
    _EZCXX_HIDE_FROM_ABI basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __os, const signed char* __str) {
        const char* __s = (const char*)__str;
        return std::__put_character_sequence(__os, __s, _Traits::length(__s));
    }
    
    template <class _Traits>
    _EZCXX_HIDE_FROM_ABI basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __os, const unsigned char* __str) {
        const char* __s = (const char*)__str;
        return std::__put_character_sequence(__os, __s, _Traits::length(__s));
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::put(char_type __c) {
            sentry __s(*this);
            if (__s) {
                typedef ostreambuf_iterator<_CharT, _Traits> _Op;
                _Op __o(*this);
                *__o = __c;
                if (__o.failed())
                    this->setstate(ios_base::badbit);
            }
        return *this;
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::write(const char_type* __s, streamsize __n) {
            sentry __sen(*this);
            if (__sen && __n) {
                if (this->rdbuf()->sputn(__s, __n) != __n)
                    this->setstate(ios_base::badbit);
            }
        return *this;
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::flush() {
        if (this->rdbuf()) {
            sentry __s(*this);
            if (__s) {
                if (this->rdbuf()->pubsync() == -1)
                    this->setstate(ios_base::badbit);
            }
        }
        return *this;
    }
    
    template <class _CharT, class _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type basic_ostream<_CharT, _Traits>::tellp() {
        if (this->fail())
            return pos_type(-1);
        return this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::seekp(pos_type __pos) {
        sentry __s(*this);
        if (!this->fail()) {
            if (this->rdbuf()->pubseekpos(__pos, ios_base::out) == pos_type(-1))
                this->setstate(ios_base::failbit);
        }
        return *this;
    }
    
    template <class _CharT, class _Traits>
    basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::seekp(off_type __off, ios_base::seekdir __dir) {
        sentry __s(*this);
        if (!this->fail()) {
            if (this->rdbuf()->pubseekoff(__off, __dir, ios_base::out) == pos_type(-1))
                this->setstate(ios_base::failbit);
        }
        return *this;
    }
    
    template <class _CharT, class _Traits>
    _EZCXX_HIDE_FROM_ABI inline basic_ostream<_CharT, _Traits>& endl(basic_ostream<_CharT, _Traits>& __os) {
        __os.put(__os.widen('\n'));
        __os.flush();
        return __os;
    }
    
    template <class _CharT, class _Traits>
    _EZCXX_HIDE_FROM_ABI inline basic_ostream<_CharT, _Traits>& ends(basic_ostream<_CharT, _Traits>& __os) {
        __os.put(_CharT());
        return __os;
    }
    
    template <class _CharT, class _Traits>
    _EZCXX_HIDE_FROM_ABI inline basic_ostream<_CharT, _Traits>& flush(basic_ostream<_CharT, _Traits>& __os) {
        __os.flush();
        return __os;
    }
    
    template <class _Stream, class _Tp, class = void>
    struct __is_ostreamable : false_type {};
    
    template <class _Stream, class _Tp>
    struct __is_ostreamable<_Stream, _Tp, decltype(std::declval<_Stream>() << std::declval<_Tp>(), void())> : true_type {};
    
    template <class _Stream,
                        class _Tp,
                        enable_if_t<
                        std::conjunction<is_base_of<ios_base, _Stream>, __is_ostreamable<_Stream&, const _Tp&> >::value
                        , int> = 0>
    _EZCXX_HIDE_FROM_ABI _Stream&& operator<<(_Stream&& __os, const _Tp& __x) {
        __os << __x;
        return std::move(__os);
    }
    
    template <class _CharT, class _Traits, class _Allocator>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const basic_string<_CharT, _Traits, _Allocator>& __str) {
        return std::__put_character_sequence(__os, __str.data(), __str.size());
    }
    
    template <class _CharT, class _Traits>
    _EZCXX_HIDE_FROM_ABI basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, basic_string_view<_CharT, _Traits> __sv) {
        return std::__put_character_sequence(__os, __sv.data(), __sv.size());
    }
    
    template <class _CharT, class _Traits>
    inline _EZCXX_HIDE_FROM_ABI basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __ec) {
        return __os << __ec.category().name() << ':' << __ec.value();
    }
    
    template <class _CharT, class _Traits, class _Yp>
    inline _EZCXX_HIDE_FROM_ABI basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p) {
        return __os << __p.get();
    }
    
    template <
            class _CharT,
            class _Traits,
            class _Yp,
            class _Dp,
            enable_if_t<is_same<void,
            void_t<decltype((std::declval<basic_ostream<_CharT, _Traits>&>()
            << std::declval<typename unique_ptr<_Yp, _Dp>::pointer>()))> >::value,
            int> = 0>
    inline _EZCXX_HIDE_FROM_ABI basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, unique_ptr<_Yp, _Dp> const& __p) {
        return __os << __p.get();
    }
    
    extern template class _EZCXX_EXTERN_TEMPLATE_TYPE_VIS basic_ostream<char>;

} // namespace std

#endif // _EZCXX_OSTREAM
