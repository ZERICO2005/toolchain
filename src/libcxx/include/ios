// -*- C++ -*-
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
#ifndef _EZCXX_IOS
#define _EZCXX_IOS

#include <__config>
#include <iosfwd>
#include <type_traits>
#include <system_error>

#pragma clang system_header

namespace std {

//------------------------------------------------------------------------------
// fpos
//------------------------------------------------------------------------------

template <class _StateT>
class _EZCXX_TEMPLATE_VIS fpos {
private:
    _StateT __st_;
    streamoff __off_;

public:
    _EZCXX_HIDE_FROM_ABI fpos(streamoff __off = streamoff()) : __st_(), __off_(__off) {}

    _EZCXX_HIDE_FROM_ABI operator streamoff() const { return __off_; }

    _EZCXX_HIDE_FROM_ABI _StateT state() const { return __st_; }
    _EZCXX_HIDE_FROM_ABI void state(_StateT __st) { __st_ = __st; }

    _EZCXX_HIDE_FROM_ABI fpos& operator+=(streamoff __off) {
        __off_ += __off;
        return *this;
    }

    _EZCXX_HIDE_FROM_ABI fpos operator+(streamoff __off) const {
        fpos __t(*this);
        __t += __off;
        return __t;
    }

    _EZCXX_HIDE_FROM_ABI fpos& operator-=(streamoff __off) {
        __off_ -= __off;
        return *this;
    }

    _EZCXX_HIDE_FROM_ABI fpos operator-(streamoff __off) const {
        fpos __t(*this);
        __t -= __off;
        return __t;
    }
};

template <class _StateT>
inline _EZCXX_HIDE_FROM_ABI streamoff operator-(const fpos<_StateT>& __x, const fpos<_StateT>& __y) {
    return streamoff(__x) - streamoff(__y);
}

template <class _StateT>
inline _EZCXX_HIDE_FROM_ABI bool operator==(const fpos<_StateT>& __x, const fpos<_StateT>& __y) {
    return streamoff(__x) == streamoff(__y);
}

template <class _StateT>
inline _EZCXX_HIDE_FROM_ABI bool operator!=(const fpos<_StateT>& __x, const fpos<_StateT>& __y) {
    return streamoff(__x) != streamoff(__y);
}

//------------------------------------------------------------------------------
// ios_base
//------------------------------------------------------------------------------

typedef ptrdiff_t streamsize;

class _EZCXX_EXPORTED_FROM_ABI ios_base {
public:
    class _EZCXX_EXPORTED_FROM_ABI failure;

    typedef unsigned int fmtflags;
    static constexpr fmtflags boolalpha   = 0x0001;
    static constexpr fmtflags dec         = 0x0002;
    static constexpr fmtflags fixed       = 0x0004;
    static constexpr fmtflags hex         = 0x0008;
    static constexpr fmtflags internal    = 0x0010;
    static constexpr fmtflags left        = 0x0020;
    static constexpr fmtflags oct         = 0x0040;
    static constexpr fmtflags right       = 0x0080;
    static constexpr fmtflags scientific  = 0x0100;
    static constexpr fmtflags showbase    = 0x0200;
    static constexpr fmtflags showpoint   = 0x0400;
    static constexpr fmtflags showpos     = 0x0800;
    static constexpr fmtflags skipws      = 0x1000;
    static constexpr fmtflags unitbuf     = 0x2000;
    static constexpr fmtflags uppercase   = 0x4000;
    static constexpr fmtflags adjustfield = left | right | internal;
    static constexpr fmtflags basefield   = dec | oct | hex;
    static constexpr fmtflags floatfield  = scientific | fixed;

    typedef unsigned int iostate;
    static constexpr iostate badbit  = 0x1;
    static constexpr iostate eofbit  = 0x2;
    static constexpr iostate failbit = 0x4;
    static constexpr iostate goodbit = 0x0;

    typedef unsigned int openmode;
    static constexpr openmode app    = 0x01;
    static constexpr openmode ate    = 0x02;
    static constexpr openmode binary = 0x04;
    static constexpr openmode in     = 0x08;
    static constexpr openmode out    = 0x10;
    static constexpr openmode trunc  = 0x20;

    enum seekdir { beg, cur, end };

    class _EZCXX_EXPORTED_FROM_ABI Init;

    // 27.5.2.2 fmtflags state:
    _EZCXX_HIDE_FROM_ABI fmtflags flags() const;
    _EZCXX_HIDE_FROM_ABI fmtflags flags(fmtflags __fmtfl);
    _EZCXX_HIDE_FROM_ABI fmtflags setf(fmtflags __fmtfl);
    _EZCXX_HIDE_FROM_ABI fmtflags setf(fmtflags __fmtfl, fmtflags __mask);
    _EZCXX_HIDE_FROM_ABI void unsetf(fmtflags __mask);

    _EZCXX_HIDE_FROM_ABI streamsize precision() const;
    _EZCXX_HIDE_FROM_ABI streamsize precision(streamsize __prec);
    _EZCXX_HIDE_FROM_ABI streamsize width() const;
    _EZCXX_HIDE_FROM_ABI streamsize width(streamsize __wide);

    // 27.5.2.5 storage:
    static int xalloc();
    long& iword(int __index);
    void*& pword(int __index);

    // destructor
    virtual ~ios_base();

    // 27.5.2.6 callbacks;
    enum event { erase_event, imbue_event, copyfmt_event };
    typedef void (*event_callback)(event, ios_base&, int __index);
    void register_callback(event_callback __fn, int __index);

    ios_base(const ios_base&)            = delete;
    ios_base& operator=(const ios_base&) = delete;

    static bool sync_with_stdio(bool __sync = true);

    _EZCXX_HIDE_FROM_ABI iostate rdstate() const;
    void clear(iostate __state = goodbit);
    _EZCXX_HIDE_FROM_ABI void setstate(iostate __state);

    _EZCXX_HIDE_FROM_ABI bool good() const;
    _EZCXX_HIDE_FROM_ABI bool eof() const;
    _EZCXX_HIDE_FROM_ABI bool fail() const;
    _EZCXX_HIDE_FROM_ABI bool bad() const;

    _EZCXX_HIDE_FROM_ABI iostate exceptions() const;
    _EZCXX_HIDE_FROM_ABI void exceptions(iostate __iostate);

    void __set_badbit_and_consider_rethrow();
    void __set_failbit_and_consider_rethrow();

    _EZCXX_HIDE_FROM_ABI void __setstate_nothrow(iostate __state) {
        if (__rdbuf_) {
            __rdstate_ |= __state;
        } else {
            __rdstate_ |= __state | ios_base::badbit;
        }
    }

protected:
    _EZCXX_HIDE_FROM_ABI ios_base() : __loc_(nullptr) {
    // Purposefully does no initialization
    //
    // Except for the locale, this is a sentinel to avoid destroying
    // an uninitialized object. See
    // test/libcxx/input.output/iostreams.base/ios.base/ios.base.cons/dtor.uninitialized.pass.cpp
    // for the details.
    }

    void init(void* __sb);
    _EZCXX_HIDE_FROM_ABI void* rdbuf() const { return __rdbuf_; }

    _EZCXX_HIDE_FROM_ABI void rdbuf(void* __sb) {
    __rdbuf_ = __sb;
    clear();
    }

    void __call_callbacks(event);
    void copyfmt(const ios_base&);
    void move(ios_base&);
    void swap(ios_base&) noexcept;

    _EZCXX_HIDE_FROM_ABI void set_rdbuf(void* __sb) { __rdbuf_ = __sb; }

private:
    // All data members must be scalars
    fmtflags __fmtflags_;
    streamsize __precision_;
    streamsize __width_;
    iostate __rdstate_;
    iostate __exceptions_;
    void* __rdbuf_;
    void* __loc_;
    event_callback* __fn_;
    int* __index_;
    size_t __event_size_;
    size_t __event_cap_;
// TODO(EricWF): Enable this for both Clang and GCC. Currently it is only
// enabled with clang.
    static int __xindex_;
    long* __iarray_;
    size_t __iarray_size_;
    size_t __iarray_cap_;
    void** __parray_;
    size_t __parray_size_;
    size_t __parray_cap_;
};

// enum class io_errc
enum class io_errc {
    stream = 1,
};

template <>
struct _EZCXX_TEMPLATE_VIS is_error_code_enum<io_errc> : public true_type {};

_EZCXX_EXPORTED_FROM_ABI const error_category& iostream_category() noexcept;

inline _EZCXX_HIDE_FROM_ABI error_code make_error_code(io_errc __e) noexcept {
    return error_code(static_cast<int>(__e), iostream_category());
}

inline _EZCXX_HIDE_FROM_ABI error_condition make_error_condition(io_errc __e) noexcept {
    return error_condition(static_cast<int>(__e), iostream_category());
}

#if 0
class _EZCXX_EXPORTED_FROM_ABI ios_base::failure : public system_error {
public:
    explicit failure(const string& __msg, const error_code& __ec = io_errc::stream);
    explicit failure(const char* __msg, const error_code& __ec = io_errc::stream);
    _EZCXX_HIDE_FROM_ABI failure(const failure&) noexcept = default;
    ~failure() noexcept override;
};

[[__noreturn__]] inline _EZCXX_HIDE_FROM_ABI void __throw_failure(char const* __msg) {
    throw ios_base::failure(__msg);
}
#endif

class _EZCXX_EXPORTED_FROM_ABI ios_base::Init {
public:
    Init();
    ~Init();
};

// fmtflags

inline _EZCXX_HIDE_FROM_ABI ios_base::fmtflags ios_base::flags() const { return __fmtflags_; }

inline _EZCXX_HIDE_FROM_ABI ios_base::fmtflags ios_base::flags(fmtflags __fmtfl) {
    fmtflags __r = __fmtflags_;
    __fmtflags_  = __fmtfl;
    return __r;
}

inline _EZCXX_HIDE_FROM_ABI ios_base::fmtflags ios_base::setf(fmtflags __fmtfl) {
    fmtflags __r = __fmtflags_;
    __fmtflags_ |= __fmtfl;
    return __r;
}

inline _EZCXX_HIDE_FROM_ABI void ios_base::unsetf(fmtflags __mask) { __fmtflags_ &= ~__mask; }

inline _EZCXX_HIDE_FROM_ABI ios_base::fmtflags ios_base::setf(fmtflags __fmtfl, fmtflags __mask) {
    fmtflags __r = __fmtflags_;
    unsetf(__mask);
    __fmtflags_ |= __fmtfl & __mask;
    return __r;
}

// precision

inline _EZCXX_HIDE_FROM_ABI streamsize ios_base::precision() const { return __precision_; }

inline _EZCXX_HIDE_FROM_ABI streamsize ios_base::precision(streamsize __prec) {
    streamsize __r = __precision_;
    __precision_   = __prec;
    return __r;
}

// width

inline _EZCXX_HIDE_FROM_ABI streamsize ios_base::width() const { return __width_; }

inline _EZCXX_HIDE_FROM_ABI streamsize ios_base::width(streamsize __wide) {
    streamsize __r = __width_;
    __width_       = __wide;
    return __r;
}

// iostate

inline _EZCXX_HIDE_FROM_ABI ios_base::iostate ios_base::rdstate() const { return __rdstate_; }

inline _EZCXX_HIDE_FROM_ABI void ios_base::setstate(iostate __state) { clear(__rdstate_ | __state); }

inline _EZCXX_HIDE_FROM_ABI bool ios_base::good() const { return __rdstate_ == 0; }

inline _EZCXX_HIDE_FROM_ABI bool ios_base::eof() const { return (__rdstate_ & eofbit) != 0; }

inline _EZCXX_HIDE_FROM_ABI bool ios_base::fail() const { return (__rdstate_ & (failbit | badbit)) != 0; }

inline _EZCXX_HIDE_FROM_ABI bool ios_base::bad() const { return (__rdstate_ & badbit) != 0; }

inline _EZCXX_HIDE_FROM_ABI ios_base::iostate ios_base::exceptions() const { return __exceptions_; }

inline _EZCXX_HIDE_FROM_ABI void ios_base::exceptions(iostate __iostate) {
    __exceptions_ = __iostate;
    clear(__rdstate_);
}

template <class _Traits>
// Attribute 'packed' is used to keep the layout compatible with the previous
// definition of the '__fill_' and '_set_' pair in basic_ios on AIX & z/OS.
struct _EZCXX_PACKED _FillHelper {
    _EZCXX_HIDE_FROM_ABI void __init() {
    __set_      = false;
    __fill_val_ = _Traits::eof();
    }
    _EZCXX_HIDE_FROM_ABI _FillHelper& operator=(typename _Traits::int_type __x) {
    __set_      = true;
    __fill_val_ = __x;
    return *this;
    }
    _EZCXX_HIDE_FROM_ABI bool __is_set() const { return __set_; }
    _EZCXX_HIDE_FROM_ABI typename _Traits::int_type __get() const { return __fill_val_; }

private:
    typename _Traits::int_type __fill_val_;
    bool __set_;
};

template <class _Traits>
struct _EZCXX_PACKED _SentinelValueFill {
    _EZCXX_HIDE_FROM_ABI void __init() { __fill_val_ = _Traits::eof(); }
    _EZCXX_HIDE_FROM_ABI _SentinelValueFill& operator=(typename _Traits::int_type __x) {
    __fill_val_ = __x;
    return *this;
    }
    _EZCXX_HIDE_FROM_ABI bool __is_set() const { return __fill_val_ != _Traits::eof(); }
    _EZCXX_HIDE_FROM_ABI typename _Traits::int_type __get() const { return __fill_val_; }

private:
    typename _Traits::int_type __fill_val_;
};

template <class _CharT, class _Traits>
class _EZCXX_TEMPLATE_VIS basic_ios : public ios_base {
public:
    // types:
    typedef _CharT char_type;
    typedef _Traits traits_type;

    typedef typename traits_type::int_type int_type;
    typedef typename traits_type::pos_type pos_type;
    typedef typename traits_type::off_type off_type;

    static_assert(is_same<_CharT, typename traits_type::char_type>::value,
                "traits_type::char_type must be the same type as CharT");

#    ifdef _EZCXX_CXX03_LANG
    // Preserve the ability to compare with literal 0,
    // and implicitly convert to bool, but not implicitly convert to int.
    _EZCXX_HIDE_FROM_ABI operator void*() const { return fail() ? nullptr : (void*)this; }
#    else
    _EZCXX_HIDE_FROM_ABI explicit operator bool() const { return !fail(); }
#    endif

    _EZCXX_HIDE_FROM_ABI bool operator!() const { return fail(); }
    _EZCXX_HIDE_FROM_ABI iostate rdstate() const { return ios_base::rdstate(); }
    _EZCXX_HIDE_FROM_ABI void clear(iostate __state = goodbit) { ios_base::clear(__state); }
    _EZCXX_HIDE_FROM_ABI void setstate(iostate __state) { ios_base::setstate(__state); }
    _EZCXX_HIDE_FROM_ABI bool good() const { return ios_base::good(); }
    _EZCXX_HIDE_FROM_ABI bool eof() const { return ios_base::eof(); }
    _EZCXX_HIDE_FROM_ABI bool fail() const { return ios_base::fail(); }
    _EZCXX_HIDE_FROM_ABI bool bad() const { return ios_base::bad(); }

    _EZCXX_HIDE_FROM_ABI iostate exceptions() const { return ios_base::exceptions(); }
    _EZCXX_HIDE_FROM_ABI void exceptions(iostate __iostate) { ios_base::exceptions(__iostate); }

    // 27.5.4.1 Constructor/destructor:
    _EZCXX_HIDE_FROM_ABI explicit basic_ios(basic_streambuf<char_type, traits_type>* __sb);
    ~basic_ios() override;

    // 27.5.4.2 Members:
    _EZCXX_HIDE_FROM_ABI basic_ostream<char_type, traits_type>* tie() const;
    _EZCXX_HIDE_FROM_ABI basic_ostream<char_type, traits_type>* tie(basic_ostream<char_type, traits_type>* __tiestr);

    _EZCXX_HIDE_FROM_ABI basic_streambuf<char_type, traits_type>* rdbuf() const;
    _EZCXX_HIDE_FROM_ABI basic_streambuf<char_type, traits_type>* rdbuf(basic_streambuf<char_type, traits_type>* __sb);

    basic_ios& copyfmt(const basic_ios& __rhs);

    _EZCXX_HIDE_FROM_ABI char_type fill() const;
    _EZCXX_HIDE_FROM_ABI char_type fill(char_type __ch);

    _EZCXX_HIDE_FROM_ABI char narrow(char_type __c, char __dfault) const;
    _EZCXX_HIDE_FROM_ABI char_type widen(char __c) const;

protected:
    _EZCXX_HIDE_FROM_ABI basic_ios() {
    // purposefully does no initialization
    // since the destructor does nothing this does not have ios_base issues.
    }
    _EZCXX_HIDE_FROM_ABI void init(basic_streambuf<char_type, traits_type>* __sb);

    _EZCXX_HIDE_FROM_ABI void move(basic_ios& __rhs);
    _EZCXX_HIDE_FROM_ABI void move(basic_ios&& __rhs) { move(__rhs); }
    _EZCXX_HIDE_FROM_ABI void swap(basic_ios& __rhs) noexcept;
    _EZCXX_HIDE_FROM_ABI void set_rdbuf(basic_streambuf<char_type, traits_type>* __sb);

private:
    basic_ostream<char_type, traits_type>* __tie_;

#    if defined(_EZCXX_ABI_IOS_ALLOW_ARBITRARY_FILL_VALUE)
    using _FillType _EZCXX_NODEBUG = _FillHelper<traits_type>;
#    else
    using _FillType _EZCXX_NODEBUG = _SentinelValueFill<traits_type>;
#    endif
    mutable _FillType __fill_;
};

template <class _CharT, class _Traits>
inline _EZCXX_HIDE_FROM_ABI basic_ios<_CharT, _Traits>::basic_ios(basic_streambuf<char_type, traits_type>* __sb) {
    init(__sb);
}

template <class _CharT, class _Traits>
basic_ios<_CharT, _Traits>::~basic_ios() {}

template <class _CharT, class _Traits>
inline _EZCXX_HIDE_FROM_ABI void basic_ios<_CharT, _Traits>::init(basic_streambuf<char_type, traits_type>* __sb) {
    ios_base::init(__sb);
    __tie_ = nullptr;
    __fill_.__init();
}

template <class _CharT, class _Traits>
inline _EZCXX_HIDE_FROM_ABI basic_ostream<_CharT, _Traits>* basic_ios<_CharT, _Traits>::tie() const {
    return __tie_;
}

template <class _CharT, class _Traits>
inline _EZCXX_HIDE_FROM_ABI basic_ostream<_CharT, _Traits>*
basic_ios<_CharT, _Traits>::tie(basic_ostream<char_type, traits_type>* __tiestr) {
    basic_ostream<char_type, traits_type>* __r = __tie_;
    __tie_                                     = __tiestr;
    return __r;
}

template <class _CharT, class _Traits>
inline _EZCXX_HIDE_FROM_ABI basic_streambuf<_CharT, _Traits>* basic_ios<_CharT, _Traits>::rdbuf() const {
    return static_cast<basic_streambuf<char_type, traits_type>*>(ios_base::rdbuf());
}

template <class _CharT, class _Traits>
inline _EZCXX_HIDE_FROM_ABI basic_streambuf<_CharT, _Traits>*
basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<char_type, traits_type>* __sb) {
    basic_streambuf<char_type, traits_type>* __r = rdbuf();
    ios_base::rdbuf(__sb);
    return __r;
}

template <class _CharT, class _Traits>
inline _EZCXX_HIDE_FROM_ABI _CharT basic_ios<_CharT, _Traits>::fill() const {
    if (!__fill_.__is_set())
        __fill_ = widen(' ');
    return __fill_.__get();
}

template <class _CharT, class _Traits>
inline _EZCXX_HIDE_FROM_ABI _CharT basic_ios<_CharT, _Traits>::fill(char_type __ch) {
    if (!__fill_.__is_set())
        __fill_ = widen(' ');
    char_type __r = __fill_.__get();
    __fill_       = __ch;
    return __r;
}

template <class _CharT, class _Traits>
basic_ios<_CharT, _Traits>& basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs) {
    if (this != std::addressof(__rhs)) {
    __call_callbacks(erase_event);
    ios_base::copyfmt(__rhs);
    __tie_  = __rhs.__tie_;
    __fill_ = __rhs.__fill_;
    __call_callbacks(copyfmt_event);
    exceptions(__rhs.exceptions());
    }
    return *this;
}

template <class _CharT, class _Traits>
inline _EZCXX_HIDE_FROM_ABI void basic_ios<_CharT, _Traits>::move(basic_ios& __rhs) {
    ios_base::move(__rhs);
    __tie_       = __rhs.__tie_;
    __rhs.__tie_ = nullptr;
    __fill_      = __rhs.__fill_;
}

template <class _CharT, class _Traits>
inline _EZCXX_HIDE_FROM_ABI void basic_ios<_CharT, _Traits>::swap(basic_ios& __rhs) noexcept {
    ios_base::swap(__rhs);
    std::swap(__tie_, __rhs.__tie_);
    std::swap(__fill_, __rhs.__fill_);
}

template <class _CharT, class _Traits>
inline _EZCXX_HIDE_FROM_ABI void basic_ios<_CharT, _Traits>::set_rdbuf(basic_streambuf<char_type, traits_type>* __sb) {
    ios_base::set_rdbuf(__sb);
}

extern template class _EZCXX_EXTERN_TEMPLATE_TYPE_VIS basic_ios<char>;

_EZCXX_HIDE_FROM_ABI inline ios_base& boolalpha(ios_base& __str) {
    __str.setf(ios_base::boolalpha);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& noboolalpha(ios_base& __str) {
    __str.unsetf(ios_base::boolalpha);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& showbase(ios_base& __str) {
    __str.setf(ios_base::showbase);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& noshowbase(ios_base& __str) {
    __str.unsetf(ios_base::showbase);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& showpoint(ios_base& __str) {
    __str.setf(ios_base::showpoint);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& noshowpoint(ios_base& __str) {
    __str.unsetf(ios_base::showpoint);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& showpos(ios_base& __str) {
    __str.setf(ios_base::showpos);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& noshowpos(ios_base& __str) {
    __str.unsetf(ios_base::showpos);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& skipws(ios_base& __str) {
    __str.setf(ios_base::skipws);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& noskipws(ios_base& __str) {
    __str.unsetf(ios_base::skipws);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& uppercase(ios_base& __str) {
    __str.setf(ios_base::uppercase);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& nouppercase(ios_base& __str) {
    __str.unsetf(ios_base::uppercase);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& unitbuf(ios_base& __str) {
    __str.setf(ios_base::unitbuf);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& nounitbuf(ios_base& __str) {
    __str.unsetf(ios_base::unitbuf);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& internal(ios_base& __str) {
    __str.setf(ios_base::internal, ios_base::adjustfield);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& left(ios_base& __str) {
    __str.setf(ios_base::left, ios_base::adjustfield);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& right(ios_base& __str) {
    __str.setf(ios_base::right, ios_base::adjustfield);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& dec(ios_base& __str) {
    __str.setf(ios_base::dec, ios_base::basefield);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& hex(ios_base& __str) {
    __str.setf(ios_base::hex, ios_base::basefield);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& oct(ios_base& __str) {
    __str.setf(ios_base::oct, ios_base::basefield);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& fixed(ios_base& __str) {
    __str.setf(ios_base::fixed, ios_base::floatfield);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& scientific(ios_base& __str) {
    __str.setf(ios_base::scientific, ios_base::floatfield);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& hexfloat(ios_base& __str) {
    __str.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
    return __str;
}

_EZCXX_HIDE_FROM_ABI inline ios_base& defaultfloat(ios_base& __str) {
    __str.unsetf(ios_base::floatfield);
    return __str;
}

} // namespace std

#endif // _EZCXX_IOS
